
Charge_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bdc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08006dc4  08006dc4  00016dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006e98  08006e98  00016e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006e9c  08006e9c  00016e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000268  20000000  08006ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002bc  20000268  08007108  00020268  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000524  08007108  00020524  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013196  00000000  00000000  00020291  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000024de  00000000  00000000  00033427  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d18  00000000  00000000  00035908  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c68  00000000  00000000  00036620  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00007472  00000000  00000000  00037288  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000416e  00000000  00000000  0003e6fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00042868  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003cac  00000000  00000000  000428e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000268 	.word	0x20000268
 8000204:	00000000 	.word	0x00000000
 8000208:	08006dac 	.word	0x08006dac

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000026c 	.word	0x2000026c
 8000224:	08006dac 	.word	0x08006dac

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f092 0f00 	teq	r2, #0
 8000512:	bf14      	ite	ne
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e720      	b.n	800036c <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aedc 	beq.w	800031a <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6c1      	b.n	800031a <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_frsub>:
 8000b6c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b70:	e002      	b.n	8000b78 <__addsf3>
 8000b72:	bf00      	nop

08000b74 <__aeabi_fsub>:
 8000b74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b78 <__addsf3>:
 8000b78:	0042      	lsls	r2, r0, #1
 8000b7a:	bf1f      	itttt	ne
 8000b7c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b80:	ea92 0f03 	teqne	r2, r3
 8000b84:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b88:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8c:	d06a      	beq.n	8000c64 <__addsf3+0xec>
 8000b8e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b92:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b96:	bfc1      	itttt	gt
 8000b98:	18d2      	addgt	r2, r2, r3
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	4048      	eorgt	r0, r1
 8000b9e:	4041      	eorgt	r1, r0
 8000ba0:	bfb8      	it	lt
 8000ba2:	425b      	neglt	r3, r3
 8000ba4:	2b19      	cmp	r3, #25
 8000ba6:	bf88      	it	hi
 8000ba8:	4770      	bxhi	lr
 8000baa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bc2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4249      	negne	r1, r1
 8000bca:	ea92 0f03 	teq	r2, r3
 8000bce:	d03f      	beq.n	8000c50 <__addsf3+0xd8>
 8000bd0:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd4:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd8:	eb10 000c 	adds.w	r0, r0, ip
 8000bdc:	f1c3 0320 	rsb	r3, r3, #32
 8000be0:	fa01 f103 	lsl.w	r1, r1, r3
 8000be4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be8:	d502      	bpl.n	8000bf0 <__addsf3+0x78>
 8000bea:	4249      	negs	r1, r1
 8000bec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bf0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf4:	d313      	bcc.n	8000c1e <__addsf3+0xa6>
 8000bf6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bfa:	d306      	bcc.n	8000c0a <__addsf3+0x92>
 8000bfc:	0840      	lsrs	r0, r0, #1
 8000bfe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c02:	f102 0201 	add.w	r2, r2, #1
 8000c06:	2afe      	cmp	r2, #254	; 0xfe
 8000c08:	d251      	bcs.n	8000cae <__addsf3+0x136>
 8000c0a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c12:	bf08      	it	eq
 8000c14:	f020 0001 	biceq.w	r0, r0, #1
 8000c18:	ea40 0003 	orr.w	r0, r0, r3
 8000c1c:	4770      	bx	lr
 8000c1e:	0049      	lsls	r1, r1, #1
 8000c20:	eb40 0000 	adc.w	r0, r0, r0
 8000c24:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c28:	f1a2 0201 	sub.w	r2, r2, #1
 8000c2c:	d1ed      	bne.n	8000c0a <__addsf3+0x92>
 8000c2e:	fab0 fc80 	clz	ip, r0
 8000c32:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c36:	ebb2 020c 	subs.w	r2, r2, ip
 8000c3a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3e:	bfaa      	itet	ge
 8000c40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c44:	4252      	neglt	r2, r2
 8000c46:	4318      	orrge	r0, r3
 8000c48:	bfbc      	itt	lt
 8000c4a:	40d0      	lsrlt	r0, r2
 8000c4c:	4318      	orrlt	r0, r3
 8000c4e:	4770      	bx	lr
 8000c50:	f092 0f00 	teq	r2, #0
 8000c54:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c58:	bf06      	itte	eq
 8000c5a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5e:	3201      	addeq	r2, #1
 8000c60:	3b01      	subne	r3, #1
 8000c62:	e7b5      	b.n	8000bd0 <__addsf3+0x58>
 8000c64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c6c:	bf18      	it	ne
 8000c6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c72:	d021      	beq.n	8000cb8 <__addsf3+0x140>
 8000c74:	ea92 0f03 	teq	r2, r3
 8000c78:	d004      	beq.n	8000c84 <__addsf3+0x10c>
 8000c7a:	f092 0f00 	teq	r2, #0
 8000c7e:	bf08      	it	eq
 8000c80:	4608      	moveq	r0, r1
 8000c82:	4770      	bx	lr
 8000c84:	ea90 0f01 	teq	r0, r1
 8000c88:	bf1c      	itt	ne
 8000c8a:	2000      	movne	r0, #0
 8000c8c:	4770      	bxne	lr
 8000c8e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c92:	d104      	bne.n	8000c9e <__addsf3+0x126>
 8000c94:	0040      	lsls	r0, r0, #1
 8000c96:	bf28      	it	cs
 8000c98:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	4770      	bx	lr
 8000c9e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ca2:	bf3c      	itt	cc
 8000ca4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca8:	4770      	bxcc	lr
 8000caa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb6:	4770      	bx	lr
 8000cb8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cbc:	bf16      	itet	ne
 8000cbe:	4608      	movne	r0, r1
 8000cc0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc4:	4601      	movne	r1, r0
 8000cc6:	0242      	lsls	r2, r0, #9
 8000cc8:	bf06      	itte	eq
 8000cca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cce:	ea90 0f01 	teqeq	r0, r1
 8000cd2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_ui2f>:
 8000cd8:	f04f 0300 	mov.w	r3, #0
 8000cdc:	e004      	b.n	8000ce8 <__aeabi_i2f+0x8>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_i2f>:
 8000ce0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce4:	bf48      	it	mi
 8000ce6:	4240      	negmi	r0, r0
 8000ce8:	ea5f 0c00 	movs.w	ip, r0
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf4:	4601      	mov	r1, r0
 8000cf6:	f04f 0000 	mov.w	r0, #0
 8000cfa:	e01c      	b.n	8000d36 <__aeabi_l2f+0x2a>

08000cfc <__aeabi_ul2f>:
 8000cfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000d00:	bf08      	it	eq
 8000d02:	4770      	bxeq	lr
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e00a      	b.n	8000d20 <__aeabi_l2f+0x14>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_l2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d18:	d502      	bpl.n	8000d20 <__aeabi_l2f+0x14>
 8000d1a:	4240      	negs	r0, r0
 8000d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d20:	ea5f 0c01 	movs.w	ip, r1
 8000d24:	bf02      	ittt	eq
 8000d26:	4684      	moveq	ip, r0
 8000d28:	4601      	moveq	r1, r0
 8000d2a:	2000      	moveq	r0, #0
 8000d2c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d30:	bf08      	it	eq
 8000d32:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d36:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d3a:	fabc f28c 	clz	r2, ip
 8000d3e:	3a08      	subs	r2, #8
 8000d40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d44:	db10      	blt.n	8000d68 <__aeabi_l2f+0x5c>
 8000d46:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d50:	f1c2 0220 	rsb	r2, r2, #32
 8000d54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d58:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5c:	eb43 0002 	adc.w	r0, r3, r2
 8000d60:	bf08      	it	eq
 8000d62:	f020 0001 	biceq.w	r0, r0, #1
 8000d66:	4770      	bx	lr
 8000d68:	f102 0220 	add.w	r2, r2, #32
 8000d6c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d70:	f1c2 0220 	rsb	r2, r2, #32
 8000d74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d78:	fa21 f202 	lsr.w	r2, r1, r2
 8000d7c:	eb43 0002 	adc.w	r0, r3, r2
 8000d80:	bf08      	it	eq
 8000d82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_fmul>:
 8000d88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d90:	bf1e      	ittt	ne
 8000d92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d96:	ea92 0f0c 	teqne	r2, ip
 8000d9a:	ea93 0f0c 	teqne	r3, ip
 8000d9e:	d06f      	beq.n	8000e80 <__aeabi_fmul+0xf8>
 8000da0:	441a      	add	r2, r3
 8000da2:	ea80 0c01 	eor.w	ip, r0, r1
 8000da6:	0240      	lsls	r0, r0, #9
 8000da8:	bf18      	it	ne
 8000daa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dae:	d01e      	beq.n	8000dee <__aeabi_fmul+0x66>
 8000db0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dbc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dc0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc8:	bf3e      	ittt	cc
 8000dca:	0049      	lslcc	r1, r1, #1
 8000dcc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dd0:	005b      	lslcc	r3, r3, #1
 8000dd2:	ea40 0001 	orr.w	r0, r0, r1
 8000dd6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dda:	2afd      	cmp	r2, #253	; 0xfd
 8000ddc:	d81d      	bhi.n	8000e1a <__aeabi_fmul+0x92>
 8000dde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000de2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de6:	bf08      	it	eq
 8000de8:	f020 0001 	biceq.w	r0, r0, #1
 8000dec:	4770      	bx	lr
 8000dee:	f090 0f00 	teq	r0, #0
 8000df2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df6:	bf08      	it	eq
 8000df8:	0249      	lsleq	r1, r1, #9
 8000dfa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e02:	3a7f      	subs	r2, #127	; 0x7f
 8000e04:	bfc2      	ittt	gt
 8000e06:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0e:	4770      	bxgt	lr
 8000e10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	3a01      	subs	r2, #1
 8000e1a:	dc5d      	bgt.n	8000ed8 <__aeabi_fmul+0x150>
 8000e1c:	f112 0f19 	cmn.w	r2, #25
 8000e20:	bfdc      	itt	le
 8000e22:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e26:	4770      	bxle	lr
 8000e28:	f1c2 0200 	rsb	r2, r2, #0
 8000e2c:	0041      	lsls	r1, r0, #1
 8000e2e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e32:	f1c2 0220 	rsb	r2, r2, #32
 8000e36:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e3a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3e:	f140 0000 	adc.w	r0, r0, #0
 8000e42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e46:	bf08      	it	eq
 8000e48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e4c:	4770      	bx	lr
 8000e4e:	f092 0f00 	teq	r2, #0
 8000e52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e56:	bf02      	ittt	eq
 8000e58:	0040      	lsleq	r0, r0, #1
 8000e5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5e:	3a01      	subeq	r2, #1
 8000e60:	d0f9      	beq.n	8000e56 <__aeabi_fmul+0xce>
 8000e62:	ea40 000c 	orr.w	r0, r0, ip
 8000e66:	f093 0f00 	teq	r3, #0
 8000e6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6e:	bf02      	ittt	eq
 8000e70:	0049      	lsleq	r1, r1, #1
 8000e72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e76:	3b01      	subeq	r3, #1
 8000e78:	d0f9      	beq.n	8000e6e <__aeabi_fmul+0xe6>
 8000e7a:	ea41 010c 	orr.w	r1, r1, ip
 8000e7e:	e78f      	b.n	8000da0 <__aeabi_fmul+0x18>
 8000e80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e84:	ea92 0f0c 	teq	r2, ip
 8000e88:	bf18      	it	ne
 8000e8a:	ea93 0f0c 	teqne	r3, ip
 8000e8e:	d00a      	beq.n	8000ea6 <__aeabi_fmul+0x11e>
 8000e90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e94:	bf18      	it	ne
 8000e96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	d1d8      	bne.n	8000e4e <__aeabi_fmul+0xc6>
 8000e9c:	ea80 0001 	eor.w	r0, r0, r1
 8000ea0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea4:	4770      	bx	lr
 8000ea6:	f090 0f00 	teq	r0, #0
 8000eaa:	bf17      	itett	ne
 8000eac:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eb0:	4608      	moveq	r0, r1
 8000eb2:	f091 0f00 	teqne	r1, #0
 8000eb6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eba:	d014      	beq.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ebc:	ea92 0f0c 	teq	r2, ip
 8000ec0:	d101      	bne.n	8000ec6 <__aeabi_fmul+0x13e>
 8000ec2:	0242      	lsls	r2, r0, #9
 8000ec4:	d10f      	bne.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ec6:	ea93 0f0c 	teq	r3, ip
 8000eca:	d103      	bne.n	8000ed4 <__aeabi_fmul+0x14c>
 8000ecc:	024b      	lsls	r3, r1, #9
 8000ece:	bf18      	it	ne
 8000ed0:	4608      	movne	r0, r1
 8000ed2:	d108      	bne.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ed4:	ea80 0001 	eor.w	r0, r0, r1
 8000ed8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000edc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee4:	4770      	bx	lr
 8000ee6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eea:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eee:	4770      	bx	lr

08000ef0 <__aeabi_fdiv>:
 8000ef0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef8:	bf1e      	ittt	ne
 8000efa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efe:	ea92 0f0c 	teqne	r2, ip
 8000f02:	ea93 0f0c 	teqne	r3, ip
 8000f06:	d069      	beq.n	8000fdc <__aeabi_fdiv+0xec>
 8000f08:	eba2 0203 	sub.w	r2, r2, r3
 8000f0c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f10:	0249      	lsls	r1, r1, #9
 8000f12:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f16:	d037      	beq.n	8000f88 <__aeabi_fdiv+0x98>
 8000f18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f24:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f28:	428b      	cmp	r3, r1
 8000f2a:	bf38      	it	cc
 8000f2c:	005b      	lslcc	r3, r3, #1
 8000f2e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f32:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f36:	428b      	cmp	r3, r1
 8000f38:	bf24      	itt	cs
 8000f3a:	1a5b      	subcs	r3, r3, r1
 8000f3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f44:	bf24      	itt	cs
 8000f46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f52:	bf24      	itt	cs
 8000f54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f60:	bf24      	itt	cs
 8000f62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f6a:	011b      	lsls	r3, r3, #4
 8000f6c:	bf18      	it	ne
 8000f6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f72:	d1e0      	bne.n	8000f36 <__aeabi_fdiv+0x46>
 8000f74:	2afd      	cmp	r2, #253	; 0xfd
 8000f76:	f63f af50 	bhi.w	8000e1a <__aeabi_fmul+0x92>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f80:	bf08      	it	eq
 8000f82:	f020 0001 	biceq.w	r0, r0, #1
 8000f86:	4770      	bx	lr
 8000f88:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f90:	327f      	adds	r2, #127	; 0x7f
 8000f92:	bfc2      	ittt	gt
 8000f94:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f9c:	4770      	bxgt	lr
 8000f9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	3a01      	subs	r2, #1
 8000fa8:	e737      	b.n	8000e1a <__aeabi_fmul+0x92>
 8000faa:	f092 0f00 	teq	r2, #0
 8000fae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fb2:	bf02      	ittt	eq
 8000fb4:	0040      	lsleq	r0, r0, #1
 8000fb6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fba:	3a01      	subeq	r2, #1
 8000fbc:	d0f9      	beq.n	8000fb2 <__aeabi_fdiv+0xc2>
 8000fbe:	ea40 000c 	orr.w	r0, r0, ip
 8000fc2:	f093 0f00 	teq	r3, #0
 8000fc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fca:	bf02      	ittt	eq
 8000fcc:	0049      	lsleq	r1, r1, #1
 8000fce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fd2:	3b01      	subeq	r3, #1
 8000fd4:	d0f9      	beq.n	8000fca <__aeabi_fdiv+0xda>
 8000fd6:	ea41 010c 	orr.w	r1, r1, ip
 8000fda:	e795      	b.n	8000f08 <__aeabi_fdiv+0x18>
 8000fdc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fe0:	ea92 0f0c 	teq	r2, ip
 8000fe4:	d108      	bne.n	8000ff8 <__aeabi_fdiv+0x108>
 8000fe6:	0242      	lsls	r2, r0, #9
 8000fe8:	f47f af7d 	bne.w	8000ee6 <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	f47f af70 	bne.w	8000ed4 <__aeabi_fmul+0x14c>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e776      	b.n	8000ee6 <__aeabi_fmul+0x15e>
 8000ff8:	ea93 0f0c 	teq	r3, ip
 8000ffc:	d104      	bne.n	8001008 <__aeabi_fdiv+0x118>
 8000ffe:	024b      	lsls	r3, r1, #9
 8001000:	f43f af4c 	beq.w	8000e9c <__aeabi_fmul+0x114>
 8001004:	4608      	mov	r0, r1
 8001006:	e76e      	b.n	8000ee6 <__aeabi_fmul+0x15e>
 8001008:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800100c:	bf18      	it	ne
 800100e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001012:	d1ca      	bne.n	8000faa <__aeabi_fdiv+0xba>
 8001014:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001018:	f47f af5c 	bne.w	8000ed4 <__aeabi_fmul+0x14c>
 800101c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001020:	f47f af3c 	bne.w	8000e9c <__aeabi_fmul+0x114>
 8001024:	e75f      	b.n	8000ee6 <__aeabi_fmul+0x15e>
 8001026:	bf00      	nop

08001028 <__gesf2>:
 8001028:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800102c:	e006      	b.n	800103c <__cmpsf2+0x4>
 800102e:	bf00      	nop

08001030 <__lesf2>:
 8001030:	f04f 0c01 	mov.w	ip, #1
 8001034:	e002      	b.n	800103c <__cmpsf2+0x4>
 8001036:	bf00      	nop

08001038 <__cmpsf2>:
 8001038:	f04f 0c01 	mov.w	ip, #1
 800103c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001040:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001044:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	bf18      	it	ne
 800104e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001052:	d011      	beq.n	8001078 <__cmpsf2+0x40>
 8001054:	b001      	add	sp, #4
 8001056:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800105a:	bf18      	it	ne
 800105c:	ea90 0f01 	teqne	r0, r1
 8001060:	bf58      	it	pl
 8001062:	ebb2 0003 	subspl.w	r0, r2, r3
 8001066:	bf88      	it	hi
 8001068:	17c8      	asrhi	r0, r1, #31
 800106a:	bf38      	it	cc
 800106c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001070:	bf18      	it	ne
 8001072:	f040 0001 	orrne.w	r0, r0, #1
 8001076:	4770      	bx	lr
 8001078:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800107c:	d102      	bne.n	8001084 <__cmpsf2+0x4c>
 800107e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001082:	d105      	bne.n	8001090 <__cmpsf2+0x58>
 8001084:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001088:	d1e4      	bne.n	8001054 <__cmpsf2+0x1c>
 800108a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108e:	d0e1      	beq.n	8001054 <__cmpsf2+0x1c>
 8001090:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <__aeabi_cfrcmple>:
 8001098:	4684      	mov	ip, r0
 800109a:	4608      	mov	r0, r1
 800109c:	4661      	mov	r1, ip
 800109e:	e7ff      	b.n	80010a0 <__aeabi_cfcmpeq>

080010a0 <__aeabi_cfcmpeq>:
 80010a0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010a2:	f7ff ffc9 	bl	8001038 <__cmpsf2>
 80010a6:	2800      	cmp	r0, #0
 80010a8:	bf48      	it	mi
 80010aa:	f110 0f00 	cmnmi.w	r0, #0
 80010ae:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010b0 <__aeabi_fcmpeq>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff fff4 	bl	80010a0 <__aeabi_cfcmpeq>
 80010b8:	bf0c      	ite	eq
 80010ba:	2001      	moveq	r0, #1
 80010bc:	2000      	movne	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_fcmplt>:
 80010c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c8:	f7ff ffea 	bl	80010a0 <__aeabi_cfcmpeq>
 80010cc:	bf34      	ite	cc
 80010ce:	2001      	movcc	r0, #1
 80010d0:	2000      	movcs	r0, #0
 80010d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d6:	bf00      	nop

080010d8 <__aeabi_fcmple>:
 80010d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010dc:	f7ff ffe0 	bl	80010a0 <__aeabi_cfcmpeq>
 80010e0:	bf94      	ite	ls
 80010e2:	2001      	movls	r0, #1
 80010e4:	2000      	movhi	r0, #0
 80010e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ea:	bf00      	nop

080010ec <__aeabi_fcmpge>:
 80010ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f0:	f7ff ffd2 	bl	8001098 <__aeabi_cfrcmple>
 80010f4:	bf94      	ite	ls
 80010f6:	2001      	movls	r0, #1
 80010f8:	2000      	movhi	r0, #0
 80010fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fe:	bf00      	nop

08001100 <__aeabi_fcmpgt>:
 8001100:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001104:	f7ff ffc8 	bl	8001098 <__aeabi_cfrcmple>
 8001108:	bf34      	ite	cc
 800110a:	2001      	movcc	r0, #1
 800110c:	2000      	movcs	r0, #0
 800110e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001112:	bf00      	nop

08001114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001118:	4a08      	ldr	r2, [pc, #32]	; (800113c <HAL_Init+0x28>)
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <HAL_Init+0x28>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f043 0310 	orr.w	r3, r3, #16
 8001122:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001124:	2003      	movs	r0, #3
 8001126:	f000 fdc7 	bl	8001cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112a:	2000      	movs	r0, #0
 800112c:	f000 f808 	bl	8001140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001130:	f004 ff46 	bl	8005fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40022000 	.word	0x40022000

08001140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_InitTick+0x30>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a09      	ldr	r2, [pc, #36]	; (8001174 <HAL_InitTick+0x34>)
 800114e:	fba2 2303 	umull	r2, r3, r2, r3
 8001152:	099b      	lsrs	r3, r3, #6
 8001154:	4618      	mov	r0, r3
 8001156:	f000 fde4 	bl	8001d22 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800115a:	2200      	movs	r2, #0
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001162:	f000 fdb4 	bl	8001cce <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000200 	.word	0x20000200
 8001174:	10624dd3 	.word	0x10624dd3

08001178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick++;
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <HAL_IncTick+0x18>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	4a03      	ldr	r2, [pc, #12]	; (8001190 <HAL_IncTick+0x18>)
 8001184:	6013      	str	r3, [r2, #0]
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	200002a8 	.word	0x200002a8

08001194 <HAL_GetTick>:
  * @note  This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return uwTick;
 8001198:	4b02      	ldr	r3, [pc, #8]	; (80011a4 <HAL_GetTick+0x10>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	200002a8 	.word	0x200002a8

080011a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b0:	f7ff fff0 	bl	8001194 <HAL_GetTick>
 80011b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011c0:	d002      	beq.n	80011c8 <HAL_Delay+0x20>
  {
     wait++;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	3301      	adds	r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011c8:	bf00      	nop
 80011ca:	f7ff ffe3 	bl	8001194 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	1ad2      	subs	r2, r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d3f7      	bcc.n	80011ca <HAL_Delay+0x22>
  {
  }
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e0ce      	b.n	80013a4 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001210:	2b00      	cmp	r3, #0
 8001212:	d109      	bne.n	8001228 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f004 ff1c 	bl	8006060 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 fbd5 	bl	80019d8 <ADC_ConversionStop_Disable>
 800122e:	4603      	mov	r3, r0
 8001230:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001236:	f003 0310 	and.w	r3, r3, #16
 800123a:	2b00      	cmp	r3, #0
 800123c:	f040 80a9 	bne.w	8001392 <HAL_ADC_Init+0x1ae>
 8001240:	7dfb      	ldrb	r3, [r7, #23]
 8001242:	2b00      	cmp	r3, #0
 8001244:	f040 80a5 	bne.w	8001392 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001250:	f023 0302 	bic.w	r3, r3, #2
 8001254:	f043 0202 	orr.w	r2, r3, #2
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4951      	ldr	r1, [pc, #324]	; (80013ac <HAL_ADC_Init+0x1c8>)
 8001266:	428b      	cmp	r3, r1
 8001268:	d10a      	bne.n	8001280 <HAL_ADC_Init+0x9c>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001272:	d002      	beq.n	800127a <HAL_ADC_Init+0x96>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	e004      	b.n	8001284 <HAL_ADC_Init+0xa0>
 800127a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800127e:	e001      	b.n	8001284 <HAL_ADC_Init+0xa0>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001284:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800128c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	4313      	orrs	r3, r2
 8001292:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800129c:	d003      	beq.n	80012a6 <HAL_ADC_Init+0xc2>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d102      	bne.n	80012ac <HAL_ADC_Init+0xc8>
 80012a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012aa:	e000      	b.n	80012ae <HAL_ADC_Init+0xca>
 80012ac:	2300      	movs	r3, #0
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d119      	bne.n	80012f0 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d109      	bne.n	80012d8 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	035a      	lsls	r2, r3, #13
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	e00b      	b.n	80012f0 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012dc:	f043 0220 	orr.w	r2, r3, #32
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	f043 0201 	orr.w	r2, r3, #1
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	6812      	ldr	r2, [r2, #0]
 80012f8:	6852      	ldr	r2, [r2, #4]
 80012fa:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	430a      	orrs	r2, r1
 8001302:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6899      	ldr	r1, [r3, #8]
 800130e:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <HAL_ADC_Init+0x1cc>)
 8001310:	400b      	ands	r3, r1
 8001312:	68b9      	ldr	r1, [r7, #8]
 8001314:	430b      	orrs	r3, r1
 8001316:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001320:	d003      	beq.n	800132a <HAL_ADC_Init+0x146>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d104      	bne.n	8001334 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	3b01      	subs	r3, #1
 8001330:	051b      	lsls	r3, r3, #20
 8001332:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800133e:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	430a      	orrs	r2, r1
 8001346:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_ADC_Init+0x1d0>)
 8001350:	4013      	ands	r3, r2
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	4293      	cmp	r3, r2
 8001356:	d10b      	bne.n	8001370 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001362:	f023 0303 	bic.w	r3, r3, #3
 8001366:	f043 0201 	orr.w	r2, r3, #1
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800136e:	e018      	b.n	80013a2 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001374:	f023 0312 	bic.w	r3, r3, #18
 8001378:	f043 0210 	orr.w	r2, r3, #16
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001384:	f043 0201 	orr.w	r2, r3, #1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001390:	e007      	b.n	80013a2 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001396:	f043 0210 	orr.w	r2, r3, #16
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40013c00 	.word	0x40013c00
 80013b0:	ffe1f7fd 	.word	0xffe1f7fd
 80013b4:	ff1f0efe 	.word	0xff1f0efe

080013b8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a64      	ldr	r2, [pc, #400]	; (8001560 <HAL_ADC_Start_DMA+0x1a8>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d004      	beq.n	80013dc <HAL_ADC_Start_DMA+0x24>
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a63      	ldr	r2, [pc, #396]	; (8001564 <HAL_ADC_Start_DMA+0x1ac>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d106      	bne.n	80013ea <HAL_ADC_Start_DMA+0x32>
 80013dc:	4b60      	ldr	r3, [pc, #384]	; (8001560 <HAL_ADC_Start_DMA+0x1a8>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f040 80b3 	bne.w	8001550 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d101      	bne.n	80013f8 <HAL_ADC_Start_DMA+0x40>
 80013f4:	2302      	movs	r3, #2
 80013f6:	e0ae      	b.n	8001556 <HAL_ADC_Start_DMA+0x19e>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f000 fa97 	bl	8001934 <ADC_Enable>
 8001406:	4603      	mov	r3, r0
 8001408:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800140a:	7dfb      	ldrb	r3, [r7, #23]
 800140c:	2b00      	cmp	r3, #0
 800140e:	f040 809a 	bne.w	8001546 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001416:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800141a:	f023 0301 	bic.w	r3, r3, #1
 800141e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a4e      	ldr	r2, [pc, #312]	; (8001564 <HAL_ADC_Start_DMA+0x1ac>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d105      	bne.n	800143c <HAL_ADC_Start_DMA+0x84>
 8001430:	4b4b      	ldr	r3, [pc, #300]	; (8001560 <HAL_ADC_Start_DMA+0x1a8>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d115      	bne.n	8001468 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001440:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001452:	2b00      	cmp	r3, #0
 8001454:	d026      	beq.n	80014a4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800145e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001466:	e01d      	b.n	80014a4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a39      	ldr	r2, [pc, #228]	; (8001560 <HAL_ADC_Start_DMA+0x1a8>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d004      	beq.n	8001488 <HAL_ADC_Start_DMA+0xd0>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a38      	ldr	r2, [pc, #224]	; (8001564 <HAL_ADC_Start_DMA+0x1ac>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d10d      	bne.n	80014a4 <HAL_ADC_Start_DMA+0xec>
 8001488:	4b35      	ldr	r3, [pc, #212]	; (8001560 <HAL_ADC_Start_DMA+0x1a8>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001490:	2b00      	cmp	r3, #0
 8001492:	d007      	beq.n	80014a4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001498:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800149c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d006      	beq.n	80014be <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b4:	f023 0206 	bic.w	r2, r3, #6
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80014bc:	e002      	b.n	80014c4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	4a25      	ldr	r2, [pc, #148]	; (8001568 <HAL_ADC_Start_DMA+0x1b0>)
 80014d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	4a24      	ldr	r2, [pc, #144]	; (800156c <HAL_ADC_Start_DMA+0x1b4>)
 80014da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	4a23      	ldr	r2, [pc, #140]	; (8001570 <HAL_ADC_Start_DMA+0x1b8>)
 80014e2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f06f 0202 	mvn.w	r2, #2
 80014ec:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	6812      	ldr	r2, [r2, #0]
 80014f6:	6892      	ldr	r2, [r2, #8]
 80014f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014fc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6a18      	ldr	r0, [r3, #32]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	334c      	adds	r3, #76	; 0x4c
 8001508:	4619      	mov	r1, r3
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f000 fcbf 	bl	8001e90 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800151c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001520:	d108      	bne.n	8001534 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	6892      	ldr	r2, [r2, #8]
 800152c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001530:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001532:	e00f      	b.n	8001554 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	6892      	ldr	r2, [r2, #8]
 800153e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001542:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001544:	e006      	b.n	8001554 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800154e:	e001      	b.n	8001554 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001554:	7dfb      	ldrb	r3, [r7, #23]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40012400 	.word	0x40012400
 8001564:	40012800 	.word	0x40012800
 8001568:	08001a4d 	.word	0x08001a4d
 800156c:	08001ac9 	.word	0x08001ac9
 8001570:	08001ae5 	.word	0x08001ae5

08001574 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0320 	and.w	r3, r3, #32
 8001586:	2b20      	cmp	r3, #32
 8001588:	d140      	bne.n	800160c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b02      	cmp	r3, #2
 8001596:	d139      	bne.n	800160c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159c:	f003 0310 	and.w	r3, r3, #16
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d105      	bne.n	80015b0 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015ba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015be:	d11d      	bne.n	80015fc <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d119      	bne.n	80015fc <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	6852      	ldr	r2, [r2, #4]
 80015d2:	f022 0220 	bic.w	r2, r2, #32
 80015d6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d105      	bne.n	80015fc <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f4:	f043 0201 	orr.w	r2, r3, #1
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
      HAL_ADC_ConvCpltCallback(hadc);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f87c 	bl	80016fa <HAL_ADC_ConvCpltCallback>
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f06f 0212 	mvn.w	r2, #18
 800160a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001616:	2b80      	cmp	r3, #128	; 0x80
 8001618:	d14f      	bne.n	80016ba <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b04      	cmp	r3, #4
 8001626:	d148      	bne.n	80016ba <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162c:	f003 0310 	and.w	r3, r3, #16
 8001630:	2b00      	cmp	r3, #0
 8001632:	d105      	bne.n	8001640 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001638:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800164a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800164e:	d012      	beq.n	8001676 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800165a:	2b00      	cmp	r3, #0
 800165c:	d125      	bne.n	80016aa <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001668:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800166c:	d11d      	bne.n	80016aa <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001672:	2b00      	cmp	r3, #0
 8001674:	d119      	bne.n	80016aa <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	6852      	ldr	r2, [r2, #4]
 8001680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001684:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169a:	2b00      	cmp	r3, #0
 800169c:	d105      	bne.n	80016aa <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a2:	f043 0201 	orr.w	r2, r3, #1
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 fa34 	bl	8001b18 <HAL_ADCEx_InjectedConvCpltCallback>
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f06f 020c 	mvn.w	r2, #12
 80016b8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016c4:	2b40      	cmp	r3, #64	; 0x40
 80016c6:	d114      	bne.n	80016f2 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d10d      	bne.n	80016f2 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f81b 	bl	800171e <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f06f 0201 	mvn.w	r2, #1
 80016f0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
	...

08001744 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001744:	b490      	push	{r4, r7}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800175c:	2b01      	cmp	r3, #1
 800175e:	d101      	bne.n	8001764 <HAL_ADC_ConfigChannel+0x20>
 8001760:	2302      	movs	r3, #2
 8001762:	e0dc      	b.n	800191e <HAL_ADC_ConfigChannel+0x1da>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b06      	cmp	r3, #6
 8001772:	d81c      	bhi.n	80017ae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6819      	ldr	r1, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	3b05      	subs	r3, #5
 800178a:	221f      	movs	r2, #31
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	4018      	ands	r0, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681c      	ldr	r4, [r3, #0]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	3b05      	subs	r3, #5
 80017a4:	fa04 f303 	lsl.w	r3, r4, r3
 80017a8:	4303      	orrs	r3, r0
 80017aa:	634b      	str	r3, [r1, #52]	; 0x34
 80017ac:	e03c      	b.n	8001828 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b0c      	cmp	r3, #12
 80017b4:	d81c      	bhi.n	80017f0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6819      	ldr	r1, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	3b23      	subs	r3, #35	; 0x23
 80017cc:	221f      	movs	r2, #31
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	4018      	ands	r0, r3
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681c      	ldr	r4, [r3, #0]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	3b23      	subs	r3, #35	; 0x23
 80017e6:	fa04 f303 	lsl.w	r3, r4, r3
 80017ea:	4303      	orrs	r3, r0
 80017ec:	630b      	str	r3, [r1, #48]	; 0x30
 80017ee:	e01b      	b.n	8001828 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6819      	ldr	r1, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	3b41      	subs	r3, #65	; 0x41
 8001806:	221f      	movs	r2, #31
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	4018      	ands	r0, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681c      	ldr	r4, [r3, #0]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	3b41      	subs	r3, #65	; 0x41
 8001820:	fa04 f303 	lsl.w	r3, r4, r3
 8001824:	4303      	orrs	r3, r0
 8001826:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b09      	cmp	r3, #9
 800182e:	d91c      	bls.n	800186a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6819      	ldr	r1, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68d8      	ldr	r0, [r3, #12]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	3b1e      	subs	r3, #30
 8001846:	2207      	movs	r2, #7
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	4018      	ands	r0, r3
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	689c      	ldr	r4, [r3, #8]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	3b1e      	subs	r3, #30
 8001860:	fa04 f303 	lsl.w	r3, r4, r3
 8001864:	4303      	orrs	r3, r0
 8001866:	60cb      	str	r3, [r1, #12]
 8001868:	e019      	b.n	800189e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6819      	ldr	r1, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6918      	ldr	r0, [r3, #16]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4613      	mov	r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	2207      	movs	r2, #7
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	4018      	ands	r0, r3
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	689c      	ldr	r4, [r3, #8]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	fa04 f303 	lsl.w	r3, r4, r3
 800189a:	4303      	orrs	r3, r0
 800189c:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b10      	cmp	r3, #16
 80018a4:	d003      	beq.n	80018ae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018aa:	2b11      	cmp	r3, #17
 80018ac:	d132      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a1d      	ldr	r2, [pc, #116]	; (8001928 <HAL_ADC_ConfigChannel+0x1e4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d125      	bne.n	8001904 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d126      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	6892      	ldr	r2, [r2, #8]
 80018d0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80018d4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b10      	cmp	r3, #16
 80018dc:	d11a      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <HAL_ADC_ConfigChannel+0x1e8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a13      	ldr	r2, [pc, #76]	; (8001930 <HAL_ADC_ConfigChannel+0x1ec>)
 80018e4:	fba2 2303 	umull	r2, r3, r2, r3
 80018e8:	0c9a      	lsrs	r2, r3, #18
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018f4:	e002      	b.n	80018fc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	3b01      	subs	r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f9      	bne.n	80018f6 <HAL_ADC_ConfigChannel+0x1b2>
 8001902:	e007      	b.n	8001914 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001908:	f043 0220 	orr.w	r2, r3, #32
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800191c:	7bfb      	ldrb	r3, [r7, #15]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bc90      	pop	{r4, r7}
 8001926:	4770      	bx	lr
 8001928:	40012400 	.word	0x40012400
 800192c:	20000200 	.word	0x20000200
 8001930:	431bde83 	.word	0x431bde83

08001934 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b01      	cmp	r3, #1
 8001950:	d039      	beq.n	80019c6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6812      	ldr	r2, [r2, #0]
 800195a:	6892      	ldr	r2, [r2, #8]
 800195c:	f042 0201 	orr.w	r2, r2, #1
 8001960:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001962:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <ADC_Enable+0x9c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a1b      	ldr	r2, [pc, #108]	; (80019d4 <ADC_Enable+0xa0>)
 8001968:	fba2 2303 	umull	r2, r3, r2, r3
 800196c:	0c9b      	lsrs	r3, r3, #18
 800196e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001970:	e002      	b.n	8001978 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	3b01      	subs	r3, #1
 8001976:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f9      	bne.n	8001972 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800197e:	f7ff fc09 	bl	8001194 <HAL_GetTick>
 8001982:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001984:	e018      	b.n	80019b8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001986:	f7ff fc05 	bl	8001194 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d911      	bls.n	80019b8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001998:	f043 0210 	orr.w	r2, r3, #16
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a4:	f043 0201 	orr.w	r2, r3, #1
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e007      	b.n	80019c8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d1df      	bne.n	8001986 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000200 	.word	0x20000200
 80019d4:	431bde83 	.word	0x431bde83

080019d8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d127      	bne.n	8001a42 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	6812      	ldr	r2, [r2, #0]
 80019fa:	6892      	ldr	r2, [r2, #8]
 80019fc:	f022 0201 	bic.w	r2, r2, #1
 8001a00:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a02:	f7ff fbc7 	bl	8001194 <HAL_GetTick>
 8001a06:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a08:	e014      	b.n	8001a34 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a0a:	f7ff fbc3 	bl	8001194 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d90d      	bls.n	8001a34 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1c:	f043 0210 	orr.w	r2, r3, #16
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	f043 0201 	orr.w	r2, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e007      	b.n	8001a44 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d0e3      	beq.n	8001a0a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d127      	bne.n	8001ab6 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a7c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a80:	d115      	bne.n	8001aae <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	68db      	ldr	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d111      	bne.n	8001aae <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d105      	bne.n	8001aae <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa6:	f043 0201 	orr.w	r2, r3, #1
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f7ff fe23 	bl	80016fa <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001ab4:	e004      	b.n	8001ac0 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	4798      	blx	r3
}
 8001ac0:	bf00      	nop
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f7ff fe18 	bl	800170c <HAL_ADC_ConvHalfCpltCallback>
}
 8001adc:	bf00      	nop
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b02:	f043 0204 	orr.w	r2, r3, #4
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f7ff fe10 	bl	8001730 <HAL_ADC_ErrorCallback>
}
 8001b10:	bf00      	nop
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
	...

08001b2c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <NVIC_SetPriorityGrouping+0x44>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5e:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <NVIC_SetPriorityGrouping+0x44>)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	60d3      	str	r3, [r2, #12]
}
 8001b64:	bf00      	nop
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <NVIC_GetPriorityGrouping+0x18>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	f003 0307 	and.w	r3, r3, #7
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001b9a:	4908      	ldr	r1, [pc, #32]	; (8001bbc <NVIC_EnableIRQ+0x2c>)
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	095b      	lsrs	r3, r3, #5
 8001ba2:	79fa      	ldrb	r2, [r7, #7]
 8001ba4:	f002 021f 	and.w	r2, r2, #31
 8001ba8:	2001      	movs	r0, #1
 8001baa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	e000e100 	.word	0xe000e100

08001bc0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	6039      	str	r1, [r7, #0]
 8001bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	da0b      	bge.n	8001bec <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd4:	490d      	ldr	r1, [pc, #52]	; (8001c0c <NVIC_SetPriority+0x4c>)
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	f003 030f 	and.w	r3, r3, #15
 8001bdc:	3b04      	subs	r3, #4
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	440b      	add	r3, r1
 8001be8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bea:	e009      	b.n	8001c00 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bec:	4908      	ldr	r1, [pc, #32]	; (8001c10 <NVIC_SetPriority+0x50>)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	0112      	lsls	r2, r2, #4
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00
 8001c10:	e000e100 	.word	0xe000e100

08001c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	; 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f1c3 0307 	rsb	r3, r3, #7
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	bf28      	it	cs
 8001c32:	2304      	movcs	r3, #4
 8001c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	2b06      	cmp	r3, #6
 8001c3c:	d902      	bls.n	8001c44 <NVIC_EncodePriority+0x30>
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3b03      	subs	r3, #3
 8001c42:	e000      	b.n	8001c46 <NVIC_EncodePriority+0x32>
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	2201      	movs	r2, #1
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	1e5a      	subs	r2, r3, #1
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	401a      	ands	r2, r3
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c62:	1e59      	subs	r1, r3, #1
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	4313      	orrs	r3, r2
         );
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3724      	adds	r7, #36	; 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c84:	d301      	bcc.n	8001c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00f      	b.n	8001caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <SysTick_Config+0x40>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c92:	210f      	movs	r1, #15
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c98:	f7ff ff92 	bl	8001bc0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <SysTick_Config+0x40>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca2:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <SysTick_Config+0x40>)
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	e000e010 	.word	0xe000e010

08001cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ff33 	bl	8001b2c <NVIC_SetPriorityGrouping>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce0:	f7ff ff48 	bl	8001b74 <NVIC_GetPriorityGrouping>
 8001ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	6978      	ldr	r0, [r7, #20]
 8001cec:	f7ff ff92 	bl	8001c14 <NVIC_EncodePriority>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff61 	bl	8001bc0 <NVIC_SetPriority>
}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff3b 	bl	8001b90 <NVIC_EnableIRQ>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ffa2 	bl	8001c74 <SysTick_Config>
 8001d30:	4603      	mov	r3, r0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d106      	bne.n	8001d58 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001d4a:	4a09      	ldr	r2, [pc, #36]	; (8001d70 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f043 0304 	orr.w	r3, r3, #4
 8001d54:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001d56:	e005      	b.n	8001d64 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001d58:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 0304 	bic.w	r3, r3, #4
 8001d62:	6013      	str	r3, [r2, #0]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000e010 	.word	0xe000e010

08001d74 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001d78:	f000 f802 	bl	8001d80 <HAL_SYSTICK_Callback>
}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr

08001d8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e065      	b.n	8001e6e <HAL_DMA_Init+0xe2>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	4b33      	ldr	r3, [pc, #204]	; (8001e78 <HAL_DMA_Init+0xec>)
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d80f      	bhi.n	8001dce <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	4b31      	ldr	r3, [pc, #196]	; (8001e7c <HAL_DMA_Init+0xf0>)
 8001db6:	4413      	add	r3, r2
 8001db8:	4a31      	ldr	r2, [pc, #196]	; (8001e80 <HAL_DMA_Init+0xf4>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	091b      	lsrs	r3, r3, #4
 8001dc0:	009a      	lsls	r2, r3, #2
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a2e      	ldr	r2, [pc, #184]	; (8001e84 <HAL_DMA_Init+0xf8>)
 8001dca:	63da      	str	r2, [r3, #60]	; 0x3c
 8001dcc:	e00e      	b.n	8001dec <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4b2c      	ldr	r3, [pc, #176]	; (8001e88 <HAL_DMA_Init+0xfc>)
 8001dd6:	4413      	add	r3, r2
 8001dd8:	4a29      	ldr	r2, [pc, #164]	; (8001e80 <HAL_DMA_Init+0xf4>)
 8001dda:	fba2 2303 	umull	r2, r3, r2, r3
 8001dde:	091b      	lsrs	r3, r3, #4
 8001de0:	009a      	lsls	r2, r3, #2
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a28      	ldr	r2, [pc, #160]	; (8001e8c <HAL_DMA_Init+0x100>)
 8001dea:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e02:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001e06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	601a      	str	r2, [r3, #0]


  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	40020407 	.word	0x40020407
 8001e7c:	bffdfff8 	.word	0xbffdfff8
 8001e80:	cccccccd 	.word	0xcccccccd
 8001e84:	40020000 	.word	0x40020000
 8001e88:	bffdfbf8 	.word	0xbffdfbf8
 8001e8c:	40020400 	.word	0x40020400

08001e90 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
 8001e9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_DMA_Start_IT+0x20>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e04a      	b.n	8001f46 <HAL_DMA_Start_IT+0xb6>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d13a      	bne.n	8001f38 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	6812      	ldr	r2, [r2, #0]
 8001eda:	f022 0201 	bic.w	r2, r2, #1
 8001ede:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 fbb8 	bl	800265c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d008      	beq.n	8001f06 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	f042 020e 	orr.w	r2, r2, #14
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	e00f      	b.n	8001f26 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	6812      	ldr	r2, [r2, #0]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	f022 0204 	bic.w	r2, r2, #4
 8001f14:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	f042 020a 	orr.w	r2, r2, #10
 8001f24:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	f042 0201 	orr.w	r2, r2, #1
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	e005      	b.n	8001f44 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f40:	2302      	movs	r3, #2
 8001f42:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d005      	beq.n	8001f72 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2204      	movs	r2, #4
 8001f6a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
 8001f70:	e0ec      	b.n	800214c <HAL_DMA_Abort_IT+0x1fc>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6812      	ldr	r2, [r2, #0]
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	f022 020e 	bic.w	r2, r2, #14
 8001f80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	f022 0201 	bic.w	r2, r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	461a      	mov	r2, r3
 8001f98:	4b6f      	ldr	r3, [pc, #444]	; (8002158 <HAL_DMA_Abort_IT+0x208>)
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d963      	bls.n	8002066 <HAL_DMA_Abort_IT+0x116>
 8001f9e:	4a6f      	ldr	r2, [pc, #444]	; (800215c <HAL_DMA_Abort_IT+0x20c>)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4b6e      	ldr	r3, [pc, #440]	; (8002160 <HAL_DMA_Abort_IT+0x210>)
 8001fa8:	4299      	cmp	r1, r3
 8001faa:	d059      	beq.n	8002060 <HAL_DMA_Abort_IT+0x110>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4b6c      	ldr	r3, [pc, #432]	; (8002164 <HAL_DMA_Abort_IT+0x214>)
 8001fb4:	4299      	cmp	r1, r3
 8001fb6:	d051      	beq.n	800205c <HAL_DMA_Abort_IT+0x10c>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4b6a      	ldr	r3, [pc, #424]	; (8002168 <HAL_DMA_Abort_IT+0x218>)
 8001fc0:	4299      	cmp	r1, r3
 8001fc2:	d048      	beq.n	8002056 <HAL_DMA_Abort_IT+0x106>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4b68      	ldr	r3, [pc, #416]	; (800216c <HAL_DMA_Abort_IT+0x21c>)
 8001fcc:	4299      	cmp	r1, r3
 8001fce:	d03f      	beq.n	8002050 <HAL_DMA_Abort_IT+0x100>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4b66      	ldr	r3, [pc, #408]	; (8002170 <HAL_DMA_Abort_IT+0x220>)
 8001fd8:	4299      	cmp	r1, r3
 8001fda:	d036      	beq.n	800204a <HAL_DMA_Abort_IT+0xfa>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4b64      	ldr	r3, [pc, #400]	; (8002174 <HAL_DMA_Abort_IT+0x224>)
 8001fe4:	4299      	cmp	r1, r3
 8001fe6:	d02d      	beq.n	8002044 <HAL_DMA_Abort_IT+0xf4>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4619      	mov	r1, r3
 8001fee:	4b5a      	ldr	r3, [pc, #360]	; (8002158 <HAL_DMA_Abort_IT+0x208>)
 8001ff0:	4299      	cmp	r1, r3
 8001ff2:	d024      	beq.n	800203e <HAL_DMA_Abort_IT+0xee>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4b5f      	ldr	r3, [pc, #380]	; (8002178 <HAL_DMA_Abort_IT+0x228>)
 8001ffc:	4299      	cmp	r1, r3
 8001ffe:	d01c      	beq.n	800203a <HAL_DMA_Abort_IT+0xea>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4619      	mov	r1, r3
 8002006:	4b5d      	ldr	r3, [pc, #372]	; (800217c <HAL_DMA_Abort_IT+0x22c>)
 8002008:	4299      	cmp	r1, r3
 800200a:	d014      	beq.n	8002036 <HAL_DMA_Abort_IT+0xe6>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4619      	mov	r1, r3
 8002012:	4b5b      	ldr	r3, [pc, #364]	; (8002180 <HAL_DMA_Abort_IT+0x230>)
 8002014:	4299      	cmp	r1, r3
 8002016:	d00b      	beq.n	8002030 <HAL_DMA_Abort_IT+0xe0>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4619      	mov	r1, r3
 800201e:	4b59      	ldr	r3, [pc, #356]	; (8002184 <HAL_DMA_Abort_IT+0x234>)
 8002020:	4299      	cmp	r1, r3
 8002022:	d102      	bne.n	800202a <HAL_DMA_Abort_IT+0xda>
 8002024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002028:	e01b      	b.n	8002062 <HAL_DMA_Abort_IT+0x112>
 800202a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800202e:	e018      	b.n	8002062 <HAL_DMA_Abort_IT+0x112>
 8002030:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002034:	e015      	b.n	8002062 <HAL_DMA_Abort_IT+0x112>
 8002036:	2310      	movs	r3, #16
 8002038:	e013      	b.n	8002062 <HAL_DMA_Abort_IT+0x112>
 800203a:	2301      	movs	r3, #1
 800203c:	e011      	b.n	8002062 <HAL_DMA_Abort_IT+0x112>
 800203e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002042:	e00e      	b.n	8002062 <HAL_DMA_Abort_IT+0x112>
 8002044:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002048:	e00b      	b.n	8002062 <HAL_DMA_Abort_IT+0x112>
 800204a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800204e:	e008      	b.n	8002062 <HAL_DMA_Abort_IT+0x112>
 8002050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002054:	e005      	b.n	8002062 <HAL_DMA_Abort_IT+0x112>
 8002056:	f44f 7380 	mov.w	r3, #256	; 0x100
 800205a:	e002      	b.n	8002062 <HAL_DMA_Abort_IT+0x112>
 800205c:	2310      	movs	r3, #16
 800205e:	e000      	b.n	8002062 <HAL_DMA_Abort_IT+0x112>
 8002060:	2301      	movs	r3, #1
 8002062:	6053      	str	r3, [r2, #4]
 8002064:	e062      	b.n	800212c <HAL_DMA_Abort_IT+0x1dc>
 8002066:	4a48      	ldr	r2, [pc, #288]	; (8002188 <HAL_DMA_Abort_IT+0x238>)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4619      	mov	r1, r3
 800206e:	4b3c      	ldr	r3, [pc, #240]	; (8002160 <HAL_DMA_Abort_IT+0x210>)
 8002070:	4299      	cmp	r1, r3
 8002072:	d059      	beq.n	8002128 <HAL_DMA_Abort_IT+0x1d8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4619      	mov	r1, r3
 800207a:	4b3a      	ldr	r3, [pc, #232]	; (8002164 <HAL_DMA_Abort_IT+0x214>)
 800207c:	4299      	cmp	r1, r3
 800207e:	d051      	beq.n	8002124 <HAL_DMA_Abort_IT+0x1d4>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4619      	mov	r1, r3
 8002086:	4b38      	ldr	r3, [pc, #224]	; (8002168 <HAL_DMA_Abort_IT+0x218>)
 8002088:	4299      	cmp	r1, r3
 800208a:	d048      	beq.n	800211e <HAL_DMA_Abort_IT+0x1ce>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4619      	mov	r1, r3
 8002092:	4b36      	ldr	r3, [pc, #216]	; (800216c <HAL_DMA_Abort_IT+0x21c>)
 8002094:	4299      	cmp	r1, r3
 8002096:	d03f      	beq.n	8002118 <HAL_DMA_Abort_IT+0x1c8>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4619      	mov	r1, r3
 800209e:	4b34      	ldr	r3, [pc, #208]	; (8002170 <HAL_DMA_Abort_IT+0x220>)
 80020a0:	4299      	cmp	r1, r3
 80020a2:	d036      	beq.n	8002112 <HAL_DMA_Abort_IT+0x1c2>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4619      	mov	r1, r3
 80020aa:	4b32      	ldr	r3, [pc, #200]	; (8002174 <HAL_DMA_Abort_IT+0x224>)
 80020ac:	4299      	cmp	r1, r3
 80020ae:	d02d      	beq.n	800210c <HAL_DMA_Abort_IT+0x1bc>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4619      	mov	r1, r3
 80020b6:	4b28      	ldr	r3, [pc, #160]	; (8002158 <HAL_DMA_Abort_IT+0x208>)
 80020b8:	4299      	cmp	r1, r3
 80020ba:	d024      	beq.n	8002106 <HAL_DMA_Abort_IT+0x1b6>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4619      	mov	r1, r3
 80020c2:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <HAL_DMA_Abort_IT+0x228>)
 80020c4:	4299      	cmp	r1, r3
 80020c6:	d01c      	beq.n	8002102 <HAL_DMA_Abort_IT+0x1b2>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4619      	mov	r1, r3
 80020ce:	4b2b      	ldr	r3, [pc, #172]	; (800217c <HAL_DMA_Abort_IT+0x22c>)
 80020d0:	4299      	cmp	r1, r3
 80020d2:	d014      	beq.n	80020fe <HAL_DMA_Abort_IT+0x1ae>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4619      	mov	r1, r3
 80020da:	4b29      	ldr	r3, [pc, #164]	; (8002180 <HAL_DMA_Abort_IT+0x230>)
 80020dc:	4299      	cmp	r1, r3
 80020de:	d00b      	beq.n	80020f8 <HAL_DMA_Abort_IT+0x1a8>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4619      	mov	r1, r3
 80020e6:	4b27      	ldr	r3, [pc, #156]	; (8002184 <HAL_DMA_Abort_IT+0x234>)
 80020e8:	4299      	cmp	r1, r3
 80020ea:	d102      	bne.n	80020f2 <HAL_DMA_Abort_IT+0x1a2>
 80020ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f0:	e01b      	b.n	800212a <HAL_DMA_Abort_IT+0x1da>
 80020f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020f6:	e018      	b.n	800212a <HAL_DMA_Abort_IT+0x1da>
 80020f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020fc:	e015      	b.n	800212a <HAL_DMA_Abort_IT+0x1da>
 80020fe:	2310      	movs	r3, #16
 8002100:	e013      	b.n	800212a <HAL_DMA_Abort_IT+0x1da>
 8002102:	2301      	movs	r3, #1
 8002104:	e011      	b.n	800212a <HAL_DMA_Abort_IT+0x1da>
 8002106:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800210a:	e00e      	b.n	800212a <HAL_DMA_Abort_IT+0x1da>
 800210c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002110:	e00b      	b.n	800212a <HAL_DMA_Abort_IT+0x1da>
 8002112:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002116:	e008      	b.n	800212a <HAL_DMA_Abort_IT+0x1da>
 8002118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800211c:	e005      	b.n	800212a <HAL_DMA_Abort_IT+0x1da>
 800211e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002122:	e002      	b.n	800212a <HAL_DMA_Abort_IT+0x1da>
 8002124:	2310      	movs	r3, #16
 8002126:	e000      	b.n	800212a <HAL_DMA_Abort_IT+0x1da>
 8002128:	2301      	movs	r3, #1
 800212a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_DMA_Abort_IT+0x1fc>
    {
      hdma->XferAbortCallback(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	4798      	blx	r3
    } 
  }
  return status;
 800214c:	7bfb      	ldrb	r3, [r7, #15]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40020080 	.word	0x40020080
 800215c:	40020400 	.word	0x40020400
 8002160:	40020008 	.word	0x40020008
 8002164:	4002001c 	.word	0x4002001c
 8002168:	40020030 	.word	0x40020030
 800216c:	40020044 	.word	0x40020044
 8002170:	40020058 	.word	0x40020058
 8002174:	4002006c 	.word	0x4002006c
 8002178:	40020408 	.word	0x40020408
 800217c:	4002041c 	.word	0x4002041c
 8002180:	40020430 	.word	0x40020430
 8002184:	40020444 	.word	0x40020444
 8002188:	40020000 	.word	0x40020000

0800218c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	2204      	movs	r2, #4
 80021aa:	409a      	lsls	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 8107 	beq.w	80023c4 <HAL_DMA_IRQHandler+0x238>
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 8101 	beq.w	80023c4 <HAL_DMA_IRQHandler+0x238>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0320 	and.w	r3, r3, #32
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d107      	bne.n	80021e0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	f022 0204 	bic.w	r2, r2, #4
 80021de:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b6a      	ldr	r3, [pc, #424]	; (8002390 <HAL_DMA_IRQHandler+0x204>)
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d963      	bls.n	80022b4 <HAL_DMA_IRQHandler+0x128>
 80021ec:	4a69      	ldr	r2, [pc, #420]	; (8002394 <HAL_DMA_IRQHandler+0x208>)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4619      	mov	r1, r3
 80021f4:	4b68      	ldr	r3, [pc, #416]	; (8002398 <HAL_DMA_IRQHandler+0x20c>)
 80021f6:	4299      	cmp	r1, r3
 80021f8:	d059      	beq.n	80022ae <HAL_DMA_IRQHandler+0x122>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4619      	mov	r1, r3
 8002200:	4b66      	ldr	r3, [pc, #408]	; (800239c <HAL_DMA_IRQHandler+0x210>)
 8002202:	4299      	cmp	r1, r3
 8002204:	d051      	beq.n	80022aa <HAL_DMA_IRQHandler+0x11e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4619      	mov	r1, r3
 800220c:	4b64      	ldr	r3, [pc, #400]	; (80023a0 <HAL_DMA_IRQHandler+0x214>)
 800220e:	4299      	cmp	r1, r3
 8002210:	d048      	beq.n	80022a4 <HAL_DMA_IRQHandler+0x118>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4619      	mov	r1, r3
 8002218:	4b62      	ldr	r3, [pc, #392]	; (80023a4 <HAL_DMA_IRQHandler+0x218>)
 800221a:	4299      	cmp	r1, r3
 800221c:	d03f      	beq.n	800229e <HAL_DMA_IRQHandler+0x112>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4619      	mov	r1, r3
 8002224:	4b60      	ldr	r3, [pc, #384]	; (80023a8 <HAL_DMA_IRQHandler+0x21c>)
 8002226:	4299      	cmp	r1, r3
 8002228:	d036      	beq.n	8002298 <HAL_DMA_IRQHandler+0x10c>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4619      	mov	r1, r3
 8002230:	4b5e      	ldr	r3, [pc, #376]	; (80023ac <HAL_DMA_IRQHandler+0x220>)
 8002232:	4299      	cmp	r1, r3
 8002234:	d02d      	beq.n	8002292 <HAL_DMA_IRQHandler+0x106>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4619      	mov	r1, r3
 800223c:	4b54      	ldr	r3, [pc, #336]	; (8002390 <HAL_DMA_IRQHandler+0x204>)
 800223e:	4299      	cmp	r1, r3
 8002240:	d024      	beq.n	800228c <HAL_DMA_IRQHandler+0x100>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4619      	mov	r1, r3
 8002248:	4b59      	ldr	r3, [pc, #356]	; (80023b0 <HAL_DMA_IRQHandler+0x224>)
 800224a:	4299      	cmp	r1, r3
 800224c:	d01c      	beq.n	8002288 <HAL_DMA_IRQHandler+0xfc>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4619      	mov	r1, r3
 8002254:	4b57      	ldr	r3, [pc, #348]	; (80023b4 <HAL_DMA_IRQHandler+0x228>)
 8002256:	4299      	cmp	r1, r3
 8002258:	d014      	beq.n	8002284 <HAL_DMA_IRQHandler+0xf8>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4619      	mov	r1, r3
 8002260:	4b55      	ldr	r3, [pc, #340]	; (80023b8 <HAL_DMA_IRQHandler+0x22c>)
 8002262:	4299      	cmp	r1, r3
 8002264:	d00b      	beq.n	800227e <HAL_DMA_IRQHandler+0xf2>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4619      	mov	r1, r3
 800226c:	4b53      	ldr	r3, [pc, #332]	; (80023bc <HAL_DMA_IRQHandler+0x230>)
 800226e:	4299      	cmp	r1, r3
 8002270:	d102      	bne.n	8002278 <HAL_DMA_IRQHandler+0xec>
 8002272:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002276:	e01b      	b.n	80022b0 <HAL_DMA_IRQHandler+0x124>
 8002278:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800227c:	e018      	b.n	80022b0 <HAL_DMA_IRQHandler+0x124>
 800227e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002282:	e015      	b.n	80022b0 <HAL_DMA_IRQHandler+0x124>
 8002284:	2340      	movs	r3, #64	; 0x40
 8002286:	e013      	b.n	80022b0 <HAL_DMA_IRQHandler+0x124>
 8002288:	2304      	movs	r3, #4
 800228a:	e011      	b.n	80022b0 <HAL_DMA_IRQHandler+0x124>
 800228c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002290:	e00e      	b.n	80022b0 <HAL_DMA_IRQHandler+0x124>
 8002292:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002296:	e00b      	b.n	80022b0 <HAL_DMA_IRQHandler+0x124>
 8002298:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800229c:	e008      	b.n	80022b0 <HAL_DMA_IRQHandler+0x124>
 800229e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022a2:	e005      	b.n	80022b0 <HAL_DMA_IRQHandler+0x124>
 80022a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022a8:	e002      	b.n	80022b0 <HAL_DMA_IRQHandler+0x124>
 80022aa:	2340      	movs	r3, #64	; 0x40
 80022ac:	e000      	b.n	80022b0 <HAL_DMA_IRQHandler+0x124>
 80022ae:	2304      	movs	r3, #4
 80022b0:	6053      	str	r3, [r2, #4]
 80022b2:	e062      	b.n	800237a <HAL_DMA_IRQHandler+0x1ee>
 80022b4:	4a42      	ldr	r2, [pc, #264]	; (80023c0 <HAL_DMA_IRQHandler+0x234>)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4619      	mov	r1, r3
 80022bc:	4b36      	ldr	r3, [pc, #216]	; (8002398 <HAL_DMA_IRQHandler+0x20c>)
 80022be:	4299      	cmp	r1, r3
 80022c0:	d059      	beq.n	8002376 <HAL_DMA_IRQHandler+0x1ea>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4619      	mov	r1, r3
 80022c8:	4b34      	ldr	r3, [pc, #208]	; (800239c <HAL_DMA_IRQHandler+0x210>)
 80022ca:	4299      	cmp	r1, r3
 80022cc:	d051      	beq.n	8002372 <HAL_DMA_IRQHandler+0x1e6>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4619      	mov	r1, r3
 80022d4:	4b32      	ldr	r3, [pc, #200]	; (80023a0 <HAL_DMA_IRQHandler+0x214>)
 80022d6:	4299      	cmp	r1, r3
 80022d8:	d048      	beq.n	800236c <HAL_DMA_IRQHandler+0x1e0>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4619      	mov	r1, r3
 80022e0:	4b30      	ldr	r3, [pc, #192]	; (80023a4 <HAL_DMA_IRQHandler+0x218>)
 80022e2:	4299      	cmp	r1, r3
 80022e4:	d03f      	beq.n	8002366 <HAL_DMA_IRQHandler+0x1da>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4619      	mov	r1, r3
 80022ec:	4b2e      	ldr	r3, [pc, #184]	; (80023a8 <HAL_DMA_IRQHandler+0x21c>)
 80022ee:	4299      	cmp	r1, r3
 80022f0:	d036      	beq.n	8002360 <HAL_DMA_IRQHandler+0x1d4>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4619      	mov	r1, r3
 80022f8:	4b2c      	ldr	r3, [pc, #176]	; (80023ac <HAL_DMA_IRQHandler+0x220>)
 80022fa:	4299      	cmp	r1, r3
 80022fc:	d02d      	beq.n	800235a <HAL_DMA_IRQHandler+0x1ce>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4619      	mov	r1, r3
 8002304:	4b22      	ldr	r3, [pc, #136]	; (8002390 <HAL_DMA_IRQHandler+0x204>)
 8002306:	4299      	cmp	r1, r3
 8002308:	d024      	beq.n	8002354 <HAL_DMA_IRQHandler+0x1c8>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4619      	mov	r1, r3
 8002310:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <HAL_DMA_IRQHandler+0x224>)
 8002312:	4299      	cmp	r1, r3
 8002314:	d01c      	beq.n	8002350 <HAL_DMA_IRQHandler+0x1c4>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4619      	mov	r1, r3
 800231c:	4b25      	ldr	r3, [pc, #148]	; (80023b4 <HAL_DMA_IRQHandler+0x228>)
 800231e:	4299      	cmp	r1, r3
 8002320:	d014      	beq.n	800234c <HAL_DMA_IRQHandler+0x1c0>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4619      	mov	r1, r3
 8002328:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <HAL_DMA_IRQHandler+0x22c>)
 800232a:	4299      	cmp	r1, r3
 800232c:	d00b      	beq.n	8002346 <HAL_DMA_IRQHandler+0x1ba>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4619      	mov	r1, r3
 8002334:	4b21      	ldr	r3, [pc, #132]	; (80023bc <HAL_DMA_IRQHandler+0x230>)
 8002336:	4299      	cmp	r1, r3
 8002338:	d102      	bne.n	8002340 <HAL_DMA_IRQHandler+0x1b4>
 800233a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800233e:	e01b      	b.n	8002378 <HAL_DMA_IRQHandler+0x1ec>
 8002340:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002344:	e018      	b.n	8002378 <HAL_DMA_IRQHandler+0x1ec>
 8002346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800234a:	e015      	b.n	8002378 <HAL_DMA_IRQHandler+0x1ec>
 800234c:	2340      	movs	r3, #64	; 0x40
 800234e:	e013      	b.n	8002378 <HAL_DMA_IRQHandler+0x1ec>
 8002350:	2304      	movs	r3, #4
 8002352:	e011      	b.n	8002378 <HAL_DMA_IRQHandler+0x1ec>
 8002354:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002358:	e00e      	b.n	8002378 <HAL_DMA_IRQHandler+0x1ec>
 800235a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800235e:	e00b      	b.n	8002378 <HAL_DMA_IRQHandler+0x1ec>
 8002360:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002364:	e008      	b.n	8002378 <HAL_DMA_IRQHandler+0x1ec>
 8002366:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800236a:	e005      	b.n	8002378 <HAL_DMA_IRQHandler+0x1ec>
 800236c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002370:	e002      	b.n	8002378 <HAL_DMA_IRQHandler+0x1ec>
 8002372:	2340      	movs	r3, #64	; 0x40
 8002374:	e000      	b.n	8002378 <HAL_DMA_IRQHandler+0x1ec>
 8002376:	2304      	movs	r3, #4
 8002378:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 814c 	beq.w	800261c <HAL_DMA_IRQHandler+0x490>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800238c:	e146      	b.n	800261c <HAL_DMA_IRQHandler+0x490>
 800238e:	bf00      	nop
 8002390:	40020080 	.word	0x40020080
 8002394:	40020400 	.word	0x40020400
 8002398:	40020008 	.word	0x40020008
 800239c:	4002001c 	.word	0x4002001c
 80023a0:	40020030 	.word	0x40020030
 80023a4:	40020044 	.word	0x40020044
 80023a8:	40020058 	.word	0x40020058
 80023ac:	4002006c 	.word	0x4002006c
 80023b0:	40020408 	.word	0x40020408
 80023b4:	4002041c 	.word	0x4002041c
 80023b8:	40020430 	.word	0x40020430
 80023bc:	40020444 	.word	0x40020444
 80023c0:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	2202      	movs	r2, #2
 80023ca:	409a      	lsls	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 80f3 	beq.w	80025bc <HAL_DMA_IRQHandler+0x430>
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 80ed 	beq.w	80025bc <HAL_DMA_IRQHandler+0x430>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0320 	and.w	r3, r3, #32
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10b      	bne.n	8002408 <HAL_DMA_IRQHandler+0x27c>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	6812      	ldr	r2, [r2, #0]
 80023fa:	f022 020a 	bic.w	r2, r2, #10
 80023fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	4b86      	ldr	r3, [pc, #536]	; (8002628 <HAL_DMA_IRQHandler+0x49c>)
 8002410:	429a      	cmp	r2, r3
 8002412:	d963      	bls.n	80024dc <HAL_DMA_IRQHandler+0x350>
 8002414:	4a85      	ldr	r2, [pc, #532]	; (800262c <HAL_DMA_IRQHandler+0x4a0>)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4619      	mov	r1, r3
 800241c:	4b84      	ldr	r3, [pc, #528]	; (8002630 <HAL_DMA_IRQHandler+0x4a4>)
 800241e:	4299      	cmp	r1, r3
 8002420:	d059      	beq.n	80024d6 <HAL_DMA_IRQHandler+0x34a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4619      	mov	r1, r3
 8002428:	4b82      	ldr	r3, [pc, #520]	; (8002634 <HAL_DMA_IRQHandler+0x4a8>)
 800242a:	4299      	cmp	r1, r3
 800242c:	d051      	beq.n	80024d2 <HAL_DMA_IRQHandler+0x346>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4619      	mov	r1, r3
 8002434:	4b80      	ldr	r3, [pc, #512]	; (8002638 <HAL_DMA_IRQHandler+0x4ac>)
 8002436:	4299      	cmp	r1, r3
 8002438:	d048      	beq.n	80024cc <HAL_DMA_IRQHandler+0x340>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4619      	mov	r1, r3
 8002440:	4b7e      	ldr	r3, [pc, #504]	; (800263c <HAL_DMA_IRQHandler+0x4b0>)
 8002442:	4299      	cmp	r1, r3
 8002444:	d03f      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x33a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4619      	mov	r1, r3
 800244c:	4b7c      	ldr	r3, [pc, #496]	; (8002640 <HAL_DMA_IRQHandler+0x4b4>)
 800244e:	4299      	cmp	r1, r3
 8002450:	d036      	beq.n	80024c0 <HAL_DMA_IRQHandler+0x334>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4619      	mov	r1, r3
 8002458:	4b7a      	ldr	r3, [pc, #488]	; (8002644 <HAL_DMA_IRQHandler+0x4b8>)
 800245a:	4299      	cmp	r1, r3
 800245c:	d02d      	beq.n	80024ba <HAL_DMA_IRQHandler+0x32e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4619      	mov	r1, r3
 8002464:	4b70      	ldr	r3, [pc, #448]	; (8002628 <HAL_DMA_IRQHandler+0x49c>)
 8002466:	4299      	cmp	r1, r3
 8002468:	d024      	beq.n	80024b4 <HAL_DMA_IRQHandler+0x328>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4619      	mov	r1, r3
 8002470:	4b75      	ldr	r3, [pc, #468]	; (8002648 <HAL_DMA_IRQHandler+0x4bc>)
 8002472:	4299      	cmp	r1, r3
 8002474:	d01c      	beq.n	80024b0 <HAL_DMA_IRQHandler+0x324>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4619      	mov	r1, r3
 800247c:	4b73      	ldr	r3, [pc, #460]	; (800264c <HAL_DMA_IRQHandler+0x4c0>)
 800247e:	4299      	cmp	r1, r3
 8002480:	d014      	beq.n	80024ac <HAL_DMA_IRQHandler+0x320>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4619      	mov	r1, r3
 8002488:	4b71      	ldr	r3, [pc, #452]	; (8002650 <HAL_DMA_IRQHandler+0x4c4>)
 800248a:	4299      	cmp	r1, r3
 800248c:	d00b      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x31a>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4619      	mov	r1, r3
 8002494:	4b6f      	ldr	r3, [pc, #444]	; (8002654 <HAL_DMA_IRQHandler+0x4c8>)
 8002496:	4299      	cmp	r1, r3
 8002498:	d102      	bne.n	80024a0 <HAL_DMA_IRQHandler+0x314>
 800249a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800249e:	e01b      	b.n	80024d8 <HAL_DMA_IRQHandler+0x34c>
 80024a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024a4:	e018      	b.n	80024d8 <HAL_DMA_IRQHandler+0x34c>
 80024a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024aa:	e015      	b.n	80024d8 <HAL_DMA_IRQHandler+0x34c>
 80024ac:	2320      	movs	r3, #32
 80024ae:	e013      	b.n	80024d8 <HAL_DMA_IRQHandler+0x34c>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e011      	b.n	80024d8 <HAL_DMA_IRQHandler+0x34c>
 80024b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024b8:	e00e      	b.n	80024d8 <HAL_DMA_IRQHandler+0x34c>
 80024ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80024be:	e00b      	b.n	80024d8 <HAL_DMA_IRQHandler+0x34c>
 80024c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024c4:	e008      	b.n	80024d8 <HAL_DMA_IRQHandler+0x34c>
 80024c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ca:	e005      	b.n	80024d8 <HAL_DMA_IRQHandler+0x34c>
 80024cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024d0:	e002      	b.n	80024d8 <HAL_DMA_IRQHandler+0x34c>
 80024d2:	2320      	movs	r3, #32
 80024d4:	e000      	b.n	80024d8 <HAL_DMA_IRQHandler+0x34c>
 80024d6:	2302      	movs	r3, #2
 80024d8:	6053      	str	r3, [r2, #4]
 80024da:	e062      	b.n	80025a2 <HAL_DMA_IRQHandler+0x416>
 80024dc:	4a5e      	ldr	r2, [pc, #376]	; (8002658 <HAL_DMA_IRQHandler+0x4cc>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4619      	mov	r1, r3
 80024e4:	4b52      	ldr	r3, [pc, #328]	; (8002630 <HAL_DMA_IRQHandler+0x4a4>)
 80024e6:	4299      	cmp	r1, r3
 80024e8:	d059      	beq.n	800259e <HAL_DMA_IRQHandler+0x412>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4619      	mov	r1, r3
 80024f0:	4b50      	ldr	r3, [pc, #320]	; (8002634 <HAL_DMA_IRQHandler+0x4a8>)
 80024f2:	4299      	cmp	r1, r3
 80024f4:	d051      	beq.n	800259a <HAL_DMA_IRQHandler+0x40e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4619      	mov	r1, r3
 80024fc:	4b4e      	ldr	r3, [pc, #312]	; (8002638 <HAL_DMA_IRQHandler+0x4ac>)
 80024fe:	4299      	cmp	r1, r3
 8002500:	d048      	beq.n	8002594 <HAL_DMA_IRQHandler+0x408>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4619      	mov	r1, r3
 8002508:	4b4c      	ldr	r3, [pc, #304]	; (800263c <HAL_DMA_IRQHandler+0x4b0>)
 800250a:	4299      	cmp	r1, r3
 800250c:	d03f      	beq.n	800258e <HAL_DMA_IRQHandler+0x402>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4619      	mov	r1, r3
 8002514:	4b4a      	ldr	r3, [pc, #296]	; (8002640 <HAL_DMA_IRQHandler+0x4b4>)
 8002516:	4299      	cmp	r1, r3
 8002518:	d036      	beq.n	8002588 <HAL_DMA_IRQHandler+0x3fc>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4619      	mov	r1, r3
 8002520:	4b48      	ldr	r3, [pc, #288]	; (8002644 <HAL_DMA_IRQHandler+0x4b8>)
 8002522:	4299      	cmp	r1, r3
 8002524:	d02d      	beq.n	8002582 <HAL_DMA_IRQHandler+0x3f6>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4619      	mov	r1, r3
 800252c:	4b3e      	ldr	r3, [pc, #248]	; (8002628 <HAL_DMA_IRQHandler+0x49c>)
 800252e:	4299      	cmp	r1, r3
 8002530:	d024      	beq.n	800257c <HAL_DMA_IRQHandler+0x3f0>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4619      	mov	r1, r3
 8002538:	4b43      	ldr	r3, [pc, #268]	; (8002648 <HAL_DMA_IRQHandler+0x4bc>)
 800253a:	4299      	cmp	r1, r3
 800253c:	d01c      	beq.n	8002578 <HAL_DMA_IRQHandler+0x3ec>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4619      	mov	r1, r3
 8002544:	4b41      	ldr	r3, [pc, #260]	; (800264c <HAL_DMA_IRQHandler+0x4c0>)
 8002546:	4299      	cmp	r1, r3
 8002548:	d014      	beq.n	8002574 <HAL_DMA_IRQHandler+0x3e8>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4619      	mov	r1, r3
 8002550:	4b3f      	ldr	r3, [pc, #252]	; (8002650 <HAL_DMA_IRQHandler+0x4c4>)
 8002552:	4299      	cmp	r1, r3
 8002554:	d00b      	beq.n	800256e <HAL_DMA_IRQHandler+0x3e2>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4619      	mov	r1, r3
 800255c:	4b3d      	ldr	r3, [pc, #244]	; (8002654 <HAL_DMA_IRQHandler+0x4c8>)
 800255e:	4299      	cmp	r1, r3
 8002560:	d102      	bne.n	8002568 <HAL_DMA_IRQHandler+0x3dc>
 8002562:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002566:	e01b      	b.n	80025a0 <HAL_DMA_IRQHandler+0x414>
 8002568:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800256c:	e018      	b.n	80025a0 <HAL_DMA_IRQHandler+0x414>
 800256e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002572:	e015      	b.n	80025a0 <HAL_DMA_IRQHandler+0x414>
 8002574:	2320      	movs	r3, #32
 8002576:	e013      	b.n	80025a0 <HAL_DMA_IRQHandler+0x414>
 8002578:	2302      	movs	r3, #2
 800257a:	e011      	b.n	80025a0 <HAL_DMA_IRQHandler+0x414>
 800257c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002580:	e00e      	b.n	80025a0 <HAL_DMA_IRQHandler+0x414>
 8002582:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002586:	e00b      	b.n	80025a0 <HAL_DMA_IRQHandler+0x414>
 8002588:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800258c:	e008      	b.n	80025a0 <HAL_DMA_IRQHandler+0x414>
 800258e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002592:	e005      	b.n	80025a0 <HAL_DMA_IRQHandler+0x414>
 8002594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002598:	e002      	b.n	80025a0 <HAL_DMA_IRQHandler+0x414>
 800259a:	2320      	movs	r3, #32
 800259c:	e000      	b.n	80025a0 <HAL_DMA_IRQHandler+0x414>
 800259e:	2302      	movs	r3, #2
 80025a0:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d034      	beq.n	800261c <HAL_DMA_IRQHandler+0x490>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80025ba:	e02f      	b.n	800261c <HAL_DMA_IRQHandler+0x490>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	2208      	movs	r2, #8
 80025c2:	409a      	lsls	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d028      	beq.n	800261e <HAL_DMA_IRQHandler+0x492>
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d023      	beq.n	800261e <HAL_DMA_IRQHandler+0x492>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	f022 020e 	bic.w	r2, r2, #14
 80025e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025ee:	2101      	movs	r1, #1
 80025f0:	fa01 f202 	lsl.w	r2, r1, r2
 80025f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	2b00      	cmp	r3, #0
 8002612:	d004      	beq.n	800261e <HAL_DMA_IRQHandler+0x492>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	4798      	blx	r3
    }
  }
  return;
 800261c:	bf00      	nop
 800261e:	bf00      	nop
}
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40020080 	.word	0x40020080
 800262c:	40020400 	.word	0x40020400
 8002630:	40020008 	.word	0x40020008
 8002634:	4002001c 	.word	0x4002001c
 8002638:	40020030 	.word	0x40020030
 800263c:	40020044 	.word	0x40020044
 8002640:	40020058 	.word	0x40020058
 8002644:	4002006c 	.word	0x4002006c
 8002648:	40020408 	.word	0x40020408
 800264c:	4002041c 	.word	0x4002041c
 8002650:	40020430 	.word	0x40020430
 8002654:	40020444 	.word	0x40020444
 8002658:	40020000 	.word	0x40020000

0800265c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002672:	2101      	movs	r1, #1
 8002674:	fa01 f202 	lsl.w	r2, r1, r2
 8002678:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b10      	cmp	r3, #16
 8002688:	d108      	bne.n	800269c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800269a:	e007      	b.n	80026ac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	60da      	str	r2, [r3, #12]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
	...

080026b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b08b      	sub	sp, #44	; 0x2c
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 80026d2:	2300      	movs	r3, #0
 80026d4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80026d6:	2300      	movs	r3, #0
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
 80026da:	e133      	b.n	8002944 <HAL_GPIO_Init+0x28c>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 80026dc:	2201      	movs	r2, #1
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	f040 8122 	bne.w	800293e <HAL_GPIO_Init+0x286>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b12      	cmp	r3, #18
 8002700:	d034      	beq.n	800276c <HAL_GPIO_Init+0xb4>
 8002702:	2b12      	cmp	r3, #18
 8002704:	d80d      	bhi.n	8002722 <HAL_GPIO_Init+0x6a>
 8002706:	2b02      	cmp	r3, #2
 8002708:	d02b      	beq.n	8002762 <HAL_GPIO_Init+0xaa>
 800270a:	2b02      	cmp	r3, #2
 800270c:	d804      	bhi.n	8002718 <HAL_GPIO_Init+0x60>
 800270e:	2b00      	cmp	r3, #0
 8002710:	d031      	beq.n	8002776 <HAL_GPIO_Init+0xbe>
 8002712:	2b01      	cmp	r3, #1
 8002714:	d01c      	beq.n	8002750 <HAL_GPIO_Init+0x98>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8002716:	e048      	b.n	80027aa <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8002718:	2b03      	cmp	r3, #3
 800271a:	d043      	beq.n	80027a4 <HAL_GPIO_Init+0xec>
 800271c:	2b11      	cmp	r3, #17
 800271e:	d01b      	beq.n	8002758 <HAL_GPIO_Init+0xa0>
          break;
 8002720:	e043      	b.n	80027aa <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8002722:	4a8d      	ldr	r2, [pc, #564]	; (8002958 <HAL_GPIO_Init+0x2a0>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d026      	beq.n	8002776 <HAL_GPIO_Init+0xbe>
 8002728:	4a8b      	ldr	r2, [pc, #556]	; (8002958 <HAL_GPIO_Init+0x2a0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d806      	bhi.n	800273c <HAL_GPIO_Init+0x84>
 800272e:	4a8b      	ldr	r2, [pc, #556]	; (800295c <HAL_GPIO_Init+0x2a4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d020      	beq.n	8002776 <HAL_GPIO_Init+0xbe>
 8002734:	4a8a      	ldr	r2, [pc, #552]	; (8002960 <HAL_GPIO_Init+0x2a8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d01d      	beq.n	8002776 <HAL_GPIO_Init+0xbe>
          break;
 800273a:	e036      	b.n	80027aa <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800273c:	4a89      	ldr	r2, [pc, #548]	; (8002964 <HAL_GPIO_Init+0x2ac>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d019      	beq.n	8002776 <HAL_GPIO_Init+0xbe>
 8002742:	4a89      	ldr	r2, [pc, #548]	; (8002968 <HAL_GPIO_Init+0x2b0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d016      	beq.n	8002776 <HAL_GPIO_Init+0xbe>
 8002748:	4a88      	ldr	r2, [pc, #544]	; (800296c <HAL_GPIO_Init+0x2b4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d013      	beq.n	8002776 <HAL_GPIO_Init+0xbe>
          break;
 800274e:	e02c      	b.n	80027aa <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	623b      	str	r3, [r7, #32]
          break;
 8002756:	e028      	b.n	80027aa <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	3304      	adds	r3, #4
 800275e:	623b      	str	r3, [r7, #32]
          break;
 8002760:	e023      	b.n	80027aa <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	3308      	adds	r3, #8
 8002768:	623b      	str	r3, [r7, #32]
          break;
 800276a:	e01e      	b.n	80027aa <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	330c      	adds	r3, #12
 8002772:	623b      	str	r3, [r7, #32]
          break;
 8002774:	e019      	b.n	80027aa <HAL_GPIO_Init+0xf2>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d102      	bne.n	8002784 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800277e:	2304      	movs	r3, #4
 8002780:	623b      	str	r3, [r7, #32]
          break; 
 8002782:	e012      	b.n	80027aa <HAL_GPIO_Init+0xf2>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d105      	bne.n	8002798 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800278c:	2308      	movs	r3, #8
 800278e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	611a      	str	r2, [r3, #16]
          break; 
 8002796:	e008      	b.n	80027aa <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002798:	2308      	movs	r3, #8
 800279a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	615a      	str	r2, [r3, #20]
          break; 
 80027a2:	e002      	b.n	80027aa <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027a4:	2300      	movs	r3, #0
 80027a6:	623b      	str	r3, [r7, #32]
          break;
 80027a8:	bf00      	nop
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	2bff      	cmp	r3, #255	; 0xff
 80027ae:	d801      	bhi.n	80027b4 <HAL_GPIO_Init+0xfc>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	e001      	b.n	80027b8 <HAL_GPIO_Init+0x100>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3304      	adds	r3, #4
 80027b8:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	2bff      	cmp	r3, #255	; 0xff
 80027be:	d802      	bhi.n	80027c6 <HAL_GPIO_Init+0x10e>
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	e002      	b.n	80027cc <HAL_GPIO_Init+0x114>
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	3b08      	subs	r3, #8
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	210f      	movs	r1, #15
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	fa01 f303 	lsl.w	r3, r1, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	401a      	ands	r2, r3
 80027de:	6a39      	ldr	r1, [r7, #32]
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	fa01 f303 	lsl.w	r3, r1, r3
 80027e6:	431a      	orrs	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 80a2 	beq.w	800293e <HAL_GPIO_Init+0x286>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027fa:	4a5d      	ldr	r2, [pc, #372]	; (8002970 <HAL_GPIO_Init+0x2b8>)
 80027fc:	4b5c      	ldr	r3, [pc, #368]	; (8002970 <HAL_GPIO_Init+0x2b8>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	6193      	str	r3, [r2, #24]
 8002806:	4b5a      	ldr	r3, [pc, #360]	; (8002970 <HAL_GPIO_Init+0x2b8>)
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8002812:	4a58      	ldr	r2, [pc, #352]	; (8002974 <HAL_GPIO_Init+0x2bc>)
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	089b      	lsrs	r3, r3, #2
 8002818:	3302      	adds	r3, #2
 800281a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281e:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	220f      	movs	r2, #15
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43db      	mvns	r3, r3
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	4013      	ands	r3, r2
 8002834:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a4f      	ldr	r2, [pc, #316]	; (8002978 <HAL_GPIO_Init+0x2c0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d01f      	beq.n	800287e <HAL_GPIO_Init+0x1c6>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a4e      	ldr	r2, [pc, #312]	; (800297c <HAL_GPIO_Init+0x2c4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d019      	beq.n	800287a <HAL_GPIO_Init+0x1c2>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a4d      	ldr	r2, [pc, #308]	; (8002980 <HAL_GPIO_Init+0x2c8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d013      	beq.n	8002876 <HAL_GPIO_Init+0x1be>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a4c      	ldr	r2, [pc, #304]	; (8002984 <HAL_GPIO_Init+0x2cc>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d00d      	beq.n	8002872 <HAL_GPIO_Init+0x1ba>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a4b      	ldr	r2, [pc, #300]	; (8002988 <HAL_GPIO_Init+0x2d0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d007      	beq.n	800286e <HAL_GPIO_Init+0x1b6>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a4a      	ldr	r2, [pc, #296]	; (800298c <HAL_GPIO_Init+0x2d4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d101      	bne.n	800286a <HAL_GPIO_Init+0x1b2>
 8002866:	2305      	movs	r3, #5
 8002868:	e00a      	b.n	8002880 <HAL_GPIO_Init+0x1c8>
 800286a:	2306      	movs	r3, #6
 800286c:	e008      	b.n	8002880 <HAL_GPIO_Init+0x1c8>
 800286e:	2304      	movs	r3, #4
 8002870:	e006      	b.n	8002880 <HAL_GPIO_Init+0x1c8>
 8002872:	2303      	movs	r3, #3
 8002874:	e004      	b.n	8002880 <HAL_GPIO_Init+0x1c8>
 8002876:	2302      	movs	r3, #2
 8002878:	e002      	b.n	8002880 <HAL_GPIO_Init+0x1c8>
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <HAL_GPIO_Init+0x1c8>
 800287e:	2300      	movs	r3, #0
 8002880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002882:	f002 0203 	and.w	r2, r2, #3
 8002886:	0092      	lsls	r2, r2, #2
 8002888:	4093      	lsls	r3, r2
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4313      	orrs	r3, r2
 800288e:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8002890:	4938      	ldr	r1, [pc, #224]	; (8002974 <HAL_GPIO_Init+0x2bc>)
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	089b      	lsrs	r3, r3, #2
 8002896:	3302      	adds	r3, #2
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d006      	beq.n	80028b8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80028aa:	4939      	ldr	r1, [pc, #228]	; (8002990 <HAL_GPIO_Init+0x2d8>)
 80028ac:	4b38      	ldr	r3, [pc, #224]	; (8002990 <HAL_GPIO_Init+0x2d8>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	600b      	str	r3, [r1, #0]
 80028b6:	e006      	b.n	80028c6 <HAL_GPIO_Init+0x20e>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 80028b8:	4935      	ldr	r1, [pc, #212]	; (8002990 <HAL_GPIO_Init+0x2d8>)
 80028ba:	4b35      	ldr	r3, [pc, #212]	; (8002990 <HAL_GPIO_Init+0x2d8>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	4013      	ands	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d006      	beq.n	80028e0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80028d2:	492f      	ldr	r1, [pc, #188]	; (8002990 <HAL_GPIO_Init+0x2d8>)
 80028d4:	4b2e      	ldr	r3, [pc, #184]	; (8002990 <HAL_GPIO_Init+0x2d8>)
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	604b      	str	r3, [r1, #4]
 80028de:	e006      	b.n	80028ee <HAL_GPIO_Init+0x236>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80028e0:	492b      	ldr	r1, [pc, #172]	; (8002990 <HAL_GPIO_Init+0x2d8>)
 80028e2:	4b2b      	ldr	r3, [pc, #172]	; (8002990 <HAL_GPIO_Init+0x2d8>)
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	43db      	mvns	r3, r3
 80028ea:	4013      	ands	r3, r2
 80028ec:	604b      	str	r3, [r1, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d006      	beq.n	8002908 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80028fa:	4925      	ldr	r1, [pc, #148]	; (8002990 <HAL_GPIO_Init+0x2d8>)
 80028fc:	4b24      	ldr	r3, [pc, #144]	; (8002990 <HAL_GPIO_Init+0x2d8>)
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	608b      	str	r3, [r1, #8]
 8002906:	e006      	b.n	8002916 <HAL_GPIO_Init+0x25e>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8002908:	4921      	ldr	r1, [pc, #132]	; (8002990 <HAL_GPIO_Init+0x2d8>)
 800290a:	4b21      	ldr	r3, [pc, #132]	; (8002990 <HAL_GPIO_Init+0x2d8>)
 800290c:	689a      	ldr	r2, [r3, #8]
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	43db      	mvns	r3, r3
 8002912:	4013      	ands	r3, r2
 8002914:	608b      	str	r3, [r1, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d006      	beq.n	8002930 <HAL_GPIO_Init+0x278>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8002922:	491b      	ldr	r1, [pc, #108]	; (8002990 <HAL_GPIO_Init+0x2d8>)
 8002924:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <HAL_GPIO_Init+0x2d8>)
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	4313      	orrs	r3, r2
 800292c:	60cb      	str	r3, [r1, #12]
 800292e:	e006      	b.n	800293e <HAL_GPIO_Init+0x286>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8002930:	4917      	ldr	r1, [pc, #92]	; (8002990 <HAL_GPIO_Init+0x2d8>)
 8002932:	4b17      	ldr	r3, [pc, #92]	; (8002990 <HAL_GPIO_Init+0x2d8>)
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	43db      	mvns	r3, r3
 800293a:	4013      	ands	r3, r2
 800293c:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	3301      	adds	r3, #1
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	2b0f      	cmp	r3, #15
 8002948:	f67f aec8 	bls.w	80026dc <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 800294c:	bf00      	nop
 800294e:	372c      	adds	r7, #44	; 0x2c
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	10210000 	.word	0x10210000
 800295c:	10110000 	.word	0x10110000
 8002960:	10120000 	.word	0x10120000
 8002964:	10310000 	.word	0x10310000
 8002968:	10320000 	.word	0x10320000
 800296c:	10220000 	.word	0x10220000
 8002970:	40021000 	.word	0x40021000
 8002974:	40010000 	.word	0x40010000
 8002978:	40010800 	.word	0x40010800
 800297c:	40010c00 	.word	0x40010c00
 8002980:	40011000 	.word	0x40011000
 8002984:	40011400 	.word	0x40011400
 8002988:	40011800 	.word	0x40011800
 800298c:	40011c00 	.word	0x40011c00
 8002990:	40010400 	.word	0x40010400

08002994 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	887b      	ldrh	r3, [r7, #2]
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
 80029b0:	e001      	b.n	80029b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029b2:	2300      	movs	r3, #0
 80029b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_BIT_RESET: to clear the port pin
  *            @arg GPIO_BIT_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
 80029ca:	460b      	mov	r3, r1
 80029cc:	807b      	strh	r3, [r7, #2]
 80029ce:	4613      	mov	r3, r2
 80029d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029d2:	787b      	ldrb	r3, [r7, #1]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029d8:	887a      	ldrh	r2, [r7, #2]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029de:	e003      	b.n	80029e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029e0:	887b      	ldrh	r3, [r7, #2]
 80029e2:	041a      	lsls	r2, r3, #16
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	611a      	str	r2, [r3, #16]
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr
	...

080029f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 8087 	beq.w	8002b1c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a0e:	4b92      	ldr	r3, [pc, #584]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 030c 	and.w	r3, r3, #12
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d00c      	beq.n	8002a34 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a1a:	4b8f      	ldr	r3, [pc, #572]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d112      	bne.n	8002a4c <HAL_RCC_OscConfig+0x58>
 8002a26:	4b8c      	ldr	r3, [pc, #560]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a32:	d10b      	bne.n	8002a4c <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a34:	4b88      	ldr	r3, [pc, #544]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d06c      	beq.n	8002b1a <HAL_RCC_OscConfig+0x126>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d168      	bne.n	8002b1a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e22d      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a54:	d106      	bne.n	8002a64 <HAL_RCC_OscConfig+0x70>
 8002a56:	4a80      	ldr	r2, [pc, #512]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002a58:	4b7f      	ldr	r3, [pc, #508]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	e02e      	b.n	8002ac2 <HAL_RCC_OscConfig+0xce>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10c      	bne.n	8002a86 <HAL_RCC_OscConfig+0x92>
 8002a6c:	4a7a      	ldr	r2, [pc, #488]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002a6e:	4b7a      	ldr	r3, [pc, #488]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	4a77      	ldr	r2, [pc, #476]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002a7a:	4b77      	ldr	r3, [pc, #476]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	e01d      	b.n	8002ac2 <HAL_RCC_OscConfig+0xce>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a8e:	d10c      	bne.n	8002aaa <HAL_RCC_OscConfig+0xb6>
 8002a90:	4a71      	ldr	r2, [pc, #452]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002a92:	4b71      	ldr	r3, [pc, #452]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	4a6e      	ldr	r2, [pc, #440]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002a9e:	4b6e      	ldr	r3, [pc, #440]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	e00b      	b.n	8002ac2 <HAL_RCC_OscConfig+0xce>
 8002aaa:	4a6b      	ldr	r2, [pc, #428]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002aac:	4b6a      	ldr	r3, [pc, #424]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4a68      	ldr	r2, [pc, #416]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002ab8:	4b67      	ldr	r3, [pc, #412]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac0:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d013      	beq.n	8002af2 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aca:	f7fe fb63 	bl	8001194 <HAL_GetTick>
 8002ace:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad2:	f7fe fb5f 	bl	8001194 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b64      	cmp	r3, #100	; 0x64
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e1e1      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae4:	4b5c      	ldr	r3, [pc, #368]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0f0      	beq.n	8002ad2 <HAL_RCC_OscConfig+0xde>
 8002af0:	e014      	b.n	8002b1c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af2:	f7fe fb4f 	bl	8001194 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002afa:	f7fe fb4b 	bl	8001194 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b64      	cmp	r3, #100	; 0x64
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e1cd      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0c:	4b52      	ldr	r3, [pc, #328]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1f0      	bne.n	8002afa <HAL_RCC_OscConfig+0x106>
 8002b18:	e000      	b.n	8002b1c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b1a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d063      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b28:	4b4b      	ldr	r3, [pc, #300]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 030c 	and.w	r3, r3, #12
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00b      	beq.n	8002b4c <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b34:	4b48      	ldr	r3, [pc, #288]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 030c 	and.w	r3, r3, #12
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d11c      	bne.n	8002b7a <HAL_RCC_OscConfig+0x186>
 8002b40:	4b45      	ldr	r3, [pc, #276]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d116      	bne.n	8002b7a <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4c:	4b42      	ldr	r3, [pc, #264]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <HAL_RCC_OscConfig+0x170>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e1a1      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b64:	493c      	ldr	r1, [pc, #240]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002b66:	4b3c      	ldr	r3, [pc, #240]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4313      	orrs	r3, r2
 8002b76:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b78:	e03a      	b.n	8002bf0 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d020      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b82:	4b36      	ldr	r3, [pc, #216]	; (8002c5c <HAL_RCC_OscConfig+0x268>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b88:	f7fe fb04 	bl	8001194 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b90:	f7fe fb00 	bl	8001194 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e182      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba2:	4b2d      	ldr	r3, [pc, #180]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0f0      	beq.n	8002b90 <HAL_RCC_OscConfig+0x19c>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bae:	492a      	ldr	r1, [pc, #168]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002bb0:	4b29      	ldr	r3, [pc, #164]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]
 8002bc2:	e015      	b.n	8002bf0 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bc4:	4b25      	ldr	r3, [pc, #148]	; (8002c5c <HAL_RCC_OscConfig+0x268>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bca:	f7fe fae3 	bl	8001194 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bd2:	f7fe fadf 	bl	8001194 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e161      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be4:	4b1c      	ldr	r3, [pc, #112]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1f0      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d039      	beq.n	8002c70 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d019      	beq.n	8002c38 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c04:	4b16      	ldr	r3, [pc, #88]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0a:	f7fe fac3 	bl	8001194 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c12:	f7fe fabf 	bl	8001194 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e141      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <HAL_RCC_OscConfig+0x264>)
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8002c30:	2001      	movs	r0, #1
 8002c32:	f000 facb 	bl	80031cc <RCC_Delay>
 8002c36:	e01b      	b.n	8002c70 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c38:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3e:	f7fe faa9 	bl	8001194 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c44:	e00e      	b.n	8002c64 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c46:	f7fe faa5 	bl	8001194 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d907      	bls.n	8002c64 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e127      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4b4>
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	42420000 	.word	0x42420000
 8002c60:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c64:	4b92      	ldr	r3, [pc, #584]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1ea      	bne.n	8002c46 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80a6 	beq.w	8002dca <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c82:	4b8b      	ldr	r3, [pc, #556]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10d      	bne.n	8002caa <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c8e:	4a88      	ldr	r2, [pc, #544]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002c90:	4b87      	ldr	r3, [pc, #540]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c98:	61d3      	str	r3, [r2, #28]
 8002c9a:	4b85      	ldr	r3, [pc, #532]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002caa:	4b82      	ldr	r3, [pc, #520]	; (8002eb4 <HAL_RCC_OscConfig+0x4c0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d118      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cb6:	4a7f      	ldr	r2, [pc, #508]	; (8002eb4 <HAL_RCC_OscConfig+0x4c0>)
 8002cb8:	4b7e      	ldr	r3, [pc, #504]	; (8002eb4 <HAL_RCC_OscConfig+0x4c0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cc2:	f7fe fa67 	bl	8001194 <HAL_GetTick>
 8002cc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc8:	e008      	b.n	8002cdc <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cca:	f7fe fa63 	bl	8001194 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	2b64      	cmp	r3, #100	; 0x64
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e0e5      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cdc:	4b75      	ldr	r3, [pc, #468]	; (8002eb4 <HAL_RCC_OscConfig+0x4c0>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0f0      	beq.n	8002cca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d106      	bne.n	8002cfe <HAL_RCC_OscConfig+0x30a>
 8002cf0:	4a6f      	ldr	r2, [pc, #444]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002cf2:	4b6f      	ldr	r3, [pc, #444]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	6213      	str	r3, [r2, #32]
 8002cfc:	e02d      	b.n	8002d5a <HAL_RCC_OscConfig+0x366>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10c      	bne.n	8002d20 <HAL_RCC_OscConfig+0x32c>
 8002d06:	4a6a      	ldr	r2, [pc, #424]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002d08:	4b69      	ldr	r3, [pc, #420]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	f023 0301 	bic.w	r3, r3, #1
 8002d10:	6213      	str	r3, [r2, #32]
 8002d12:	4a67      	ldr	r2, [pc, #412]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002d14:	4b66      	ldr	r3, [pc, #408]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	f023 0304 	bic.w	r3, r3, #4
 8002d1c:	6213      	str	r3, [r2, #32]
 8002d1e:	e01c      	b.n	8002d5a <HAL_RCC_OscConfig+0x366>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	2b05      	cmp	r3, #5
 8002d26:	d10c      	bne.n	8002d42 <HAL_RCC_OscConfig+0x34e>
 8002d28:	4a61      	ldr	r2, [pc, #388]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002d2a:	4b61      	ldr	r3, [pc, #388]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	f043 0304 	orr.w	r3, r3, #4
 8002d32:	6213      	str	r3, [r2, #32]
 8002d34:	4a5e      	ldr	r2, [pc, #376]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002d36:	4b5e      	ldr	r3, [pc, #376]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	6213      	str	r3, [r2, #32]
 8002d40:	e00b      	b.n	8002d5a <HAL_RCC_OscConfig+0x366>
 8002d42:	4a5b      	ldr	r2, [pc, #364]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002d44:	4b5a      	ldr	r3, [pc, #360]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	f023 0301 	bic.w	r3, r3, #1
 8002d4c:	6213      	str	r3, [r2, #32]
 8002d4e:	4a58      	ldr	r2, [pc, #352]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002d50:	4b57      	ldr	r3, [pc, #348]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	f023 0304 	bic.w	r3, r3, #4
 8002d58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d015      	beq.n	8002d8e <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d62:	f7fe fa17 	bl	8001194 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d68:	e00a      	b.n	8002d80 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d6a:	f7fe fa13 	bl	8001194 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e093      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d80:	4b4b      	ldr	r3, [pc, #300]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0ee      	beq.n	8002d6a <HAL_RCC_OscConfig+0x376>
 8002d8c:	e014      	b.n	8002db8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8e:	f7fe fa01 	bl	8001194 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d94:	e00a      	b.n	8002dac <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d96:	f7fe f9fd 	bl	8001194 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e07d      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dac:	4b40      	ldr	r3, [pc, #256]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1ee      	bne.n	8002d96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002db8:	7dfb      	ldrb	r3, [r7, #23]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d105      	bne.n	8002dca <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dbe:	4a3c      	ldr	r2, [pc, #240]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002dc0:	4b3b      	ldr	r3, [pc, #236]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d069      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dd2:	4b37      	ldr	r3, [pc, #220]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d061      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d146      	bne.n	8002e74 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de6:	4b34      	ldr	r3, [pc, #208]	; (8002eb8 <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dec:	f7fe f9d2 	bl	8001194 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df4:	f7fe f9ce 	bl	8001194 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e050      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e06:	4b2a      	ldr	r3, [pc, #168]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e1a:	d108      	bne.n	8002e2e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e1c:	4924      	ldr	r1, [pc, #144]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002e1e:	4b24      	ldr	r3, [pc, #144]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e2e:	4820      	ldr	r0, [pc, #128]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002e30:	4b1f      	ldr	r3, [pc, #124]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a19      	ldr	r1, [r3, #32]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	430b      	orrs	r3, r1
 8002e42:	4313      	orrs	r3, r2
 8002e44:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e46:	4b1c      	ldr	r3, [pc, #112]	; (8002eb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7fe f9a2 	bl	8001194 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e54:	f7fe f99e 	bl	8001194 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e020      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e66:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x460>
 8002e72:	e018      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e74:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <HAL_RCC_OscConfig+0x4c4>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7a:	f7fe f98b 	bl	8001194 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e82:	f7fe f987 	bl	8001194 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e009      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e94:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <HAL_RCC_OscConfig+0x4bc>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1f0      	bne.n	8002e82 <HAL_RCC_OscConfig+0x48e>
 8002ea0:	e001      	b.n	8002ea6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40007000 	.word	0x40007000
 8002eb8:	42420060 	.word	0x42420060

08002ebc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002eca:	4b72      	ldr	r3, [pc, #456]	; (8003094 <HAL_RCC_ClockConfig+0x1d8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0207 	and.w	r2, r3, #7
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d210      	bcs.n	8002efa <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ed8:	496e      	ldr	r1, [pc, #440]	; (8003094 <HAL_RCC_ClockConfig+0x1d8>)
 8002eda:	4b6e      	ldr	r3, [pc, #440]	; (8003094 <HAL_RCC_ClockConfig+0x1d8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f023 0207 	bic.w	r2, r3, #7
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ee8:	4b6a      	ldr	r3, [pc, #424]	; (8003094 <HAL_RCC_ClockConfig+0x1d8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0207 	and.w	r2, r3, #7
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d001      	beq.n	8002efa <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e0c8      	b.n	800308c <HAL_RCC_ClockConfig+0x1d0>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d008      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f06:	4964      	ldr	r1, [pc, #400]	; (8003098 <HAL_RCC_ClockConfig+0x1dc>)
 8002f08:	4b63      	ldr	r3, [pc, #396]	; (8003098 <HAL_RCC_ClockConfig+0x1dc>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d06a      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d107      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2c:	4b5a      	ldr	r3, [pc, #360]	; (8003098 <HAL_RCC_ClockConfig+0x1dc>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d115      	bne.n	8002f64 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0a7      	b.n	800308c <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d107      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f44:	4b54      	ldr	r3, [pc, #336]	; (8003098 <HAL_RCC_ClockConfig+0x1dc>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d109      	bne.n	8002f64 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e09b      	b.n	800308c <HAL_RCC_ClockConfig+0x1d0>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f54:	4b50      	ldr	r3, [pc, #320]	; (8003098 <HAL_RCC_ClockConfig+0x1dc>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e093      	b.n	800308c <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f64:	494c      	ldr	r1, [pc, #304]	; (8003098 <HAL_RCC_ClockConfig+0x1dc>)
 8002f66:	4b4c      	ldr	r3, [pc, #304]	; (8003098 <HAL_RCC_ClockConfig+0x1dc>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f023 0203 	bic.w	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f76:	f7fe f90d 	bl	8001194 <HAL_GetTick>
 8002f7a:	60f8      	str	r0, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d112      	bne.n	8002faa <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f84:	e00a      	b.n	8002f9c <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f86:	f7fe f905 	bl	8001194 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e077      	b.n	800308c <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f9c:	4b3e      	ldr	r3, [pc, #248]	; (8003098 <HAL_RCC_ClockConfig+0x1dc>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 030c 	and.w	r3, r3, #12
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d1ee      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xca>
 8002fa8:	e027      	b.n	8002ffa <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d11d      	bne.n	8002fee <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fb2:	e00a      	b.n	8002fca <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb4:	f7fe f8ee 	bl	8001194 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e060      	b.n	800308c <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fca:	4b33      	ldr	r3, [pc, #204]	; (8003098 <HAL_RCC_ClockConfig+0x1dc>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d1ee      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0xf8>
 8002fd6:	e010      	b.n	8002ffa <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd8:	f7fe f8dc 	bl	8001194 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e04e      	b.n	800308c <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fee:	4b2a      	ldr	r3, [pc, #168]	; (8003098 <HAL_RCC_ClockConfig+0x1dc>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1ee      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x11c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002ffa:	4b26      	ldr	r3, [pc, #152]	; (8003094 <HAL_RCC_ClockConfig+0x1d8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0207 	and.w	r2, r3, #7
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d910      	bls.n	800302a <HAL_RCC_ClockConfig+0x16e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003008:	4922      	ldr	r1, [pc, #136]	; (8003094 <HAL_RCC_ClockConfig+0x1d8>)
 800300a:	4b22      	ldr	r3, [pc, #136]	; (8003094 <HAL_RCC_ClockConfig+0x1d8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 0207 	bic.w	r2, r3, #7
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	4313      	orrs	r3, r2
 8003016:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003018:	4b1e      	ldr	r3, [pc, #120]	; (8003094 <HAL_RCC_ClockConfig+0x1d8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0207 	and.w	r2, r3, #7
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d001      	beq.n	800302a <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e030      	b.n	800308c <HAL_RCC_ClockConfig+0x1d0>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b00      	cmp	r3, #0
 8003034:	d008      	beq.n	8003048 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003036:	4918      	ldr	r1, [pc, #96]	; (8003098 <HAL_RCC_ClockConfig+0x1dc>)
 8003038:	4b17      	ldr	r3, [pc, #92]	; (8003098 <HAL_RCC_ClockConfig+0x1dc>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0308 	and.w	r3, r3, #8
 8003050:	2b00      	cmp	r3, #0
 8003052:	d009      	beq.n	8003068 <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003054:	4910      	ldr	r1, [pc, #64]	; (8003098 <HAL_RCC_ClockConfig+0x1dc>)
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <HAL_RCC_ClockConfig+0x1dc>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4313      	orrs	r3, r2
 8003066:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003068:	f000 f81c 	bl	80030a4 <HAL_RCC_GetSysClockFreq>
 800306c:	4601      	mov	r1, r0
 800306e:	4b0a      	ldr	r3, [pc, #40]	; (8003098 <HAL_RCC_ClockConfig+0x1dc>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	091b      	lsrs	r3, r3, #4
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	4a08      	ldr	r2, [pc, #32]	; (800309c <HAL_RCC_ClockConfig+0x1e0>)
 800307a:	5cd3      	ldrb	r3, [r2, r3]
 800307c:	fa21 f303 	lsr.w	r3, r1, r3
 8003080:	4a07      	ldr	r2, [pc, #28]	; (80030a0 <HAL_RCC_ClockConfig+0x1e4>)
 8003082:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003084:	2000      	movs	r0, #0
 8003086:	f7fe f85b 	bl	8001140 <HAL_InitTick>
  
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40022000 	.word	0x40022000
 8003098:	40021000 	.word	0x40021000
 800309c:	08006e4c 	.word	0x08006e4c
 80030a0:	20000200 	.word	0x20000200

080030a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a4:	b490      	push	{r4, r7}
 80030a6:	b08a      	sub	sp, #40	; 0x28
 80030a8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030aa:	4b2a      	ldr	r3, [pc, #168]	; (8003154 <HAL_RCC_GetSysClockFreq+0xb0>)
 80030ac:	1d3c      	adds	r4, r7, #4
 80030ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030b4:	4b28      	ldr	r3, [pc, #160]	; (8003158 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
 80030be:	2300      	movs	r3, #0
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	2300      	movs	r3, #0
 80030c4:	627b      	str	r3, [r7, #36]	; 0x24
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 80030ce:	4b23      	ldr	r3, [pc, #140]	; (800315c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d002      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x40>
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d003      	beq.n	80030ea <HAL_RCC_GetSysClockFreq+0x46>
 80030e2:	e02d      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030e4:	4b1e      	ldr	r3, [pc, #120]	; (8003160 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030e6:	623b      	str	r3, [r7, #32]
      break;
 80030e8:	e02d      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	0c9b      	lsrs	r3, r3, #18
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030f6:	4413      	add	r3, r2
 80030f8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80030fc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d013      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003108:	4b14      	ldr	r3, [pc, #80]	; (800315c <HAL_RCC_GetSysClockFreq+0xb8>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	0c5b      	lsrs	r3, r3, #17
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003116:	4413      	add	r3, r2
 8003118:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800311c:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 800311e:	4a10      	ldr	r2, [pc, #64]	; (8003160 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	fbb2 f3f3 	udiv	r3, r2, r3
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	fb02 f303 	mul.w	r3, r2, r3
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
 800312e:	e004      	b.n	800313a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	4a0c      	ldr	r2, [pc, #48]	; (8003164 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003134:	fb02 f303 	mul.w	r3, r2, r3
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	623b      	str	r3, [r7, #32]
      break;
 800313e:	e002      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003140:	4b07      	ldr	r3, [pc, #28]	; (8003160 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003142:	623b      	str	r3, [r7, #32]
      break;
 8003144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003146:	6a3b      	ldr	r3, [r7, #32]
}
 8003148:	4618      	mov	r0, r3
 800314a:	3728      	adds	r7, #40	; 0x28
 800314c:	46bd      	mov	sp, r7
 800314e:	bc90      	pop	{r4, r7}
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	08006dc4 	.word	0x08006dc4
 8003158:	08006dd4 	.word	0x08006dd4
 800315c:	40021000 	.word	0x40021000
 8003160:	007a1200 	.word	0x007a1200
 8003164:	003d0900 	.word	0x003d0900

08003168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800316c:	4b02      	ldr	r3, [pc, #8]	; (8003178 <HAL_RCC_GetHCLKFreq+0x10>)
 800316e:	681b      	ldr	r3, [r3, #0]
}
 8003170:	4618      	mov	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr
 8003178:	20000200 	.word	0x20000200

0800317c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003180:	f7ff fff2 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 8003184:	4601      	mov	r1, r0
 8003186:	4b05      	ldr	r3, [pc, #20]	; (800319c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	0a1b      	lsrs	r3, r3, #8
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	4a03      	ldr	r2, [pc, #12]	; (80031a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003192:	5cd3      	ldrb	r3, [r2, r3]
 8003194:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003198:	4618      	mov	r0, r3
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40021000 	.word	0x40021000
 80031a0:	08006e5c 	.word	0x08006e5c

080031a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031a8:	f7ff ffde 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 80031ac:	4601      	mov	r1, r0
 80031ae:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	0adb      	lsrs	r3, r3, #11
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	4a03      	ldr	r2, [pc, #12]	; (80031c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ba:	5cd3      	ldrb	r3, [r2, r3]
 80031bc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80031c0:	4618      	mov	r0, r3
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40021000 	.word	0x40021000
 80031c8:	08006e5c 	.word	0x08006e5c

080031cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031d4:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <RCC_Delay+0x34>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a0a      	ldr	r2, [pc, #40]	; (8003204 <RCC_Delay+0x38>)
 80031da:	fba2 2303 	umull	r2, r3, r2, r3
 80031de:	0a5b      	lsrs	r3, r3, #9
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	fb02 f303 	mul.w	r3, r2, r3
 80031e6:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80031e8:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	1e5a      	subs	r2, r3, #1
 80031ee:	60fa      	str	r2, [r7, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1f9      	bne.n	80031e8 <RCC_Delay+0x1c>
}
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	20000200 	.word	0x20000200
 8003204:	10624dd3 	.word	0x10624dd3

08003208 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	613b      	str	r3, [r7, #16]
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d07d      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003224:	2300      	movs	r3, #0
 8003226:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003228:	4b4f      	ldr	r3, [pc, #316]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10d      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003234:	4a4c      	ldr	r2, [pc, #304]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003236:	4b4c      	ldr	r3, [pc, #304]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800323e:	61d3      	str	r3, [r2, #28]
 8003240:	4b49      	ldr	r3, [pc, #292]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003248:	60bb      	str	r3, [r7, #8]
 800324a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800324c:	2301      	movs	r3, #1
 800324e:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003250:	4b46      	ldr	r3, [pc, #280]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003258:	2b00      	cmp	r3, #0
 800325a:	d118      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800325c:	4a43      	ldr	r2, [pc, #268]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800325e:	4b43      	ldr	r3, [pc, #268]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003266:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003268:	f7fd ff94 	bl	8001194 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326e:	e008      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003270:	f7fd ff90 	bl	8001194 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b64      	cmp	r3, #100	; 0x64
 800327c:	d901      	bls.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e06d      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003282:	4b3a      	ldr	r3, [pc, #232]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0f0      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800328e:	4b36      	ldr	r3, [pc, #216]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003296:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d02e      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d027      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032ac:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032b6:	4b2e      	ldr	r3, [pc, #184]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032bc:	4b2c      	ldr	r3, [pc, #176]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032c2:	4a29      	ldr	r2, [pc, #164]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d014      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d2:	f7fd ff5f 	bl	8001194 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d8:	e00a      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032da:	f7fd ff5b 	bl	8001194 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e036      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f0:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0ee      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80032fc:	491a      	ldr	r1, [pc, #104]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fe:	4b1a      	ldr	r3, [pc, #104]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4313      	orrs	r3, r2
 800330c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800330e:	7dfb      	ldrb	r3, [r7, #23]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d105      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003314:	4a14      	ldr	r2, [pc, #80]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003316:	4b14      	ldr	r3, [pc, #80]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800331e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800332c:	490e      	ldr	r1, [pc, #56]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332e:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	4313      	orrs	r3, r2
 800333c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	2b00      	cmp	r3, #0
 8003348:	d008      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800334a:	4907      	ldr	r1, [pc, #28]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334c:	4b06      	ldr	r3, [pc, #24]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40021000 	.word	0x40021000
 800336c:	40007000 	.word	0x40007000
 8003370:	42420440 	.word	0x42420440

08003374 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e01d      	b.n	80033c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f002 fece 	bl	800613c <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3304      	adds	r3, #4
 80033b0:	4619      	mov	r1, r3
 80033b2:	4610      	mov	r0, r2
 80033b4:	f000 fbd4 	bl	8003b60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2202      	movs	r2, #2
 80033d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6812      	ldr	r2, [r2, #0]
 80033e2:	6812      	ldr	r2, [r2, #0]
 80033e4:	f042 0201 	orr.w	r2, r2, #1
 80033e8:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr

080033fe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6812      	ldr	r2, [r2, #0]
 800340e:	68d2      	ldr	r2, [r2, #12]
 8003410:	f042 0201 	orr.w	r2, r2, #1
 8003414:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6812      	ldr	r2, [r2, #0]
 800341e:	6812      	ldr	r2, [r2, #0]
 8003420:	f042 0201 	orr.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr

08003432 <HAL_TIM_OC_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e01d      	b.n	8003480 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d106      	bne.n	800345e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f815 	bl	8003488 <HAL_TIM_OC_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2202      	movs	r2, #2
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3304      	adds	r3, #4
 800346e:	4619      	mov	r1, r3
 8003470:	4610      	mov	r0, r2
 8003472:	f000 fb75 	bl	8003b60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr

0800349a <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e01d      	b.n	80034e8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d106      	bne.n	80034c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f815 	bl	80034f0 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2202      	movs	r2, #2
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3304      	adds	r3, #4
 80034d6:	4619      	mov	r1, r3
 80034d8:	4610      	mov	r0, r2
 80034da:	f000 fb41 	bl	8003b60 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr

08003502 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b02      	cmp	r3, #2
 8003516:	d122      	bne.n	800355e <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b02      	cmp	r3, #2
 8003524:	d11b      	bne.n	800355e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f06f 0202 	mvn.w	r2, #2
 800352e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 faef 	bl	8003b28 <HAL_TIM_IC_CaptureCallback>
 800354a:	e005      	b.n	8003558 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 fae2 	bl	8003b16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 faf1 	bl	8003b3a <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b04      	cmp	r3, #4
 800356a:	d122      	bne.n	80035b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f003 0304 	and.w	r3, r3, #4
 8003576:	2b04      	cmp	r3, #4
 8003578:	d11b      	bne.n	80035b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f06f 0204 	mvn.w	r2, #4
 8003582:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 fac5 	bl	8003b28 <HAL_TIM_IC_CaptureCallback>
 800359e:	e005      	b.n	80035ac <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 fab8 	bl	8003b16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fac7 	bl	8003b3a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d122      	bne.n	8003606 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d11b      	bne.n	8003606 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f06f 0208 	mvn.w	r2, #8
 80035d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2204      	movs	r2, #4
 80035dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fa9b 	bl	8003b28 <HAL_TIM_IC_CaptureCallback>
 80035f2:	e005      	b.n	8003600 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 fa8e 	bl	8003b16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fa9d 	bl	8003b3a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f003 0310 	and.w	r3, r3, #16
 8003610:	2b10      	cmp	r3, #16
 8003612:	d122      	bne.n	800365a <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	2b10      	cmp	r3, #16
 8003620:	d11b      	bne.n	800365a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f06f 0210 	mvn.w	r2, #16
 800362a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2208      	movs	r2, #8
 8003630:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363c:	2b00      	cmp	r3, #0
 800363e:	d003      	beq.n	8003648 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fa71 	bl	8003b28 <HAL_TIM_IC_CaptureCallback>
 8003646:	e005      	b.n	8003654 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 fa64 	bl	8003b16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fa73 	bl	8003b3a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b01      	cmp	r3, #1
 8003666:	d10e      	bne.n	8003686 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b01      	cmp	r3, #1
 8003674:	d107      	bne.n	8003686 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f06f 0201 	mvn.w	r2, #1
 800367e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f001 fec5 	bl	8005410 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003690:	2b80      	cmp	r3, #128	; 0x80
 8003692:	d10e      	bne.n	80036b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369e:	2b80      	cmp	r3, #128	; 0x80
 80036a0:	d107      	bne.n	80036b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036aa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 fde3 	bl	8004278 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036bc:	2b40      	cmp	r3, #64	; 0x40
 80036be:	d10e      	bne.n	80036de <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ca:	2b40      	cmp	r3, #64	; 0x40
 80036cc:	d107      	bne.n	80036de <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036d6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 fa37 	bl	8003b4c <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	f003 0320 	and.w	r3, r3, #32
 80036e8:	2b20      	cmp	r3, #32
 80036ea:	d10e      	bne.n	800370a <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	2b20      	cmp	r3, #32
 80036f8:	d107      	bne.n	800370a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f06f 0220 	mvn.w	r2, #32
 8003702:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 fdae 	bl	8004266 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <HAL_TIM_OC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_TIM_OC_ConfigChannel+0x1a>
 800372a:	2302      	movs	r3, #2
 800372c:	e04e      	b.n	80037cc <HAL_TIM_OC_ConfigChannel+0xb8>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2202      	movs	r2, #2
 800373a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b0c      	cmp	r3, #12
 8003742:	d839      	bhi.n	80037b8 <HAL_TIM_OC_ConfigChannel+0xa4>
 8003744:	a201      	add	r2, pc, #4	; (adr r2, 800374c <HAL_TIM_OC_ConfigChannel+0x38>)
 8003746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374a:	bf00      	nop
 800374c:	08003781 	.word	0x08003781
 8003750:	080037b9 	.word	0x080037b9
 8003754:	080037b9 	.word	0x080037b9
 8003758:	080037b9 	.word	0x080037b9
 800375c:	0800378f 	.word	0x0800378f
 8003760:	080037b9 	.word	0x080037b9
 8003764:	080037b9 	.word	0x080037b9
 8003768:	080037b9 	.word	0x080037b9
 800376c:	0800379d 	.word	0x0800379d
 8003770:	080037b9 	.word	0x080037b9
 8003774:	080037b9 	.word	0x080037b9
 8003778:	080037b9 	.word	0x080037b9
 800377c:	080037ab 	.word	0x080037ab
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68b9      	ldr	r1, [r7, #8]
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fa68 	bl	8003c5c <TIM_OC1_SetConfig>
    }
    break;
 800378c:	e015      	b.n	80037ba <HAL_TIM_OC_ConfigChannel+0xa6>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68b9      	ldr	r1, [r7, #8]
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fad7 	bl	8003d48 <TIM_OC2_SetConfig>
    }
    break;
 800379a:	e00e      	b.n	80037ba <HAL_TIM_OC_ConfigChannel+0xa6>

    case TIM_CHANNEL_3:
    {
       assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 fb4a 	bl	8003e3c <TIM_OC3_SetConfig>
    }
    break;
 80037a8:	e007      	b.n	80037ba <HAL_TIM_OC_ConfigChannel+0xa6>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
       /* Configure the TIM Channel 4 in Output Compare */
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68b9      	ldr	r1, [r7, #8]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 fbbd 	bl	8003f30 <TIM_OC4_SetConfig>
    }
    break;
 80037b6:	e000      	b.n	80037ba <HAL_TIM_OC_ConfigChannel+0xa6>

    default:
    break;
 80037b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e0b4      	b.n	8003958 <HAL_TIM_PWM_ConfigChannel+0x184>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2202      	movs	r2, #2
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b0c      	cmp	r3, #12
 8003802:	f200 809f 	bhi.w	8003944 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003806:	a201      	add	r2, pc, #4	; (adr r2, 800380c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800380c:	08003841 	.word	0x08003841
 8003810:	08003945 	.word	0x08003945
 8003814:	08003945 	.word	0x08003945
 8003818:	08003945 	.word	0x08003945
 800381c:	08003881 	.word	0x08003881
 8003820:	08003945 	.word	0x08003945
 8003824:	08003945 	.word	0x08003945
 8003828:	08003945 	.word	0x08003945
 800382c:	080038c3 	.word	0x080038c3
 8003830:	08003945 	.word	0x08003945
 8003834:	08003945 	.word	0x08003945
 8003838:	08003945 	.word	0x08003945
 800383c:	08003903 	.word	0x08003903
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fa08 	bl	8003c5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	6992      	ldr	r2, [r2, #24]
 8003856:	f042 0208 	orr.w	r2, r2, #8
 800385a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	6992      	ldr	r2, [r2, #24]
 8003866:	f022 0204 	bic.w	r2, r2, #4
 800386a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	6812      	ldr	r2, [r2, #0]
 8003874:	6991      	ldr	r1, [r2, #24]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	6912      	ldr	r2, [r2, #16]
 800387a:	430a      	orrs	r2, r1
 800387c:	619a      	str	r2, [r3, #24]
    }
    break;
 800387e:	e062      	b.n	8003946 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68b9      	ldr	r1, [r7, #8]
 8003886:	4618      	mov	r0, r3
 8003888:	f000 fa5e 	bl	8003d48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	6812      	ldr	r2, [r2, #0]
 8003894:	6992      	ldr	r2, [r2, #24]
 8003896:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800389a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	6992      	ldr	r2, [r2, #24]
 80038a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	6991      	ldr	r1, [r2, #24]
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	6912      	ldr	r2, [r2, #16]
 80038ba:	0212      	lsls	r2, r2, #8
 80038bc:	430a      	orrs	r2, r1
 80038be:	619a      	str	r2, [r3, #24]
    }
    break;
 80038c0:	e041      	b.n	8003946 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68b9      	ldr	r1, [r7, #8]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fab7 	bl	8003e3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	6812      	ldr	r2, [r2, #0]
 80038d6:	69d2      	ldr	r2, [r2, #28]
 80038d8:	f042 0208 	orr.w	r2, r2, #8
 80038dc:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	6812      	ldr	r2, [r2, #0]
 80038e6:	69d2      	ldr	r2, [r2, #28]
 80038e8:	f022 0204 	bic.w	r2, r2, #4
 80038ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	6812      	ldr	r2, [r2, #0]
 80038f6:	69d1      	ldr	r1, [r2, #28]
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	6912      	ldr	r2, [r2, #16]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	61da      	str	r2, [r3, #28]
    }
    break;
 8003900:	e021      	b.n	8003946 <HAL_TIM_PWM_ConfigChannel+0x172>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	4618      	mov	r0, r3
 800390a:	f000 fb11 	bl	8003f30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	6812      	ldr	r2, [r2, #0]
 8003916:	69d2      	ldr	r2, [r2, #28]
 8003918:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800391c:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	6812      	ldr	r2, [r2, #0]
 8003926:	69d2      	ldr	r2, [r2, #28]
 8003928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800392c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	6812      	ldr	r2, [r2, #0]
 8003936:	69d1      	ldr	r1, [r2, #28]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	6912      	ldr	r2, [r2, #16]
 800393c:	0212      	lsls	r2, r2, #8
 800393e:	430a      	orrs	r2, r1
 8003940:	61da      	str	r2, [r3, #28]
    }
    break;
 8003942:	e000      	b.n	8003946 <HAL_TIM_PWM_ConfigChannel+0x172>

    default:
    break;
 8003944:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_TIM_ConfigClockSource+0x1c>
 8003978:	2302      	movs	r3, #2
 800397a:	e0c8      	b.n	8003b0e <HAL_TIM_ConfigClockSource+0x1ae>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800399a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b40      	cmp	r3, #64	; 0x40
 80039b2:	d077      	beq.n	8003aa4 <HAL_TIM_ConfigClockSource+0x144>
 80039b4:	2b40      	cmp	r3, #64	; 0x40
 80039b6:	d80e      	bhi.n	80039d6 <HAL_TIM_ConfigClockSource+0x76>
 80039b8:	2b10      	cmp	r3, #16
 80039ba:	f000 808a 	beq.w	8003ad2 <HAL_TIM_ConfigClockSource+0x172>
 80039be:	2b10      	cmp	r3, #16
 80039c0:	d802      	bhi.n	80039c8 <HAL_TIM_ConfigClockSource+0x68>
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d07e      	beq.n	8003ac4 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 80039c6:	e099      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80039c8:	2b20      	cmp	r3, #32
 80039ca:	f000 8089 	beq.w	8003ae0 <HAL_TIM_ConfigClockSource+0x180>
 80039ce:	2b30      	cmp	r3, #48	; 0x30
 80039d0:	f000 808d 	beq.w	8003aee <HAL_TIM_ConfigClockSource+0x18e>
    break;
 80039d4:	e092      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80039d6:	2b70      	cmp	r3, #112	; 0x70
 80039d8:	d016      	beq.n	8003a08 <HAL_TIM_ConfigClockSource+0xa8>
 80039da:	2b70      	cmp	r3, #112	; 0x70
 80039dc:	d804      	bhi.n	80039e8 <HAL_TIM_ConfigClockSource+0x88>
 80039de:	2b50      	cmp	r3, #80	; 0x50
 80039e0:	d040      	beq.n	8003a64 <HAL_TIM_ConfigClockSource+0x104>
 80039e2:	2b60      	cmp	r3, #96	; 0x60
 80039e4:	d04e      	beq.n	8003a84 <HAL_TIM_ConfigClockSource+0x124>
    break;
 80039e6:	e089      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 80039e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ec:	d003      	beq.n	80039f6 <HAL_TIM_ConfigClockSource+0x96>
 80039ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039f2:	d024      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0xde>
    break;
 80039f4:	e082      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6812      	ldr	r2, [r2, #0]
 80039fe:	6892      	ldr	r2, [r2, #8]
 8003a00:	f022 0207 	bic.w	r2, r2, #7
 8003a04:	609a      	str	r2, [r3, #8]
    break;
 8003a06:	e079      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6818      	ldr	r0, [r3, #0]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	6899      	ldr	r1, [r3, #8]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f000 fb68 	bl	80040ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a2a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a32:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	609a      	str	r2, [r3, #8]
    break;
 8003a3c:	e05e      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	6899      	ldr	r1, [r3, #8]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f000 fb4d 	bl	80040ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6812      	ldr	r2, [r2, #0]
 8003a5a:	6892      	ldr	r2, [r2, #8]
 8003a5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a60:	609a      	str	r2, [r3, #8]
    break;
 8003a62:	e04b      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6818      	ldr	r0, [r3, #0]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	6859      	ldr	r1, [r3, #4]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	461a      	mov	r2, r3
 8003a72:	f000 fab7 	bl	8003fe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2150      	movs	r1, #80	; 0x50
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 fb16 	bl	80040ae <TIM_ITRx_SetConfig>
    break;
 8003a82:	e03b      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	6859      	ldr	r1, [r3, #4]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	461a      	mov	r2, r3
 8003a92:	f000 fad9 	bl	8004048 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2160      	movs	r1, #96	; 0x60
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fb06 	bl	80040ae <TIM_ITRx_SetConfig>
    break;
 8003aa2:	e02b      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	6859      	ldr	r1, [r3, #4]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	f000 fa97 	bl	8003fe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2140      	movs	r1, #64	; 0x40
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 faf6 	bl	80040ae <TIM_ITRx_SetConfig>
    break;
 8003ac2:	e01b      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2100      	movs	r1, #0
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 faef 	bl	80040ae <TIM_ITRx_SetConfig>
    break;
 8003ad0:	e014      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2110      	movs	r1, #16
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 fae8 	bl	80040ae <TIM_ITRx_SetConfig>
    break;
 8003ade:	e00d      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2120      	movs	r1, #32
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 fae1 	bl	80040ae <TIM_ITRx_SetConfig>
    break;
 8003aec:	e006      	b.n	8003afc <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2130      	movs	r1, #48	; 0x30
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 fada 	bl	80040ae <TIM_ITRx_SetConfig>
    break;
 8003afa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bc80      	pop	{r7}
 8003b26:	4770      	bx	lr

08003b28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr

08003b3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bc80      	pop	{r7}
 8003b4a:	4770      	bx	lr

08003b4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr
	...

08003b60 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a34      	ldr	r2, [pc, #208]	; (8003c48 <TIM_Base_SetConfig+0xe8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d013      	beq.n	8003ba4 <TIM_Base_SetConfig+0x44>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a33      	ldr	r2, [pc, #204]	; (8003c4c <TIM_Base_SetConfig+0xec>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00f      	beq.n	8003ba4 <TIM_Base_SetConfig+0x44>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b8a:	d00b      	beq.n	8003ba4 <TIM_Base_SetConfig+0x44>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a30      	ldr	r2, [pc, #192]	; (8003c50 <TIM_Base_SetConfig+0xf0>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d007      	beq.n	8003ba4 <TIM_Base_SetConfig+0x44>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a2f      	ldr	r2, [pc, #188]	; (8003c54 <TIM_Base_SetConfig+0xf4>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d003      	beq.n	8003ba4 <TIM_Base_SetConfig+0x44>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a2e      	ldr	r2, [pc, #184]	; (8003c58 <TIM_Base_SetConfig+0xf8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d108      	bne.n	8003bb6 <TIM_Base_SetConfig+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a23      	ldr	r2, [pc, #140]	; (8003c48 <TIM_Base_SetConfig+0xe8>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d013      	beq.n	8003be6 <TIM_Base_SetConfig+0x86>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a22      	ldr	r2, [pc, #136]	; (8003c4c <TIM_Base_SetConfig+0xec>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d00f      	beq.n	8003be6 <TIM_Base_SetConfig+0x86>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bcc:	d00b      	beq.n	8003be6 <TIM_Base_SetConfig+0x86>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a1f      	ldr	r2, [pc, #124]	; (8003c50 <TIM_Base_SetConfig+0xf0>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d007      	beq.n	8003be6 <TIM_Base_SetConfig+0x86>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a1e      	ldr	r2, [pc, #120]	; (8003c54 <TIM_Base_SetConfig+0xf4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d003      	beq.n	8003be6 <TIM_Base_SetConfig+0x86>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a1d      	ldr	r2, [pc, #116]	; (8003c58 <TIM_Base_SetConfig+0xf8>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d108      	bne.n	8003bf8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bfe:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a09      	ldr	r2, [pc, #36]	; (8003c48 <TIM_Base_SetConfig+0xe8>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d003      	beq.n	8003c30 <TIM_Base_SetConfig+0xd0>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a08      	ldr	r2, [pc, #32]	; (8003c4c <TIM_Base_SetConfig+0xec>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d103      	bne.n	8003c38 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	691a      	ldr	r2, [r3, #16]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	615a      	str	r2, [r3, #20]
}
 8003c3e:	bf00      	nop
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr
 8003c48:	40012c00 	.word	0x40012c00
 8003c4c:	40013400 	.word	0x40013400
 8003c50:	40000400 	.word	0x40000400
 8003c54:	40000800 	.word	0x40000800
 8003c58:	40000c00 	.word	0x40000c00

08003c5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	f023 0201 	bic.w	r2, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0303 	bic.w	r3, r3, #3
 8003c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f023 0302 	bic.w	r3, r3, #2
 8003cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a20      	ldr	r2, [pc, #128]	; (8003d40 <TIM_OC1_SetConfig+0xe4>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d003      	beq.n	8003ccc <TIM_OC1_SetConfig+0x70>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a1f      	ldr	r2, [pc, #124]	; (8003d44 <TIM_OC1_SetConfig+0xe8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d10c      	bne.n	8003ce6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f023 0308 	bic.w	r3, r3, #8
 8003cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f023 0304 	bic.w	r3, r3, #4
 8003ce4:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a15      	ldr	r2, [pc, #84]	; (8003d40 <TIM_OC1_SetConfig+0xe4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d003      	beq.n	8003cf6 <TIM_OC1_SetConfig+0x9a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a14      	ldr	r2, [pc, #80]	; (8003d44 <TIM_OC1_SetConfig+0xe8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d111      	bne.n	8003d1a <TIM_OC1_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	621a      	str	r2, [r3, #32]
}
 8003d34:	bf00      	nop
 8003d36:	371c      	adds	r7, #28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bc80      	pop	{r7}
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40012c00 	.word	0x40012c00
 8003d44:	40013400 	.word	0x40013400

08003d48 <TIM_OC2_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	f023 0210 	bic.w	r2, r3, #16
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	021b      	lsls	r3, r3, #8
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f023 0320 	bic.w	r3, r3, #32
 8003d9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a21      	ldr	r2, [pc, #132]	; (8003e34 <TIM_OC2_SetConfig+0xec>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d003      	beq.n	8003dbc <TIM_OC2_SetConfig+0x74>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a20      	ldr	r2, [pc, #128]	; (8003e38 <TIM_OC2_SetConfig+0xf0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d10d      	bne.n	8003dd8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dd6:	617b      	str	r3, [r7, #20]

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a16      	ldr	r2, [pc, #88]	; (8003e34 <TIM_OC2_SetConfig+0xec>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d003      	beq.n	8003de8 <TIM_OC2_SetConfig+0xa0>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a15      	ldr	r2, [pc, #84]	; (8003e38 <TIM_OC2_SetConfig+0xf0>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d113      	bne.n	8003e10 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003dee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003df6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	621a      	str	r2, [r3, #32]
}
 8003e2a:	bf00      	nop
 8003e2c:	371c      	adds	r7, #28
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr
 8003e34:	40012c00 	.word	0x40012c00
 8003e38:	40013400 	.word	0x40013400

08003e3c <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f023 0303 	bic.w	r3, r3, #3
 8003e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	021b      	lsls	r3, r3, #8
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a21      	ldr	r2, [pc, #132]	; (8003f28 <TIM_OC3_SetConfig+0xec>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d003      	beq.n	8003eae <TIM_OC3_SetConfig+0x72>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a20      	ldr	r2, [pc, #128]	; (8003f2c <TIM_OC3_SetConfig+0xf0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d10d      	bne.n	8003eca <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003eb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	021b      	lsls	r3, r3, #8
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ec8:	617b      	str	r3, [r7, #20]
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a16      	ldr	r2, [pc, #88]	; (8003f28 <TIM_OC3_SetConfig+0xec>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d003      	beq.n	8003eda <TIM_OC3_SetConfig+0x9e>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a15      	ldr	r2, [pc, #84]	; (8003f2c <TIM_OC3_SetConfig+0xf0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d113      	bne.n	8003f02 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	621a      	str	r2, [r3, #32]
}
 8003f1c:	bf00      	nop
 8003f1e:	371c      	adds	r7, #28
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bc80      	pop	{r7}
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40012c00 	.word	0x40012c00
 8003f2c:	40013400 	.word	0x40013400

08003f30 <TIM_OC4_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f6a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f72:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	021b      	lsls	r3, r3, #8
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f86:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	031b      	lsls	r3, r3, #12
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a11      	ldr	r2, [pc, #68]	; (8003fdc <TIM_OC4_SetConfig+0xac>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d003      	beq.n	8003fa4 <TIM_OC4_SetConfig+0x74>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a10      	ldr	r2, [pc, #64]	; (8003fe0 <TIM_OC4_SetConfig+0xb0>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d109      	bne.n	8003fb8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003faa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	019b      	lsls	r3, r3, #6
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	621a      	str	r2, [r3, #32]
}
 8003fd2:	bf00      	nop
 8003fd4:	371c      	adds	r7, #28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr
 8003fdc:	40012c00 	.word	0x40012c00
 8003fe0:	40013400 	.word	0x40013400

08003fe4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f023 0201 	bic.w	r2, r3, #1
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004016:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	4313      	orrs	r3, r2
 8004020:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f023 030a 	bic.w	r3, r3, #10
 8004028:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4313      	orrs	r3, r2
 8004030:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	621a      	str	r2, [r3, #32]
}
 800403e:	bf00      	nop
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr

08004048 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	f023 0210 	bic.w	r2, r3, #16
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800407a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	031b      	lsls	r3, r3, #12
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800408c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	621a      	str	r2, [r3, #32]
}
 80040a4:	bf00      	nop
 80040a6:	371c      	adds	r7, #28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc80      	pop	{r7}
 80040ac:	4770      	bx	lr

080040ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b085      	sub	sp, #20
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
 80040b6:	460b      	mov	r3, r1
 80040b8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ca:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80040cc:	887b      	ldrh	r3, [r7, #2]
 80040ce:	f043 0307 	orr.w	r3, r3, #7
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	461a      	mov	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4313      	orrs	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	609a      	str	r2, [r3, #8]
}
 80040e2:	bf00      	nop
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bc80      	pop	{r7}
 80040ea:	4770      	bx	lr

080040ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800410a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	021a      	lsls	r2, r3, #8
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	431a      	orrs	r2, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4313      	orrs	r3, r2
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	4313      	orrs	r3, r2
 800411c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	609a      	str	r2, [r3, #8]
}
 8004124:	bf00      	nop
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr

0800412e <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800412e:	b480      	push	{r7}
 8004130:	b085      	sub	sp, #20
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004142:	2b01      	cmp	r3, #1
 8004144:	d101      	bne.n	800414a <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004146:	2302      	movs	r3, #2
 8004148:	e044      	b.n	80041d4 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4313      	orrs	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	bc80      	pop	{r7}
 80041dc:	4770      	bx	lr

080041de <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d101      	bne.n	80041f6 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041f2:	2302      	movs	r3, #2
 80041f4:	e032      	b.n	800425c <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2202      	movs	r2, #2
 8004202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6812      	ldr	r2, [r2, #0]
 800420e:	6852      	ldr	r2, [r2, #4]
 8004210:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004214:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	6851      	ldr	r1, [r2, #4]
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6812      	ldr	r2, [r2, #0]
 8004230:	6892      	ldr	r2, [r2, #8]
 8004232:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004236:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	6891      	ldr	r1, [r2, #8]
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	6852      	ldr	r2, [r2, #4]
 8004246:	430a      	orrs	r2, r1
 8004248:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr

08004266 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr

08004278 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr

0800428a <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b082      	sub	sp, #8
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e03f      	b.n	800431c <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d106      	bne.n	80042b6 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f001 ffd1 	bl	8006258 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2224      	movs	r2, #36	; 0x24
 80042ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6812      	ldr	r2, [r2, #0]
 80042c6:	68d2      	ldr	r2, [r2, #12]
 80042c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042cc:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fbcc 	bl	8004a6c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	6912      	ldr	r2, [r2, #16]
 80042de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6812      	ldr	r2, [r2, #0]
 80042ec:	6952      	ldr	r2, [r2, #20]
 80042ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042f2:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	6812      	ldr	r2, [r2, #0]
 80042fc:	68d2      	ldr	r2, [r2, #12]
 80042fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004302:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2220      	movs	r2, #32
 8004316:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_UART_Transmit_IT>:
  * @param  pData: Pointer to data buffer
  * @param  Size: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	4613      	mov	r3, r2
 8004330:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b20      	cmp	r3, #32
 800433c:	d130      	bne.n	80043a0 <HAL_UART_Transmit_IT+0x7c>
  {
    if((pData == NULL) || (Size == 0U)) 
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <HAL_UART_Transmit_IT+0x26>
 8004344:	88fb      	ldrh	r3, [r7, #6]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e029      	b.n	80043a2 <HAL_UART_Transmit_IT+0x7e>
    }
    /* Process Locked */
    __HAL_LOCK(huart);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_UART_Transmit_IT+0x38>
 8004358:	2302      	movs	r3, #2
 800435a:	e022      	b.n	80043a2 <HAL_UART_Transmit_IT+0x7e>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	88fa      	ldrh	r2, [r7, #6]
 800436e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	88fa      	ldrh	r2, [r7, #6]
 8004374:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2221      	movs	r2, #33	; 0x21
 8004380:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	6812      	ldr	r2, [r2, #0]
 8004394:	68d2      	ldr	r2, [r2, #12]
 8004396:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800439a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	e000      	b.n	80043a2 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80043a0:	2302      	movs	r3, #2
  }
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr

080043ac <HAL_UART_Receive_DMA>:
  * @param  Size: Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	4613      	mov	r3, r2
 80043b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	d166      	bne.n	8004494 <HAL_UART_Receive_DMA+0xe8>
  {
    if((pData == NULL) || (Size == 0U))
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d002      	beq.n	80043d2 <HAL_UART_Receive_DMA+0x26>
 80043cc:	88fb      	ldrh	r3, [r7, #6]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e05f      	b.n	8004496 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d101      	bne.n	80043e4 <HAL_UART_Receive_DMA+0x38>
 80043e0:	2302      	movs	r3, #2
 80043e2:	e058      	b.n	8004496 <HAL_UART_Receive_DMA+0xea>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	88fa      	ldrh	r2, [r7, #6]
 80043f6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2222      	movs	r2, #34	; 0x22
 8004402:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440a:	4a25      	ldr	r2, [pc, #148]	; (80044a0 <HAL_UART_Receive_DMA+0xf4>)
 800440c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004412:	4a24      	ldr	r2, [pc, #144]	; (80044a4 <HAL_UART_Receive_DMA+0xf8>)
 8004414:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441a:	4a23      	ldr	r2, [pc, #140]	; (80044a8 <HAL_UART_Receive_DMA+0xfc>)
 800441c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004422:	2200      	movs	r2, #0
 8004424:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
 8004426:	f107 0308 	add.w	r3, r7, #8
 800442a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3304      	adds	r3, #4
 8004436:	4619      	mov	r1, r3
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	88fb      	ldrh	r3, [r7, #6]
 800443e:	f7fd fd27 	bl	8001e90 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004442:	2300      	movs	r3, #0
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	613b      	str	r3, [r7, #16]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	613b      	str	r3, [r7, #16]
 8004456:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	6812      	ldr	r2, [r2, #0]
 8004468:	68d2      	ldr	r2, [r2, #12]
 800446a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800446e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	6952      	ldr	r2, [r2, #20]
 800447a:	f042 0201 	orr.w	r2, r2, #1
 800447e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	6952      	ldr	r2, [r2, #20]
 800448a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800448e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004490:	2300      	movs	r3, #0
 8004492:	e000      	b.n	8004496 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004494:	2302      	movs	r3, #2
  }
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	080046ed 	.word	0x080046ed
 80044a4:	08004755 	.word	0x08004755
 80044a8:	08004771 	.word	0x08004771

080044ac <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10d      	bne.n	80044fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d008      	beq.n	80044fe <HAL_UART_IRQHandler+0x52>
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 fa36 	bl	8004968 <UART_Receive_IT>
      return;
 80044fc:	e0cc      	b.n	8004698 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 80ab 	beq.w	800465c <HAL_UART_IRQHandler+0x1b0>
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d105      	bne.n	800451c <HAL_UART_IRQHandler+0x70>
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 80a0 	beq.w	800465c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <HAL_UART_IRQHandler+0x90>
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004534:	f043 0201 	orr.w	r2, r3, #1
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f003 0304 	and.w	r3, r3, #4
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00a      	beq.n	800455c <HAL_UART_IRQHandler+0xb0>
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	d005      	beq.n	800455c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004554:	f043 0202 	orr.w	r2, r3, #2
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <HAL_UART_IRQHandler+0xd0>
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004574:	f043 0204 	orr.w	r2, r3, #4
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <HAL_UART_IRQHandler+0xf0>
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <HAL_UART_IRQHandler+0xf0>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004594:	f043 0208 	orr.w	r2, r3, #8
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d078      	beq.n	8004696 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d007      	beq.n	80045be <HAL_UART_IRQHandler+0x112>
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	f003 0320 	and.w	r3, r3, #32
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f9d5 	bl	8004968 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf14      	ite	ne
 80045cc:	2301      	movne	r3, #1
 80045ce:	2300      	moveq	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d102      	bne.n	80045e6 <HAL_UART_IRQHandler+0x13a>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d031      	beq.n	800464a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f921 	bl	800482e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d023      	beq.n	8004642 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6812      	ldr	r2, [r2, #0]
 8004602:	6952      	ldr	r2, [r2, #20]
 8004604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004608:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460e:	2b00      	cmp	r3, #0
 8004610:	d013      	beq.n	800463a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004616:	4a22      	ldr	r2, [pc, #136]	; (80046a0 <HAL_UART_IRQHandler+0x1f4>)
 8004618:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461e:	4618      	mov	r0, r3
 8004620:	f7fd fc96 	bl	8001f50 <HAL_DMA_Abort_IT>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d016      	beq.n	8004658 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004634:	4610      	mov	r0, r2
 8004636:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004638:	e00e      	b.n	8004658 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f84d 	bl	80046da <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004640:	e00a      	b.n	8004658 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f849 	bl	80046da <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004648:	e006      	b.n	8004658 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f845 	bl	80046da <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004656:	e01e      	b.n	8004696 <HAL_UART_IRQHandler+0x1ea>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004658:	bf00      	nop
    return;
 800465a:	e01c      	b.n	8004696 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004662:	2b00      	cmp	r3, #0
 8004664:	d008      	beq.n	8004678 <HAL_UART_IRQHandler+0x1cc>
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f90d 	bl	8004890 <UART_Transmit_IT>
    return;
 8004676:	e00f      	b.n	8004698 <HAL_UART_IRQHandler+0x1ec>
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <HAL_UART_IRQHandler+0x1ec>
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004688:	2b00      	cmp	r3, #0
 800468a:	d005      	beq.n	8004698 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f953 	bl	8004938 <UART_EndTransmit_IT>
    return;
 8004692:	bf00      	nop
 8004694:	e000      	b.n	8004698 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004696:	bf00      	nop
  }
}
 8004698:	3720      	adds	r7, #32
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	08004869 	.word	0x08004869

080046a4 <HAL_UART_TxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */ 
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bc80      	pop	{r7}
 80046b4:	4770      	bx	lr

080046b6 <HAL_UART_RxCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr

080046c8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bc80      	pop	{r7}
 80046d8:	4770      	bx	lr

080046da <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bc80      	pop	{r7}
 80046ea:	4770      	bx	lr

080046ec <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0320 	and.w	r3, r3, #32
 8004704:	2b00      	cmp	r3, #0
 8004706:	d11e      	bne.n	8004746 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	6812      	ldr	r2, [r2, #0]
 8004716:	68d2      	ldr	r2, [r2, #12]
 8004718:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800471c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	6812      	ldr	r2, [r2, #0]
 8004726:	6952      	ldr	r2, [r2, #20]
 8004728:	f022 0201 	bic.w	r2, r2, #1
 800472c:	615a      	str	r2, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	6812      	ldr	r2, [r2, #0]
 8004736:	6952      	ldr	r2, [r2, #20]
 8004738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800473c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2220      	movs	r2, #32
 8004742:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f7ff ffb5 	bl	80046b6 <HAL_UART_RxCpltCallback>
}
 800474c:	bf00      	nop
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <UART_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	60fb      	str	r3, [r7, #12]
  HAL_UART_RxHalfCpltCallback(huart); 
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f7ff ffb0 	bl	80046c8 <HAL_UART_RxHalfCpltCallback>
}
 8004768:	bf00      	nop
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004778:	2300      	movs	r3, #0
 800477a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478c:	2b00      	cmp	r3, #0
 800478e:	bf14      	ite	ne
 8004790:	2301      	movne	r3, #1
 8004792:	2300      	moveq	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b21      	cmp	r3, #33	; 0x21
 80047a2:	d108      	bne.n	80047b6 <UART_DMAError+0x46>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d005      	beq.n	80047b6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2200      	movs	r2, #0
 80047ae:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80047b0:	68b8      	ldr	r0, [r7, #8]
 80047b2:	f000 f827 	bl	8004804 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	bf14      	ite	ne
 80047c4:	2301      	movne	r3, #1
 80047c6:	2300      	moveq	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b22      	cmp	r3, #34	; 0x22
 80047d6:	d108      	bne.n	80047ea <UART_DMAError+0x7a>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d005      	beq.n	80047ea <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2200      	movs	r2, #0
 80047e2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80047e4:	68b8      	ldr	r0, [r7, #8]
 80047e6:	f000 f822 	bl	800482e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ee:	f043 0210 	orr.w	r2, r3, #16
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80047f6:	68b8      	ldr	r0, [r7, #8]
 80047f8:	f7ff ff6f 	bl	80046da <HAL_UART_ErrorCallback>
}
 80047fc:	bf00      	nop
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6812      	ldr	r2, [r2, #0]
 8004814:	68d2      	ldr	r2, [r2, #12]
 8004816:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800481a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2220      	movs	r2, #32
 8004820:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	bc80      	pop	{r7}
 800482c:	4770      	bx	lr

0800482e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart: UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6812      	ldr	r2, [r2, #0]
 800483e:	68d2      	ldr	r2, [r2, #12]
 8004840:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004844:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	6952      	ldr	r2, [r2, #20]
 8004850:	f022 0201 	bic.w	r2, r2, #1
 8004854:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	bc80      	pop	{r7}
 8004866:	4770      	bx	lr

08004868 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f7ff ff29 	bl	80046da <HAL_UART_ErrorCallback>
}
 8004888:	bf00      	nop
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <UART_Transmit_IT>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b21      	cmp	r3, #33	; 0x21
 80048a2:	d143      	bne.n	800492c <UART_Transmit_IT+0x9c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ac:	d119      	bne.n	80048e2 <UART_Transmit_IT+0x52>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	8812      	ldrh	r2, [r2, #0]
 80048bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048c0:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d105      	bne.n	80048d6 <UART_Transmit_IT+0x46>
      {
        huart->pTxBuffPtr += 2U;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	1c9a      	adds	r2, r3, #2
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	621a      	str	r2, [r3, #32]
 80048d4:	e00e      	b.n	80048f4 <UART_Transmit_IT+0x64>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	621a      	str	r2, [r3, #32]
 80048e0:	e008      	b.n	80048f4 <UART_Transmit_IT+0x64>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	1c58      	adds	r0, r3, #1
 80048ec:	6879      	ldr	r1, [r7, #4]
 80048ee:	6208      	str	r0, [r1, #32]
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	6053      	str	r3, [r2, #4]
    }

    if(--huart->TxXferCount == 0U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	3b01      	subs	r3, #1
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	4619      	mov	r1, r3
 8004902:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10f      	bne.n	8004928 <UART_Transmit_IT+0x98>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6812      	ldr	r2, [r2, #0]
 8004910:	68d2      	ldr	r2, [r2, #12]
 8004912:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004916:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6812      	ldr	r2, [r2, #0]
 8004920:	68d2      	ldr	r2, [r2, #12]
 8004922:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004926:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004928:	2300      	movs	r3, #0
 800492a:	e000      	b.n	800492e <UART_Transmit_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800492c:	2302      	movs	r3, #2
  }
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	bc80      	pop	{r7}
 8004936:	4770      	bx	lr

08004938 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6812      	ldr	r2, [r2, #0]
 8004948:	68d2      	ldr	r2, [r2, #12]
 800494a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800494e:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f7ff fea3 	bl	80046a4 <HAL_UART_TxCpltCallback>
  
  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <UART_Receive_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b22      	cmp	r3, #34	; 0x22
 800497a:	d171      	bne.n	8004a60 <UART_Receive_IT+0xf8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004984:	d123      	bne.n	80049ce <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498a:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10e      	bne.n	80049b2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	b29b      	uxth	r3, r3
 800499c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049aa:	1c9a      	adds	r2, r3, #2
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	629a      	str	r2, [r3, #40]	; 0x28
 80049b0:	e029      	b.n	8004a06 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	629a      	str	r2, [r3, #40]	; 0x28
 80049cc:	e01b      	b.n	8004a06 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10a      	bne.n	80049ec <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049da:	1c59      	adds	r1, r3, #1
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6291      	str	r1, [r2, #40]	; 0x28
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6812      	ldr	r2, [r2, #0]
 80049e4:	6852      	ldr	r2, [r2, #4]
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	701a      	strb	r2, [r3, #0]
 80049ea:	e00c      	b.n	8004a06 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f0:	1c59      	adds	r1, r3, #1
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6291      	str	r1, [r2, #40]	; 0x28
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6812      	ldr	r2, [r2, #0]
 80049fa:	6852      	ldr	r2, [r2, #4]
 80049fc:	b2d2      	uxtb	r2, r2
 80049fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	4619      	mov	r1, r3
 8004a14:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d120      	bne.n	8004a5c <UART_Receive_IT+0xf4>
    {
      /* Disable the IRDA Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6812      	ldr	r2, [r2, #0]
 8004a22:	68d2      	ldr	r2, [r2, #12]
 8004a24:	f022 0220 	bic.w	r2, r2, #32
 8004a28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	6812      	ldr	r2, [r2, #0]
 8004a32:	68d2      	ldr	r2, [r2, #12]
 8004a34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a38:	60da      	str	r2, [r3, #12]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6812      	ldr	r2, [r2, #0]
 8004a42:	6952      	ldr	r2, [r2, #20]
 8004a44:	f022 0201 	bic.w	r2, r2, #1
 8004a48:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7ff fe2f 	bl	80046b6 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	e002      	b.n	8004a62 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	e000      	b.n	8004a62 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004a60:	2302      	movs	r3, #2
  }
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
	...

08004a6c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	6912      	ldr	r2, [r2, #16]
 8004a82:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	68d2      	ldr	r2, [r2, #12]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004ab2:	f023 030c 	bic.w	r3, r3, #12
 8004ab6:	68f9      	ldr	r1, [r7, #12]
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6812      	ldr	r2, [r2, #0]
 8004ac4:	6952      	ldr	r2, [r2, #20]
 8004ac6:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6992      	ldr	r2, [r2, #24]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a6f      	ldr	r2, [pc, #444]	; (8004c94 <UART_SetConfig+0x228>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d16b      	bne.n	8004bb4 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681c      	ldr	r4, [r3, #0]
 8004ae0:	f7fe fb60 	bl	80031a4 <HAL_RCC_GetPCLK2Freq>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	009a      	lsls	r2, r3, #2
 8004aee:	441a      	add	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afa:	4a67      	ldr	r2, [pc, #412]	; (8004c98 <UART_SetConfig+0x22c>)
 8004afc:	fba2 2303 	umull	r2, r3, r2, r3
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	011d      	lsls	r5, r3, #4
 8004b04:	f7fe fb4e 	bl	80031a4 <HAL_RCC_GetPCLK2Freq>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	009a      	lsls	r2, r3, #2
 8004b12:	441a      	add	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b1e:	f7fe fb41 	bl	80031a4 <HAL_RCC_GetPCLK2Freq>
 8004b22:	4602      	mov	r2, r0
 8004b24:	4613      	mov	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	009a      	lsls	r2, r3, #2
 8004b2c:	441a      	add	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b38:	4a57      	ldr	r2, [pc, #348]	; (8004c98 <UART_SetConfig+0x22c>)
 8004b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	2264      	movs	r2, #100	; 0x64
 8004b42:	fb02 f303 	mul.w	r3, r2, r3
 8004b46:	1af3      	subs	r3, r6, r3
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	3332      	adds	r3, #50	; 0x32
 8004b4c:	4a52      	ldr	r2, [pc, #328]	; (8004c98 <UART_SetConfig+0x22c>)
 8004b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b58:	441d      	add	r5, r3
 8004b5a:	f7fe fb23 	bl	80031a4 <HAL_RCC_GetPCLK2Freq>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	009a      	lsls	r2, r3, #2
 8004b68:	441a      	add	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b74:	f7fe fb16 	bl	80031a4 <HAL_RCC_GetPCLK2Freq>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	009a      	lsls	r2, r3, #2
 8004b82:	441a      	add	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8e:	4a42      	ldr	r2, [pc, #264]	; (8004c98 <UART_SetConfig+0x22c>)
 8004b90:	fba2 2303 	umull	r2, r3, r2, r3
 8004b94:	095b      	lsrs	r3, r3, #5
 8004b96:	2264      	movs	r2, #100	; 0x64
 8004b98:	fb02 f303 	mul.w	r3, r2, r3
 8004b9c:	1af3      	subs	r3, r6, r3
 8004b9e:	011b      	lsls	r3, r3, #4
 8004ba0:	3332      	adds	r3, #50	; 0x32
 8004ba2:	4a3d      	ldr	r2, [pc, #244]	; (8004c98 <UART_SetConfig+0x22c>)
 8004ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba8:	095b      	lsrs	r3, r3, #5
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	442b      	add	r3, r5
 8004bb0:	60a3      	str	r3, [r4, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004bb2:	e06a      	b.n	8004c8a <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681c      	ldr	r4, [r3, #0]
 8004bb8:	f7fe fae0 	bl	800317c <HAL_RCC_GetPCLK1Freq>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009a      	lsls	r2, r3, #2
 8004bc6:	441a      	add	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd2:	4a31      	ldr	r2, [pc, #196]	; (8004c98 <UART_SetConfig+0x22c>)
 8004bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd8:	095b      	lsrs	r3, r3, #5
 8004bda:	011d      	lsls	r5, r3, #4
 8004bdc:	f7fe face 	bl	800317c <HAL_RCC_GetPCLK1Freq>
 8004be0:	4602      	mov	r2, r0
 8004be2:	4613      	mov	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4413      	add	r3, r2
 8004be8:	009a      	lsls	r2, r3, #2
 8004bea:	441a      	add	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	fbb2 f6f3 	udiv	r6, r2, r3
 8004bf6:	f7fe fac1 	bl	800317c <HAL_RCC_GetPCLK1Freq>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	009a      	lsls	r2, r3, #2
 8004c04:	441a      	add	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c10:	4a21      	ldr	r2, [pc, #132]	; (8004c98 <UART_SetConfig+0x22c>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	2264      	movs	r2, #100	; 0x64
 8004c1a:	fb02 f303 	mul.w	r3, r2, r3
 8004c1e:	1af3      	subs	r3, r6, r3
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	3332      	adds	r3, #50	; 0x32
 8004c24:	4a1c      	ldr	r2, [pc, #112]	; (8004c98 <UART_SetConfig+0x22c>)
 8004c26:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2a:	095b      	lsrs	r3, r3, #5
 8004c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c30:	441d      	add	r5, r3
 8004c32:	f7fe faa3 	bl	800317c <HAL_RCC_GetPCLK1Freq>
 8004c36:	4602      	mov	r2, r0
 8004c38:	4613      	mov	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	009a      	lsls	r2, r3, #2
 8004c40:	441a      	add	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	fbb2 f6f3 	udiv	r6, r2, r3
 8004c4c:	f7fe fa96 	bl	800317c <HAL_RCC_GetPCLK1Freq>
 8004c50:	4602      	mov	r2, r0
 8004c52:	4613      	mov	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	009a      	lsls	r2, r3, #2
 8004c5a:	441a      	add	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c66:	4a0c      	ldr	r2, [pc, #48]	; (8004c98 <UART_SetConfig+0x22c>)
 8004c68:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6c:	095b      	lsrs	r3, r3, #5
 8004c6e:	2264      	movs	r2, #100	; 0x64
 8004c70:	fb02 f303 	mul.w	r3, r2, r3
 8004c74:	1af3      	subs	r3, r6, r3
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	3332      	adds	r3, #50	; 0x32
 8004c7a:	4a07      	ldr	r2, [pc, #28]	; (8004c98 <UART_SetConfig+0x22c>)
 8004c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c80:	095b      	lsrs	r3, r3, #5
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	442b      	add	r3, r5
 8004c88:	60a3      	str	r3, [r4, #8]
}
 8004c8a:	bf00      	nop
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c92:	bf00      	nop
 8004c94:	40013800 	.word	0x40013800
 8004c98:	51eb851f 	.word	0x51eb851f
 8004c9c:	00000000 	.word	0x00000000

08004ca0 <main>:
//WORKFLOW
//================================================================================//
uint8_t workflow = 0, lms_ = 1, wait_motor = 0, charge_complete = 0;

int main(void)
{
 8004ca0:	b5b0      	push	{r4, r5, r7, lr}
 8004ca2:	b092      	sub	sp, #72	; 0x48
 8004ca4:	af0a      	add	r7, sp, #40	; 0x28
  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004ca6:	f7fc fa35 	bl	8001114 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8004caa:	f000 fe39 	bl	8005920 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004cae:	f001 f8f7 	bl	8005ea0 <MX_GPIO_Init>
  MX_DMA_Init();
 8004cb2:	f001 f8cf 	bl	8005e54 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8004cb6:	f001 f89f 	bl	8005df8 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8004cba:	f000 fefb 	bl	8005ab4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8004cbe:	f000 ff91 	bl	8005be4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8004cc2:	f000 fffd 	bl	8005cc0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8004cc6:	f001 f849 	bl	8005d5c <MX_TIM4_Init>
  MX_ADC1_Init();
 8004cca:	f000 fe8f 	bl	80059ec <MX_ADC1_Init>

	HAL_TIM_Base_Start(&htim4);
 8004cce:	48a0      	ldr	r0, [pc, #640]	; (8004f50 <main+0x2b0>)
 8004cd0:	f7fe fb7b 	bl	80033ca <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8004cd4:	489f      	ldr	r0, [pc, #636]	; (8004f54 <main+0x2b4>)
 8004cd6:	f7fe fb92 	bl	80033fe <HAL_TIM_Base_Start_IT>
	//---Battery LED---
	HAL_GPIO_WritePin(GPIOB,Batt_lvl_1_Pin,GPIO_PIN_SET);
 8004cda:	2201      	movs	r2, #1
 8004cdc:	2108      	movs	r1, #8
 8004cde:	489e      	ldr	r0, [pc, #632]	; (8004f58 <main+0x2b8>)
 8004ce0:	f7fd fe6f 	bl	80029c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Batt_lvl_2_Pin,GPIO_PIN_SET);
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	2110      	movs	r1, #16
 8004ce8:	489b      	ldr	r0, [pc, #620]	; (8004f58 <main+0x2b8>)
 8004cea:	f7fd fe6a 	bl	80029c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Batt_lvl_3_Pin,GPIO_PIN_SET);
 8004cee:	2201      	movs	r2, #1
 8004cf0:	2120      	movs	r1, #32
 8004cf2:	4899      	ldr	r0, [pc, #612]	; (8004f58 <main+0x2b8>)
 8004cf4:	f7fd fe65 	bl	80029c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Batt_lvl_4_Pin,GPIO_PIN_SET);
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	2140      	movs	r1, #64	; 0x40
 8004cfc:	4896      	ldr	r0, [pc, #600]	; (8004f58 <main+0x2b8>)
 8004cfe:	f7fd fe60 	bl	80029c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Batt_lvl_5_Pin,GPIO_PIN_SET);
 8004d02:	2201      	movs	r2, #1
 8004d04:	2180      	movs	r1, #128	; 0x80
 8004d06:	4894      	ldr	r0, [pc, #592]	; (8004f58 <main+0x2b8>)
 8004d08:	f7fd fe5b 	bl	80029c2 <HAL_GPIO_WritePin>

	//---Error Light---//0 = off
	Error_Off;
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d12:	4891      	ldr	r0, [pc, #580]	; (8004f58 <main+0x2b8>)
 8004d14:	f7fd fe55 	bl	80029c2 <HAL_GPIO_WritePin>
	//---Operator Light---//0 = off
	Operator_Off;
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004d1e:	488e      	ldr	r0, [pc, #568]	; (8004f58 <main+0x2b8>)
 8004d20:	f7fd fe4f 	bl	80029c2 <HAL_GPIO_WritePin>
	//---Buzzer---//0 = off
	Buzzer_Off;
 8004d24:	2200      	movs	r2, #0
 8004d26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d2a:	488b      	ldr	r0, [pc, #556]	; (8004f58 <main+0x2b8>)
 8004d2c:	f7fd fe49 	bl	80029c2 <HAL_GPIO_WritePin>

	//---Charge---//0 = off
	Charge_Disable;
 8004d30:	2200      	movs	r2, #0
 8004d32:	2101      	movs	r1, #1
 8004d34:	4888      	ldr	r0, [pc, #544]	; (8004f58 <main+0x2b8>)
 8004d36:	f7fd fe44 	bl	80029c2 <HAL_GPIO_WritePin>
	//---Motor---//0 = off
	Motor_Off();
 8004d3a:	f000 fcf9 	bl	8005730 <Motor_Off>

	//---UART DMA---
	len = sizeof(receive_data)/sizeof(receive_data[0]);
 8004d3e:	4b87      	ldr	r3, [pc, #540]	; (8004f5c <main+0x2bc>)
 8004d40:	2206      	movs	r2, #6
 8004d42:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart1,receive_data,len);
 8004d44:	4b85      	ldr	r3, [pc, #532]	; (8004f5c <main+0x2bc>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	4984      	ldr	r1, [pc, #528]	; (8004f60 <main+0x2c0>)
 8004d4e:	4885      	ldr	r0, [pc, #532]	; (8004f64 <main+0x2c4>)
 8004d50:	f7ff fb2c 	bl	80043ac <HAL_UART_Receive_DMA>

	//---ADC DMA---
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*) adc1_value,3);
 8004d54:	2203      	movs	r2, #3
 8004d56:	4984      	ldr	r1, [pc, #528]	; (8004f68 <main+0x2c8>)
 8004d58:	4884      	ldr	r0, [pc, #528]	; (8004f6c <main+0x2cc>)
 8004d5a:	f7fc fb2d 	bl	80013b8 <HAL_ADC_Start_DMA>
	HAL_Delay(1000);
 8004d5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d62:	f7fc fa21 	bl	80011a8 <HAL_Delay>

  /* USER CODE BEGIN WHILE */
  while (1)
  {
		//Get DMA data
		get_data();
 8004d66:	f000 fcf5 	bl	8005754 <get_data>

		//Auto restart if temp too high
		if (adc1_value_temp >= 90){
 8004d6a:	4b81      	ldr	r3, [pc, #516]	; (8004f70 <main+0x2d0>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b59      	cmp	r3, #89	; 0x59
 8004d70:	dd5d      	ble.n	8004e2e <main+0x18e>
						snprintf((char*)buffer, sizeof buffer\
 8004d72:	4b7f      	ldr	r3, [pc, #508]	; (8004f70 <main+0x2d0>)
 8004d74:	681d      	ldr	r5, [r3, #0]
 8004d76:	4b7f      	ldr	r3, [pc, #508]	; (8004f74 <main+0x2d4>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fb fbb8 	bl	80004f0 <__aeabi_f2d>
 8004d80:	4603      	mov	r3, r0
 8004d82:	460c      	mov	r4, r1
 8004d84:	4a7c      	ldr	r2, [pc, #496]	; (8004f78 <main+0x2d8>)
 8004d86:	9208      	str	r2, [sp, #32]
 8004d88:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004d8c:	4b7b      	ldr	r3, [pc, #492]	; (8004f7c <main+0x2dc>)
 8004d8e:	9305      	str	r3, [sp, #20]
 8004d90:	9504      	str	r5, [sp, #16]
 8004d92:	4b7b      	ldr	r3, [pc, #492]	; (8004f80 <main+0x2e0>)
 8004d94:	9303      	str	r3, [sp, #12]
 8004d96:	f641 335d 	movw	r3, #7005	; 0x1b5d
 8004d9a:	9302      	str	r3, [sp, #8]
 8004d9c:	4b79      	ldr	r3, [pc, #484]	; (8004f84 <main+0x2e4>)
 8004d9e:	9301      	str	r3, [sp, #4]
 8004da0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	4b78      	ldr	r3, [pc, #480]	; (8004f88 <main+0x2e8>)
 8004da8:	4a78      	ldr	r2, [pc, #480]	; (8004f8c <main+0x2ec>)
 8004daa:	2164      	movs	r1, #100	; 0x64
 8004dac:	4878      	ldr	r0, [pc, #480]	; (8004f90 <main+0x2f0>)
 8004dae:	f001 fbb3 	bl	8006518 <sniprintf>
						,"%s%d%s%d%s%d%s%.1f%s"\
						,"{\"id\":",Station_ID,",\"status\":",Charge_reset,",\"temp\":",adc1_value_temp,",\"batt\":",adc1_value_batt,"}\n");//r
						HAL_UART_Transmit_IT(&huart1,buffer, sizeof buffer);
 8004db2:	2264      	movs	r2, #100	; 0x64
 8004db4:	4976      	ldr	r1, [pc, #472]	; (8004f90 <main+0x2f0>)
 8004db6:	486b      	ldr	r0, [pc, #428]	; (8004f64 <main+0x2c4>)
 8004db8:	f7ff fab4 	bl	8004324 <HAL_UART_Transmit_IT>
						Charge_Disable;
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	4865      	ldr	r0, [pc, #404]	; (8004f58 <main+0x2b8>)
 8004dc2:	f7fd fdfe 	bl	80029c2 <HAL_GPIO_WritePin>
						Motor_Backward();
 8004dc6:	f000 fca1 	bl	800570c <Motor_Backward>
						while(wait_motor <= 100){
 8004dca:	e009      	b.n	8004de0 <main+0x140>
							delay_us(50000);
 8004dcc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004dd0:	f000 fd90 	bl	80058f4 <delay_us>
							wait_motor++;
 8004dd4:	4b6f      	ldr	r3, [pc, #444]	; (8004f94 <main+0x2f4>)
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	4b6d      	ldr	r3, [pc, #436]	; (8004f94 <main+0x2f4>)
 8004dde:	701a      	strb	r2, [r3, #0]
						while(wait_motor <= 100){
 8004de0:	4b6c      	ldr	r3, [pc, #432]	; (8004f94 <main+0x2f4>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2b64      	cmp	r3, #100	; 0x64
 8004de6:	d9f1      	bls.n	8004dcc <main+0x12c>
						}
						for (int i=0; i<len; i++) receive_data[i] = '\0';
 8004de8:	2300      	movs	r3, #0
 8004dea:	61fb      	str	r3, [r7, #28]
 8004dec:	e007      	b.n	8004dfe <main+0x15e>
 8004dee:	4a5c      	ldr	r2, [pc, #368]	; (8004f60 <main+0x2c0>)
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	4413      	add	r3, r2
 8004df4:	2200      	movs	r2, #0
 8004df6:	701a      	strb	r2, [r3, #0]
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	61fb      	str	r3, [r7, #28]
 8004dfe:	4b57      	ldr	r3, [pc, #348]	; (8004f5c <main+0x2bc>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	461a      	mov	r2, r3
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	dcf1      	bgt.n	8004dee <main+0x14e>
						data_complete = 0;
 8004e0a:	4b63      	ldr	r3, [pc, #396]	; (8004f98 <main+0x2f8>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	701a      	strb	r2, [r3, #0]
						workflow = State_1;
 8004e10:	4b62      	ldr	r3, [pc, #392]	; (8004f9c <main+0x2fc>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	701a      	strb	r2, [r3, #0]
						Error_On;
 8004e16:	2201      	movs	r2, #1
 8004e18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e1c:	484e      	ldr	r0, [pc, #312]	; (8004f58 <main+0x2b8>)
 8004e1e:	f7fd fdd0 	bl	80029c2 <HAL_GPIO_WritePin>
						Operator_Off;
 8004e22:	2200      	movs	r2, #0
 8004e24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e28:	484b      	ldr	r0, [pc, #300]	; (8004f58 <main+0x2b8>)
 8004e2a:	f7fd fdca 	bl	80029c2 <HAL_GPIO_WritePin>
		}

		//Response to server while waiting
		if ((data_complete == 1)&&(data_id == Waiting)&&(workflow == State_1)){
 8004e2e:	4b5a      	ldr	r3, [pc, #360]	; (8004f98 <main+0x2f8>)
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d14f      	bne.n	8004ed6 <main+0x236>
 8004e36:	4b5a      	ldr	r3, [pc, #360]	; (8004fa0 <main+0x300>)
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	f241 7270 	movw	r2, #6000	; 0x1770
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d149      	bne.n	8004ed6 <main+0x236>
 8004e42:	4b56      	ldr	r3, [pc, #344]	; (8004f9c <main+0x2fc>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d145      	bne.n	8004ed6 <main+0x236>
			snprintf((char*)buffer, sizeof buffer\
 8004e4a:	4b49      	ldr	r3, [pc, #292]	; (8004f70 <main+0x2d0>)
 8004e4c:	681d      	ldr	r5, [r3, #0]
 8004e4e:	4b49      	ldr	r3, [pc, #292]	; (8004f74 <main+0x2d4>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fb fb4c 	bl	80004f0 <__aeabi_f2d>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	4a46      	ldr	r2, [pc, #280]	; (8004f78 <main+0x2d8>)
 8004e5e:	9208      	str	r2, [sp, #32]
 8004e60:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004e64:	4b45      	ldr	r3, [pc, #276]	; (8004f7c <main+0x2dc>)
 8004e66:	9305      	str	r3, [sp, #20]
 8004e68:	9504      	str	r5, [sp, #16]
 8004e6a:	4b45      	ldr	r3, [pc, #276]	; (8004f80 <main+0x2e0>)
 8004e6c:	9303      	str	r3, [sp, #12]
 8004e6e:	f641 3358 	movw	r3, #7000	; 0x1b58
 8004e72:	9302      	str	r3, [sp, #8]
 8004e74:	4b43      	ldr	r3, [pc, #268]	; (8004f84 <main+0x2e4>)
 8004e76:	9301      	str	r3, [sp, #4]
 8004e78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	4b42      	ldr	r3, [pc, #264]	; (8004f88 <main+0x2e8>)
 8004e80:	4a42      	ldr	r2, [pc, #264]	; (8004f8c <main+0x2ec>)
 8004e82:	2164      	movs	r1, #100	; 0x64
 8004e84:	4842      	ldr	r0, [pc, #264]	; (8004f90 <main+0x2f0>)
 8004e86:	f001 fb47 	bl	8006518 <sniprintf>
				,"%s%d%s%d%s%d%s%.1f%s"\
				,"{\"id\":",Station_ID,",\"status\":",Charge_waiting,",\"temp\":",adc1_value_temp,",\"batt\":",adc1_value_batt,"}\n");//r
			HAL_UART_Transmit_IT(&huart1,buffer, sizeof buffer);
 8004e8a:	2264      	movs	r2, #100	; 0x64
 8004e8c:	4940      	ldr	r1, [pc, #256]	; (8004f90 <main+0x2f0>)
 8004e8e:	4835      	ldr	r0, [pc, #212]	; (8004f64 <main+0x2c4>)
 8004e90:	f7ff fa48 	bl	8004324 <HAL_UART_Transmit_IT>
			for (int i=0; i<len; i++) receive_data[i] = '\0';
 8004e94:	2300      	movs	r3, #0
 8004e96:	61bb      	str	r3, [r7, #24]
 8004e98:	e007      	b.n	8004eaa <main+0x20a>
 8004e9a:	4a31      	ldr	r2, [pc, #196]	; (8004f60 <main+0x2c0>)
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	701a      	strb	r2, [r3, #0]
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	61bb      	str	r3, [r7, #24]
 8004eaa:	4b2c      	ldr	r3, [pc, #176]	; (8004f5c <main+0x2bc>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	dcf1      	bgt.n	8004e9a <main+0x1fa>
			data_complete = 0;
 8004eb6:	4b38      	ldr	r3, [pc, #224]	; (8004f98 <main+0x2f8>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	701a      	strb	r2, [r3, #0]
			//charge_complete = 0;
			Error_Off;
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ec2:	4825      	ldr	r0, [pc, #148]	; (8004f58 <main+0x2b8>)
 8004ec4:	f7fd fd7d 	bl	80029c2 <HAL_GPIO_WritePin>
			Operator_On;
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ece:	4822      	ldr	r0, [pc, #136]	; (8004f58 <main+0x2b8>)
 8004ed0:	f7fd fd77 	bl	80029c2 <HAL_GPIO_WritePin>
 8004ed4:	e1e8      	b.n	80052a8 <main+0x608>
		}
		//Response to server while starting to charge
		else if ((data_complete == 1)&&(data_id == Charge_Start)&&(workflow == State_1)){
 8004ed6:	4b30      	ldr	r3, [pc, #192]	; (8004f98 <main+0x2f8>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	f040 80c1 	bne.w	8005062 <main+0x3c2>
 8004ee0:	4b2f      	ldr	r3, [pc, #188]	; (8004fa0 <main+0x300>)
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	f241 7271 	movw	r2, #6001	; 0x1771
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	f040 80ba 	bne.w	8005062 <main+0x3c2>
 8004eee:	4b2b      	ldr	r3, [pc, #172]	; (8004f9c <main+0x2fc>)
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f040 80b5 	bne.w	8005062 <main+0x3c2>
			Motor_Forward();
 8004ef8:	f000 fbf6 	bl	80056e8 <Motor_Forward>
			//HAL_Delay(500);
			snprintf((char*)buffer, sizeof buffer\
 8004efc:	4b1c      	ldr	r3, [pc, #112]	; (8004f70 <main+0x2d0>)
 8004efe:	681d      	ldr	r5, [r3, #0]
 8004f00:	4b1c      	ldr	r3, [pc, #112]	; (8004f74 <main+0x2d4>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fb faf3 	bl	80004f0 <__aeabi_f2d>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	460c      	mov	r4, r1
 8004f0e:	4a1a      	ldr	r2, [pc, #104]	; (8004f78 <main+0x2d8>)
 8004f10:	9208      	str	r2, [sp, #32]
 8004f12:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004f16:	4b19      	ldr	r3, [pc, #100]	; (8004f7c <main+0x2dc>)
 8004f18:	9305      	str	r3, [sp, #20]
 8004f1a:	9504      	str	r5, [sp, #16]
 8004f1c:	4b18      	ldr	r3, [pc, #96]	; (8004f80 <main+0x2e0>)
 8004f1e:	9303      	str	r3, [sp, #12]
 8004f20:	f641 335c 	movw	r3, #7004	; 0x1b5c
 8004f24:	9302      	str	r3, [sp, #8]
 8004f26:	4b17      	ldr	r3, [pc, #92]	; (8004f84 <main+0x2e4>)
 8004f28:	9301      	str	r3, [sp, #4]
 8004f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	4b15      	ldr	r3, [pc, #84]	; (8004f88 <main+0x2e8>)
 8004f32:	4a16      	ldr	r2, [pc, #88]	; (8004f8c <main+0x2ec>)
 8004f34:	2164      	movs	r1, #100	; 0x64
 8004f36:	4816      	ldr	r0, [pc, #88]	; (8004f90 <main+0x2f0>)
 8004f38:	f001 faee 	bl	8006518 <sniprintf>
				,"%s%d%s%d%s%d%s%.1f%s"\
				,"{\"id\":",Station_ID,",\"status\":",Charge_prepare,",\"temp\":",adc1_value_temp,",\"batt\":",adc1_value_batt,"}\n");//r
			HAL_UART_Transmit_IT(&huart1,buffer, sizeof buffer);
 8004f3c:	2264      	movs	r2, #100	; 0x64
 8004f3e:	4914      	ldr	r1, [pc, #80]	; (8004f90 <main+0x2f0>)
 8004f40:	4808      	ldr	r0, [pc, #32]	; (8004f64 <main+0x2c4>)
 8004f42:	f7ff f9ef 	bl	8004324 <HAL_UART_Transmit_IT>
			wait_motor = 0;
 8004f46:	4b13      	ldr	r3, [pc, #76]	; (8004f94 <main+0x2f4>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	701a      	strb	r2, [r3, #0]
			while(wait_motor <= 100){
 8004f4c:	e034      	b.n	8004fb8 <main+0x318>
 8004f4e:	bf00      	nop
 8004f50:	200002ac 	.word	0x200002ac
 8004f54:	200002f4 	.word	0x200002f4
 8004f58:	40010c00 	.word	0x40010c00
 8004f5c:	20000294 	.word	0x20000294
 8004f60:	200003e8 	.word	0x200003e8
 8004f64:	200003a8 	.word	0x200003a8
 8004f68:	20000498 	.word	0x20000498
 8004f6c:	20000334 	.word	0x20000334
 8004f70:	20000284 	.word	0x20000284
 8004f74:	20000288 	.word	0x20000288
 8004f78:	08006df8 	.word	0x08006df8
 8004f7c:	08006dfc 	.word	0x08006dfc
 8004f80:	08006e08 	.word	0x08006e08
 8004f84:	08006e14 	.word	0x08006e14
 8004f88:	08006dd8 	.word	0x08006dd8
 8004f8c:	08006de0 	.word	0x08006de0
 8004f90:	200003f0 	.word	0x200003f0
 8004f94:	20000298 	.word	0x20000298
 8004f98:	20000290 	.word	0x20000290
 8004f9c:	20000297 	.word	0x20000297
 8004fa0:	20000292 	.word	0x20000292
				delay_us(50000);
 8004fa4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004fa8:	f000 fca4 	bl	80058f4 <delay_us>
				wait_motor++;
 8004fac:	4b9c      	ldr	r3, [pc, #624]	; (8005220 <main+0x580>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	4b9a      	ldr	r3, [pc, #616]	; (8005220 <main+0x580>)
 8004fb6:	701a      	strb	r2, [r3, #0]
			while(wait_motor <= 100){
 8004fb8:	4b99      	ldr	r3, [pc, #612]	; (8005220 <main+0x580>)
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b64      	cmp	r3, #100	; 0x64
 8004fbe:	d9f1      	bls.n	8004fa4 <main+0x304>
			}

			if (HAL_GPIO_ReadPin(GPIOB,Charge_LMS_Pin) == 1){
 8004fc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004fc4:	4897      	ldr	r0, [pc, #604]	; (8005224 <main+0x584>)
 8004fc6:	f7fd fce5 	bl	8002994 <HAL_GPIO_ReadPin>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d112      	bne.n	8004ff6 <main+0x356>
				lms_ = 1;
 8004fd0:	4b95      	ldr	r3, [pc, #596]	; (8005228 <main+0x588>)
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	701a      	strb	r2, [r3, #0]
				workflow = State_3;
 8004fd6:	4b95      	ldr	r3, [pc, #596]	; (800522c <main+0x58c>)
 8004fd8:	2202      	movs	r2, #2
 8004fda:	701a      	strb	r2, [r3, #0]
				Error_On;
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fe2:	4890      	ldr	r0, [pc, #576]	; (8005224 <main+0x584>)
 8004fe4:	f7fd fced 	bl	80029c2 <HAL_GPIO_WritePin>
				Operator_Off;
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004fee:	488d      	ldr	r0, [pc, #564]	; (8005224 <main+0x584>)
 8004ff0:	f7fd fce7 	bl	80029c2 <HAL_GPIO_WritePin>
 8004ff4:	e01e      	b.n	8005034 <main+0x394>
			}
			else if (HAL_GPIO_ReadPin(GPIOB,Charge_LMS_Pin) == 0){
 8004ff6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ffa:	488a      	ldr	r0, [pc, #552]	; (8005224 <main+0x584>)
 8004ffc:	f7fd fcca 	bl	8002994 <HAL_GPIO_ReadPin>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d116      	bne.n	8005034 <main+0x394>
				lms_ = 0;
 8005006:	4b88      	ldr	r3, [pc, #544]	; (8005228 <main+0x588>)
 8005008:	2200      	movs	r2, #0
 800500a:	701a      	strb	r2, [r3, #0]
				workflow = State_2;
 800500c:	4b87      	ldr	r3, [pc, #540]	; (800522c <main+0x58c>)
 800500e:	2201      	movs	r2, #1
 8005010:	701a      	strb	r2, [r3, #0]
				Charge_Enable;
 8005012:	2201      	movs	r2, #1
 8005014:	2101      	movs	r1, #1
 8005016:	4883      	ldr	r0, [pc, #524]	; (8005224 <main+0x584>)
 8005018:	f7fd fcd3 	bl	80029c2 <HAL_GPIO_WritePin>
				Error_Off;
 800501c:	2200      	movs	r2, #0
 800501e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005022:	4880      	ldr	r0, [pc, #512]	; (8005224 <main+0x584>)
 8005024:	f7fd fccd 	bl	80029c2 <HAL_GPIO_WritePin>
			  Operator_On;
 8005028:	2201      	movs	r2, #1
 800502a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800502e:	487d      	ldr	r0, [pc, #500]	; (8005224 <main+0x584>)
 8005030:	f7fd fcc7 	bl	80029c2 <HAL_GPIO_WritePin>
			}

			Motor_Off();
 8005034:	f000 fb7c 	bl	8005730 <Motor_Off>
			data_complete = 0;
 8005038:	4b7d      	ldr	r3, [pc, #500]	; (8005230 <main+0x590>)
 800503a:	2200      	movs	r2, #0
 800503c:	701a      	strb	r2, [r3, #0]
			for (int i=0; i<len; i++) receive_data[i] = '\0';
 800503e:	2300      	movs	r3, #0
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	e007      	b.n	8005054 <main+0x3b4>
 8005044:	4a7b      	ldr	r2, [pc, #492]	; (8005234 <main+0x594>)
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	4413      	add	r3, r2
 800504a:	2200      	movs	r2, #0
 800504c:	701a      	strb	r2, [r3, #0]
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	3301      	adds	r3, #1
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	4b78      	ldr	r3, [pc, #480]	; (8005238 <main+0x598>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	429a      	cmp	r2, r3
 800505e:	dcf1      	bgt.n	8005044 <main+0x3a4>
 8005060:	e122      	b.n	80052a8 <main+0x608>
		}
		//Response to server while motor error
		else if ((data_complete == 1)&&(data_id == Charging)&&(workflow == State_3)){
 8005062:	4b73      	ldr	r3, [pc, #460]	; (8005230 <main+0x590>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d143      	bne.n	80050f2 <main+0x452>
 800506a:	4b74      	ldr	r3, [pc, #464]	; (800523c <main+0x59c>)
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	f241 7272 	movw	r2, #6002	; 0x1772
 8005072:	4293      	cmp	r3, r2
 8005074:	d13d      	bne.n	80050f2 <main+0x452>
 8005076:	4b6d      	ldr	r3, [pc, #436]	; (800522c <main+0x58c>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b02      	cmp	r3, #2
 800507c:	d139      	bne.n	80050f2 <main+0x452>
			snprintf((char*)buffer, sizeof buffer\
 800507e:	4b70      	ldr	r3, [pc, #448]	; (8005240 <main+0x5a0>)
 8005080:	681d      	ldr	r5, [r3, #0]
 8005082:	4b70      	ldr	r3, [pc, #448]	; (8005244 <main+0x5a4>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f7fb fa32 	bl	80004f0 <__aeabi_f2d>
 800508c:	4603      	mov	r3, r0
 800508e:	460c      	mov	r4, r1
 8005090:	4a6d      	ldr	r2, [pc, #436]	; (8005248 <main+0x5a8>)
 8005092:	9208      	str	r2, [sp, #32]
 8005094:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005098:	4b6c      	ldr	r3, [pc, #432]	; (800524c <main+0x5ac>)
 800509a:	9305      	str	r3, [sp, #20]
 800509c:	9504      	str	r5, [sp, #16]
 800509e:	4b6c      	ldr	r3, [pc, #432]	; (8005250 <main+0x5b0>)
 80050a0:	9303      	str	r3, [sp, #12]
 80050a2:	f641 3359 	movw	r3, #7001	; 0x1b59
 80050a6:	9302      	str	r3, [sp, #8]
 80050a8:	4b6a      	ldr	r3, [pc, #424]	; (8005254 <main+0x5b4>)
 80050aa:	9301      	str	r3, [sp, #4]
 80050ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	4b69      	ldr	r3, [pc, #420]	; (8005258 <main+0x5b8>)
 80050b4:	4a69      	ldr	r2, [pc, #420]	; (800525c <main+0x5bc>)
 80050b6:	2164      	movs	r1, #100	; 0x64
 80050b8:	4869      	ldr	r0, [pc, #420]	; (8005260 <main+0x5c0>)
 80050ba:	f001 fa2d 	bl	8006518 <sniprintf>
				,"%s%d%s%d%s%d%s%.1f%s"\
				,"{\"id\":",Station_ID,",\"status\":",Charge_motor_error,",\"temp\":",adc1_value_temp,",\"batt\":",adc1_value_batt,"}\n");//r
			HAL_UART_Transmit_IT(&huart1,buffer, sizeof buffer);
 80050be:	2264      	movs	r2, #100	; 0x64
 80050c0:	4967      	ldr	r1, [pc, #412]	; (8005260 <main+0x5c0>)
 80050c2:	4868      	ldr	r0, [pc, #416]	; (8005264 <main+0x5c4>)
 80050c4:	f7ff f92e 	bl	8004324 <HAL_UART_Transmit_IT>
			for (int i=0; i<len; i++) receive_data[i] = '\0';
 80050c8:	2300      	movs	r3, #0
 80050ca:	613b      	str	r3, [r7, #16]
 80050cc:	e007      	b.n	80050de <main+0x43e>
 80050ce:	4a59      	ldr	r2, [pc, #356]	; (8005234 <main+0x594>)
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	4413      	add	r3, r2
 80050d4:	2200      	movs	r2, #0
 80050d6:	701a      	strb	r2, [r3, #0]
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	3301      	adds	r3, #1
 80050dc:	613b      	str	r3, [r7, #16]
 80050de:	4b56      	ldr	r3, [pc, #344]	; (8005238 <main+0x598>)
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	461a      	mov	r2, r3
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	dcf1      	bgt.n	80050ce <main+0x42e>
			data_complete = 0;
 80050ea:	4b51      	ldr	r3, [pc, #324]	; (8005230 <main+0x590>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	701a      	strb	r2, [r3, #0]
 80050f0:	e0da      	b.n	80052a8 <main+0x608>
		}
		//Response to server while charging
		else if ((data_complete == 1)&&(data_id == Charging)&&(workflow == State_2)){
 80050f2:	4b4f      	ldr	r3, [pc, #316]	; (8005230 <main+0x590>)
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d143      	bne.n	8005182 <main+0x4e2>
 80050fa:	4b50      	ldr	r3, [pc, #320]	; (800523c <main+0x59c>)
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	f241 7272 	movw	r2, #6002	; 0x1772
 8005102:	4293      	cmp	r3, r2
 8005104:	d13d      	bne.n	8005182 <main+0x4e2>
 8005106:	4b49      	ldr	r3, [pc, #292]	; (800522c <main+0x58c>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d139      	bne.n	8005182 <main+0x4e2>
				snprintf((char*)buffer, sizeof buffer\
 800510e:	4b4c      	ldr	r3, [pc, #304]	; (8005240 <main+0x5a0>)
 8005110:	681d      	ldr	r5, [r3, #0]
 8005112:	4b4c      	ldr	r3, [pc, #304]	; (8005244 <main+0x5a4>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f7fb f9ea 	bl	80004f0 <__aeabi_f2d>
 800511c:	4603      	mov	r3, r0
 800511e:	460c      	mov	r4, r1
 8005120:	4a49      	ldr	r2, [pc, #292]	; (8005248 <main+0x5a8>)
 8005122:	9208      	str	r2, [sp, #32]
 8005124:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005128:	4b48      	ldr	r3, [pc, #288]	; (800524c <main+0x5ac>)
 800512a:	9305      	str	r3, [sp, #20]
 800512c:	9504      	str	r5, [sp, #16]
 800512e:	4b48      	ldr	r3, [pc, #288]	; (8005250 <main+0x5b0>)
 8005130:	9303      	str	r3, [sp, #12]
 8005132:	f641 335a 	movw	r3, #7002	; 0x1b5a
 8005136:	9302      	str	r3, [sp, #8]
 8005138:	4b46      	ldr	r3, [pc, #280]	; (8005254 <main+0x5b4>)
 800513a:	9301      	str	r3, [sp, #4]
 800513c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	4b45      	ldr	r3, [pc, #276]	; (8005258 <main+0x5b8>)
 8005144:	4a45      	ldr	r2, [pc, #276]	; (800525c <main+0x5bc>)
 8005146:	2164      	movs	r1, #100	; 0x64
 8005148:	4845      	ldr	r0, [pc, #276]	; (8005260 <main+0x5c0>)
 800514a:	f001 f9e5 	bl	8006518 <sniprintf>
				,"%s%d%s%d%s%d%s%.1f%s"\
				,"{\"id\":",Station_ID,",\"status\":",Charge_charging,",\"temp\":",adc1_value_temp,",\"batt\":",adc1_value_batt,"}\n");//r

			HAL_UART_Transmit_IT(&huart1,buffer, sizeof buffer);
 800514e:	2264      	movs	r2, #100	; 0x64
 8005150:	4943      	ldr	r1, [pc, #268]	; (8005260 <main+0x5c0>)
 8005152:	4844      	ldr	r0, [pc, #272]	; (8005264 <main+0x5c4>)
 8005154:	f7ff f8e6 	bl	8004324 <HAL_UART_Transmit_IT>
			for (int i=0; i<len; i++) receive_data[i] = '\0';
 8005158:	2300      	movs	r3, #0
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	e007      	b.n	800516e <main+0x4ce>
 800515e:	4a35      	ldr	r2, [pc, #212]	; (8005234 <main+0x594>)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4413      	add	r3, r2
 8005164:	2200      	movs	r2, #0
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	3301      	adds	r3, #1
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	4b32      	ldr	r3, [pc, #200]	; (8005238 <main+0x598>)
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	429a      	cmp	r2, r3
 8005178:	dcf1      	bgt.n	800515e <main+0x4be>
			data_complete = 0;
 800517a:	4b2d      	ldr	r3, [pc, #180]	; (8005230 <main+0x590>)
 800517c:	2200      	movs	r2, #0
 800517e:	701a      	strb	r2, [r3, #0]
 8005180:	e092      	b.n	80052a8 <main+0x608>
		}
		//Reset charge station workflow
		else if ((data_complete == 1)&&(data_id == Reset_Workflow)&&(workflow != State_1)){
 8005182:	4b2b      	ldr	r3, [pc, #172]	; (8005230 <main+0x590>)
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	2b01      	cmp	r3, #1
 8005188:	f040 808e 	bne.w	80052a8 <main+0x608>
 800518c:	4b2b      	ldr	r3, [pc, #172]	; (800523c <main+0x59c>)
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	f241 7273 	movw	r2, #6003	; 0x1773
 8005194:	4293      	cmp	r3, r2
 8005196:	f040 8087 	bne.w	80052a8 <main+0x608>
 800519a:	4b24      	ldr	r3, [pc, #144]	; (800522c <main+0x58c>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 8082 	beq.w	80052a8 <main+0x608>
			snprintf((char*)buffer, sizeof buffer\
 80051a4:	4b26      	ldr	r3, [pc, #152]	; (8005240 <main+0x5a0>)
 80051a6:	681d      	ldr	r5, [r3, #0]
 80051a8:	4b26      	ldr	r3, [pc, #152]	; (8005244 <main+0x5a4>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7fb f99f 	bl	80004f0 <__aeabi_f2d>
 80051b2:	4603      	mov	r3, r0
 80051b4:	460c      	mov	r4, r1
 80051b6:	4a24      	ldr	r2, [pc, #144]	; (8005248 <main+0x5a8>)
 80051b8:	9208      	str	r2, [sp, #32]
 80051ba:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80051be:	4b23      	ldr	r3, [pc, #140]	; (800524c <main+0x5ac>)
 80051c0:	9305      	str	r3, [sp, #20]
 80051c2:	9504      	str	r5, [sp, #16]
 80051c4:	4b22      	ldr	r3, [pc, #136]	; (8005250 <main+0x5b0>)
 80051c6:	9303      	str	r3, [sp, #12]
 80051c8:	f641 335d 	movw	r3, #7005	; 0x1b5d
 80051cc:	9302      	str	r3, [sp, #8]
 80051ce:	4b21      	ldr	r3, [pc, #132]	; (8005254 <main+0x5b4>)
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	4b1f      	ldr	r3, [pc, #124]	; (8005258 <main+0x5b8>)
 80051da:	4a20      	ldr	r2, [pc, #128]	; (800525c <main+0x5bc>)
 80051dc:	2164      	movs	r1, #100	; 0x64
 80051de:	4820      	ldr	r0, [pc, #128]	; (8005260 <main+0x5c0>)
 80051e0:	f001 f99a 	bl	8006518 <sniprintf>
				,"%s%d%s%d%s%d%s%.1f%s"\
				,"{\"id\":",Station_ID,",\"status\":",Charge_reset,",\"temp\":",adc1_value_temp,",\"batt\":",adc1_value_batt,"}\n");//r
			HAL_UART_Transmit_IT(&huart1,buffer, sizeof buffer);
 80051e4:	2264      	movs	r2, #100	; 0x64
 80051e6:	491e      	ldr	r1, [pc, #120]	; (8005260 <main+0x5c0>)
 80051e8:	481e      	ldr	r0, [pc, #120]	; (8005264 <main+0x5c4>)
 80051ea:	f7ff f89b 	bl	8004324 <HAL_UART_Transmit_IT>
			Charge_Disable;
 80051ee:	2200      	movs	r2, #0
 80051f0:	2101      	movs	r1, #1
 80051f2:	480c      	ldr	r0, [pc, #48]	; (8005224 <main+0x584>)
 80051f4:	f7fd fbe5 	bl	80029c2 <HAL_GPIO_WritePin>
			Motor_Backward();
 80051f8:	f000 fa88 	bl	800570c <Motor_Backward>
			while(wait_motor <= 100){
 80051fc:	e009      	b.n	8005212 <main+0x572>
				delay_us(50000);
 80051fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005202:	f000 fb77 	bl	80058f4 <delay_us>
				wait_motor++;
 8005206:	4b06      	ldr	r3, [pc, #24]	; (8005220 <main+0x580>)
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	3301      	adds	r3, #1
 800520c:	b2da      	uxtb	r2, r3
 800520e:	4b04      	ldr	r3, [pc, #16]	; (8005220 <main+0x580>)
 8005210:	701a      	strb	r2, [r3, #0]
			while(wait_motor <= 100){
 8005212:	4b03      	ldr	r3, [pc, #12]	; (8005220 <main+0x580>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	2b64      	cmp	r3, #100	; 0x64
 8005218:	d9f1      	bls.n	80051fe <main+0x55e>
			}
			for (int i=0; i<len; i++) receive_data[i] = '\0';
 800521a:	2300      	movs	r3, #0
 800521c:	60bb      	str	r3, [r7, #8]
 800521e:	e02b      	b.n	8005278 <main+0x5d8>
 8005220:	20000298 	.word	0x20000298
 8005224:	40010c00 	.word	0x40010c00
 8005228:	200001fc 	.word	0x200001fc
 800522c:	20000297 	.word	0x20000297
 8005230:	20000290 	.word	0x20000290
 8005234:	200003e8 	.word	0x200003e8
 8005238:	20000294 	.word	0x20000294
 800523c:	20000292 	.word	0x20000292
 8005240:	20000284 	.word	0x20000284
 8005244:	20000288 	.word	0x20000288
 8005248:	08006df8 	.word	0x08006df8
 800524c:	08006dfc 	.word	0x08006dfc
 8005250:	08006e08 	.word	0x08006e08
 8005254:	08006e14 	.word	0x08006e14
 8005258:	08006dd8 	.word	0x08006dd8
 800525c:	08006de0 	.word	0x08006de0
 8005260:	200003f0 	.word	0x200003f0
 8005264:	200003a8 	.word	0x200003a8
 8005268:	4a59      	ldr	r2, [pc, #356]	; (80053d0 <main+0x730>)
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	4413      	add	r3, r2
 800526e:	2200      	movs	r2, #0
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	3301      	adds	r3, #1
 8005276:	60bb      	str	r3, [r7, #8]
 8005278:	4b56      	ldr	r3, [pc, #344]	; (80053d4 <main+0x734>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	461a      	mov	r2, r3
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	429a      	cmp	r2, r3
 8005282:	dcf1      	bgt.n	8005268 <main+0x5c8>
			data_complete = 0;
 8005284:	4b54      	ldr	r3, [pc, #336]	; (80053d8 <main+0x738>)
 8005286:	2200      	movs	r2, #0
 8005288:	701a      	strb	r2, [r3, #0]
			workflow = State_1;
 800528a:	4b54      	ldr	r3, [pc, #336]	; (80053dc <main+0x73c>)
 800528c:	2200      	movs	r2, #0
 800528e:	701a      	strb	r2, [r3, #0]
			Error_Off;
 8005290:	2200      	movs	r2, #0
 8005292:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005296:	4852      	ldr	r0, [pc, #328]	; (80053e0 <main+0x740>)
 8005298:	f7fd fb93 	bl	80029c2 <HAL_GPIO_WritePin>
			Operator_On;
 800529c:	2201      	movs	r2, #1
 800529e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052a2:	484f      	ldr	r0, [pc, #316]	; (80053e0 <main+0x740>)
 80052a4:	f7fd fb8d 	bl	80029c2 <HAL_GPIO_WritePin>
		}

		//Full condition
		if ((workflow == State_2)&&(adc1_value_batt >= 29.3)){
 80052a8:	4b4c      	ldr	r3, [pc, #304]	; (80053dc <main+0x73c>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d162      	bne.n	8005376 <main+0x6d6>
 80052b0:	4b4c      	ldr	r3, [pc, #304]	; (80053e4 <main+0x744>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fb f91b 	bl	80004f0 <__aeabi_f2d>
 80052ba:	a343      	add	r3, pc, #268	; (adr r3, 80053c8 <main+0x728>)
 80052bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c0:	f7fb fbf0 	bl	8000aa4 <__aeabi_dcmpge>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d055      	beq.n	8005376 <main+0x6d6>
			Charge_Disable;
 80052ca:	2200      	movs	r2, #0
 80052cc:	2101      	movs	r1, #1
 80052ce:	4844      	ldr	r0, [pc, #272]	; (80053e0 <main+0x740>)
 80052d0:	f7fd fb77 	bl	80029c2 <HAL_GPIO_WritePin>
			snprintf((char*)buffer, sizeof buffer\
 80052d4:	4b44      	ldr	r3, [pc, #272]	; (80053e8 <main+0x748>)
 80052d6:	681d      	ldr	r5, [r3, #0]
 80052d8:	4b42      	ldr	r3, [pc, #264]	; (80053e4 <main+0x744>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fb f907 	bl	80004f0 <__aeabi_f2d>
 80052e2:	4603      	mov	r3, r0
 80052e4:	460c      	mov	r4, r1
 80052e6:	4a41      	ldr	r2, [pc, #260]	; (80053ec <main+0x74c>)
 80052e8:	9208      	str	r2, [sp, #32]
 80052ea:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80052ee:	4b40      	ldr	r3, [pc, #256]	; (80053f0 <main+0x750>)
 80052f0:	9305      	str	r3, [sp, #20]
 80052f2:	9504      	str	r5, [sp, #16]
 80052f4:	4b3f      	ldr	r3, [pc, #252]	; (80053f4 <main+0x754>)
 80052f6:	9303      	str	r3, [sp, #12]
 80052f8:	f641 335b 	movw	r3, #7003	; 0x1b5b
 80052fc:	9302      	str	r3, [sp, #8]
 80052fe:	4b3e      	ldr	r3, [pc, #248]	; (80053f8 <main+0x758>)
 8005300:	9301      	str	r3, [sp, #4]
 8005302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005306:	9300      	str	r3, [sp, #0]
 8005308:	4b3c      	ldr	r3, [pc, #240]	; (80053fc <main+0x75c>)
 800530a:	4a3d      	ldr	r2, [pc, #244]	; (8005400 <main+0x760>)
 800530c:	2164      	movs	r1, #100	; 0x64
 800530e:	483d      	ldr	r0, [pc, #244]	; (8005404 <main+0x764>)
 8005310:	f001 f902 	bl	8006518 <sniprintf>
				,"%s%d%s%d%s%d%s%.1f%s"\
				,"{\"id\":",Station_ID,",\"status\":",Charge_full,",\"temp\":",adc1_value_temp,",\"batt\":",adc1_value_batt,"}\n");//r
			HAL_UART_Transmit_IT(&huart1,buffer, sizeof buffer);
 8005314:	2264      	movs	r2, #100	; 0x64
 8005316:	493b      	ldr	r1, [pc, #236]	; (8005404 <main+0x764>)
 8005318:	483b      	ldr	r0, [pc, #236]	; (8005408 <main+0x768>)
 800531a:	f7ff f803 	bl	8004324 <HAL_UART_Transmit_IT>
			for (int i=0; i<len; i++) receive_data[i] = '\0';
 800531e:	2300      	movs	r3, #0
 8005320:	607b      	str	r3, [r7, #4]
 8005322:	e007      	b.n	8005334 <main+0x694>
 8005324:	4a2a      	ldr	r2, [pc, #168]	; (80053d0 <main+0x730>)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4413      	add	r3, r2
 800532a:	2200      	movs	r2, #0
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3301      	adds	r3, #1
 8005332:	607b      	str	r3, [r7, #4]
 8005334:	4b27      	ldr	r3, [pc, #156]	; (80053d4 <main+0x734>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	461a      	mov	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	429a      	cmp	r2, r3
 800533e:	dcf1      	bgt.n	8005324 <main+0x684>
			data_complete = 0;
 8005340:	4b25      	ldr	r3, [pc, #148]	; (80053d8 <main+0x738>)
 8005342:	2200      	movs	r2, #0
 8005344:	701a      	strb	r2, [r3, #0]

			delay_us(5000);
 8005346:	f241 3088 	movw	r0, #5000	; 0x1388
 800534a:	f000 fad3 	bl	80058f4 <delay_us>
			Motor_Backward();
 800534e:	f000 f9dd 	bl	800570c <Motor_Backward>
			wait_motor = 0;
 8005352:	4b2e      	ldr	r3, [pc, #184]	; (800540c <main+0x76c>)
 8005354:	2200      	movs	r2, #0
 8005356:	701a      	strb	r2, [r3, #0]
			while(wait_motor <= 100){
 8005358:	e009      	b.n	800536e <main+0x6ce>
				delay_us(50000);
 800535a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800535e:	f000 fac9 	bl	80058f4 <delay_us>
				wait_motor++;
 8005362:	4b2a      	ldr	r3, [pc, #168]	; (800540c <main+0x76c>)
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	3301      	adds	r3, #1
 8005368:	b2da      	uxtb	r2, r3
 800536a:	4b28      	ldr	r3, [pc, #160]	; (800540c <main+0x76c>)
 800536c:	701a      	strb	r2, [r3, #0]
			while(wait_motor <= 100){
 800536e:	4b27      	ldr	r3, [pc, #156]	; (800540c <main+0x76c>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b64      	cmp	r3, #100	; 0x64
 8005374:	d9f1      	bls.n	800535a <main+0x6ba>
			}
		}

		//while charging show battery lvl
		if (workflow == State_2)
 8005376:	4b19      	ldr	r3, [pc, #100]	; (80053dc <main+0x73c>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d102      	bne.n	8005384 <main+0x6e4>
			battery_indicator();
 800537e:	f000 f8eb 	bl	8005558 <battery_indicator>
 8005382:	e4f0      	b.n	8004d66 <main+0xc6>
		else if(workflow != State_2){
 8005384:	4b15      	ldr	r3, [pc, #84]	; (80053dc <main+0x73c>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b01      	cmp	r3, #1
 800538a:	f43f acec 	beq.w	8004d66 <main+0xc6>
			HAL_GPIO_WritePin(GPIOB,Batt_lvl_1_Pin,GPIO_PIN_SET);
 800538e:	2201      	movs	r2, #1
 8005390:	2108      	movs	r1, #8
 8005392:	4813      	ldr	r0, [pc, #76]	; (80053e0 <main+0x740>)
 8005394:	f7fd fb15 	bl	80029c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,Batt_lvl_2_Pin,GPIO_PIN_SET);
 8005398:	2201      	movs	r2, #1
 800539a:	2110      	movs	r1, #16
 800539c:	4810      	ldr	r0, [pc, #64]	; (80053e0 <main+0x740>)
 800539e:	f7fd fb10 	bl	80029c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,Batt_lvl_3_Pin,GPIO_PIN_SET);
 80053a2:	2201      	movs	r2, #1
 80053a4:	2120      	movs	r1, #32
 80053a6:	480e      	ldr	r0, [pc, #56]	; (80053e0 <main+0x740>)
 80053a8:	f7fd fb0b 	bl	80029c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,Batt_lvl_4_Pin,GPIO_PIN_SET);
 80053ac:	2201      	movs	r2, #1
 80053ae:	2140      	movs	r1, #64	; 0x40
 80053b0:	480b      	ldr	r0, [pc, #44]	; (80053e0 <main+0x740>)
 80053b2:	f7fd fb06 	bl	80029c2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,Batt_lvl_5_Pin,GPIO_PIN_SET);
 80053b6:	2201      	movs	r2, #1
 80053b8:	2180      	movs	r1, #128	; 0x80
 80053ba:	4809      	ldr	r0, [pc, #36]	; (80053e0 <main+0x740>)
 80053bc:	f7fd fb01 	bl	80029c2 <HAL_GPIO_WritePin>
		get_data();
 80053c0:	e4d1      	b.n	8004d66 <main+0xc6>
 80053c2:	bf00      	nop
 80053c4:	f3af 8000 	nop.w
 80053c8:	cccccccd 	.word	0xcccccccd
 80053cc:	403d4ccc 	.word	0x403d4ccc
 80053d0:	200003e8 	.word	0x200003e8
 80053d4:	20000294 	.word	0x20000294
 80053d8:	20000290 	.word	0x20000290
 80053dc:	20000297 	.word	0x20000297
 80053e0:	40010c00 	.word	0x40010c00
 80053e4:	20000288 	.word	0x20000288
 80053e8:	20000284 	.word	0x20000284
 80053ec:	08006df8 	.word	0x08006df8
 80053f0:	08006dfc 	.word	0x08006dfc
 80053f4:	08006e08 	.word	0x08006e08
 80053f8:	08006e14 	.word	0x08006e14
 80053fc:	08006dd8 	.word	0x08006dd8
 8005400:	08006de0 	.word	0x08006de0
 8005404:	200003f0 	.word	0x200003f0
 8005408:	200003a8 	.word	0x200003a8
 800540c:	20000298 	.word	0x20000298

08005410 <HAL_TIM_PeriodElapsedCallback>:
}

/** System Clock Configuration
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005410:	b5b0      	push	{r4, r5, r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
	if (htim->Instance==htim3.Instance)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	4b44      	ldr	r3, [pc, #272]	; (8005530 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	429a      	cmp	r2, r3
 8005422:	d173      	bne.n	800550c <HAL_TIM_PeriodElapsedCallback+0xfc>
	{
		//Battery calc
		adc1_value_batt = adc1_value[0]*0.007531f;
 8005424:	4b43      	ldr	r3, [pc, #268]	; (8005534 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	b29b      	uxth	r3, r3
 800542a:	4618      	mov	r0, r3
 800542c:	f7fb fc58 	bl	8000ce0 <__aeabi_i2f>
 8005430:	4603      	mov	r3, r0
 8005432:	4941      	ldr	r1, [pc, #260]	; (8005538 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8005434:	4618      	mov	r0, r3
 8005436:	f7fb fca7 	bl	8000d88 <__aeabi_fmul>
 800543a:	4603      	mov	r3, r0
 800543c:	461a      	mov	r2, r3
 800543e:	4b3f      	ldr	r3, [pc, #252]	; (800553c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8005440:	601a      	str	r2, [r3, #0]

		//Temp of charge station
		NTC_value = (10.89 * adc1_value[1])/(13513.5 - (3.3 * adc1_value[1]));
 8005442:	4b3c      	ldr	r3, [pc, #240]	; (8005534 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8005444:	885b      	ldrh	r3, [r3, #2]
 8005446:	b29b      	uxth	r3, r3
 8005448:	4618      	mov	r0, r3
 800544a:	f7fb f83f 	bl	80004cc <__aeabi_i2d>
 800544e:	a332      	add	r3, pc, #200	; (adr r3, 8005518 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8005450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005454:	f7fb f8a0 	bl	8000598 <__aeabi_dmul>
 8005458:	4603      	mov	r3, r0
 800545a:	460c      	mov	r4, r1
 800545c:	4625      	mov	r5, r4
 800545e:	461c      	mov	r4, r3
 8005460:	4b34      	ldr	r3, [pc, #208]	; (8005534 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8005462:	885b      	ldrh	r3, [r3, #2]
 8005464:	b29b      	uxth	r3, r3
 8005466:	4618      	mov	r0, r3
 8005468:	f7fb f830 	bl	80004cc <__aeabi_i2d>
 800546c:	a32c      	add	r3, pc, #176	; (adr r3, 8005520 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800546e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005472:	f7fb f891 	bl	8000598 <__aeabi_dmul>
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	a12b      	add	r1, pc, #172	; (adr r1, 8005528 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800547c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005480:	f7fa fed6 	bl	8000230 <__aeabi_dsub>
 8005484:	4602      	mov	r2, r0
 8005486:	460b      	mov	r3, r1
 8005488:	4620      	mov	r0, r4
 800548a:	4629      	mov	r1, r5
 800548c:	f7fb f9ae 	bl	80007ec <__aeabi_ddiv>
 8005490:	4603      	mov	r3, r0
 8005492:	460c      	mov	r4, r1
 8005494:	4618      	mov	r0, r3
 8005496:	4621      	mov	r1, r4
 8005498:	f7fb fb18 	bl	8000acc <__aeabi_d2f>
 800549c:	4602      	mov	r2, r0
 800549e:	4b28      	ldr	r3, [pc, #160]	; (8005540 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80054a0:	601a      	str	r2, [r3, #0]
		min_diff = 1000;
 80054a2:	4b28      	ldr	r3, [pc, #160]	; (8005544 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80054a4:	4a28      	ldr	r2, [pc, #160]	; (8005548 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80054a6:	601a      	str	r2, [r3, #0]
		for (int i = 0; i<126; i++){
 80054a8:	2300      	movs	r3, #0
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	e02b      	b.n	8005506 <HAL_TIM_PeriodElapsedCallback+0xf6>
			if (fabs(Temp_lookup_table[i] - NTC_value) <= min_diff){
 80054ae:	4a27      	ldr	r2, [pc, #156]	; (800554c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80054b6:	4b22      	ldr	r3, [pc, #136]	; (8005540 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4619      	mov	r1, r3
 80054bc:	4610      	mov	r0, r2
 80054be:	f7fb fb59 	bl	8000b74 <__aeabi_fsub>
 80054c2:	4603      	mov	r3, r0
 80054c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80054c8:	4b1e      	ldr	r3, [pc, #120]	; (8005544 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4619      	mov	r1, r3
 80054ce:	4610      	mov	r0, r2
 80054d0:	f7fb fe02 	bl	80010d8 <__aeabi_fcmple>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d012      	beq.n	8005500 <HAL_TIM_PeriodElapsedCallback+0xf0>
				min_diff = fabs(Temp_lookup_table[i] - NTC_value);
 80054da:	4a1c      	ldr	r2, [pc, #112]	; (800554c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80054e2:	4b17      	ldr	r3, [pc, #92]	; (8005540 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4619      	mov	r1, r3
 80054e8:	4610      	mov	r0, r2
 80054ea:	f7fb fb43 	bl	8000b74 <__aeabi_fsub>
 80054ee:	4603      	mov	r3, r0
 80054f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054f4:	4a13      	ldr	r2, [pc, #76]	; (8005544 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80054f6:	6013      	str	r3, [r2, #0]
				adc1_value_temp = i - 20;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	3b14      	subs	r3, #20
 80054fc:	4a14      	ldr	r2, [pc, #80]	; (8005550 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80054fe:	6013      	str	r3, [r2, #0]
		for (int i = 0; i<126; i++){
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	3301      	adds	r3, #1
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2b7d      	cmp	r3, #125	; 0x7d
 800550a:	ddd0      	ble.n	80054ae <HAL_TIM_PeriodElapsedCallback+0x9e>
			}
		}
	}
}
 800550c:	bf00      	nop
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bdb0      	pop	{r4, r5, r7, pc}
 8005514:	f3af 8000 	nop.w
 8005518:	147ae148 	.word	0x147ae148
 800551c:	4025c7ae 	.word	0x4025c7ae
 8005520:	66666666 	.word	0x66666666
 8005524:	400a6666 	.word	0x400a6666
 8005528:	00000000 	.word	0x00000000
 800552c:	40ca64c0 	.word	0x40ca64c0
 8005530:	200002f4 	.word	0x200002f4
 8005534:	20000498 	.word	0x20000498
 8005538:	3bf6c69b 	.word	0x3bf6c69b
 800553c:	20000288 	.word	0x20000288
 8005540:	2000028c 	.word	0x2000028c
 8005544:	20000000 	.word	0x20000000
 8005548:	447a0000 	.word	0x447a0000
 800554c:	20000004 	.word	0x20000004
 8005550:	20000284 	.word	0x20000284
 8005554:	00000000 	.word	0x00000000

08005558 <battery_indicator>:

void battery_indicator(void){
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
	//adc1_value_batt = adc1_value[0]*0.007531f;

	if (adc1_value_batt < 26){
 800555c:	4b5c      	ldr	r3, [pc, #368]	; (80056d0 <battery_indicator+0x178>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	495c      	ldr	r1, [pc, #368]	; (80056d4 <battery_indicator+0x17c>)
 8005562:	4618      	mov	r0, r3
 8005564:	f7fb fdae 	bl	80010c4 <__aeabi_fcmplt>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d019      	beq.n	80055a2 <battery_indicator+0x4a>
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_1_Pin,GPIO_PIN_RESET);
 800556e:	2200      	movs	r2, #0
 8005570:	2108      	movs	r1, #8
 8005572:	4859      	ldr	r0, [pc, #356]	; (80056d8 <battery_indicator+0x180>)
 8005574:	f7fd fa25 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_2_Pin,GPIO_PIN_SET);
 8005578:	2201      	movs	r2, #1
 800557a:	2110      	movs	r1, #16
 800557c:	4856      	ldr	r0, [pc, #344]	; (80056d8 <battery_indicator+0x180>)
 800557e:	f7fd fa20 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_3_Pin,GPIO_PIN_SET);
 8005582:	2201      	movs	r2, #1
 8005584:	2120      	movs	r1, #32
 8005586:	4854      	ldr	r0, [pc, #336]	; (80056d8 <battery_indicator+0x180>)
 8005588:	f7fd fa1b 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_4_Pin,GPIO_PIN_SET);
 800558c:	2201      	movs	r2, #1
 800558e:	2140      	movs	r1, #64	; 0x40
 8005590:	4851      	ldr	r0, [pc, #324]	; (80056d8 <battery_indicator+0x180>)
 8005592:	f7fd fa16 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_5_Pin,GPIO_PIN_SET);
 8005596:	2201      	movs	r2, #1
 8005598:	2180      	movs	r1, #128	; 0x80
 800559a:	484f      	ldr	r0, [pc, #316]	; (80056d8 <battery_indicator+0x180>)
 800559c:	f7fd fa11 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_2_Pin,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_3_Pin,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_4_Pin,GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_5_Pin,GPIO_PIN_RESET);
	}
}
 80055a0:	e08f      	b.n	80056c2 <battery_indicator+0x16a>
	else if (adc1_value_batt < 27){
 80055a2:	4b4b      	ldr	r3, [pc, #300]	; (80056d0 <battery_indicator+0x178>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	494d      	ldr	r1, [pc, #308]	; (80056dc <battery_indicator+0x184>)
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7fb fd8b 	bl	80010c4 <__aeabi_fcmplt>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d019      	beq.n	80055e8 <battery_indicator+0x90>
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_1_Pin,GPIO_PIN_RESET);
 80055b4:	2200      	movs	r2, #0
 80055b6:	2108      	movs	r1, #8
 80055b8:	4847      	ldr	r0, [pc, #284]	; (80056d8 <battery_indicator+0x180>)
 80055ba:	f7fd fa02 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_2_Pin,GPIO_PIN_RESET);
 80055be:	2200      	movs	r2, #0
 80055c0:	2110      	movs	r1, #16
 80055c2:	4845      	ldr	r0, [pc, #276]	; (80056d8 <battery_indicator+0x180>)
 80055c4:	f7fd f9fd 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_3_Pin,GPIO_PIN_SET);
 80055c8:	2201      	movs	r2, #1
 80055ca:	2120      	movs	r1, #32
 80055cc:	4842      	ldr	r0, [pc, #264]	; (80056d8 <battery_indicator+0x180>)
 80055ce:	f7fd f9f8 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_4_Pin,GPIO_PIN_SET);
 80055d2:	2201      	movs	r2, #1
 80055d4:	2140      	movs	r1, #64	; 0x40
 80055d6:	4840      	ldr	r0, [pc, #256]	; (80056d8 <battery_indicator+0x180>)
 80055d8:	f7fd f9f3 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_5_Pin,GPIO_PIN_SET);
 80055dc:	2201      	movs	r2, #1
 80055de:	2180      	movs	r1, #128	; 0x80
 80055e0:	483d      	ldr	r0, [pc, #244]	; (80056d8 <battery_indicator+0x180>)
 80055e2:	f7fd f9ee 	bl	80029c2 <HAL_GPIO_WritePin>
}
 80055e6:	e06c      	b.n	80056c2 <battery_indicator+0x16a>
	else if (adc1_value_batt < 28){
 80055e8:	4b39      	ldr	r3, [pc, #228]	; (80056d0 <battery_indicator+0x178>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	493c      	ldr	r1, [pc, #240]	; (80056e0 <battery_indicator+0x188>)
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fb fd68 	bl	80010c4 <__aeabi_fcmplt>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d019      	beq.n	800562e <battery_indicator+0xd6>
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_1_Pin,GPIO_PIN_RESET);
 80055fa:	2200      	movs	r2, #0
 80055fc:	2108      	movs	r1, #8
 80055fe:	4836      	ldr	r0, [pc, #216]	; (80056d8 <battery_indicator+0x180>)
 8005600:	f7fd f9df 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_2_Pin,GPIO_PIN_RESET);
 8005604:	2200      	movs	r2, #0
 8005606:	2110      	movs	r1, #16
 8005608:	4833      	ldr	r0, [pc, #204]	; (80056d8 <battery_indicator+0x180>)
 800560a:	f7fd f9da 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_3_Pin,GPIO_PIN_RESET);
 800560e:	2200      	movs	r2, #0
 8005610:	2120      	movs	r1, #32
 8005612:	4831      	ldr	r0, [pc, #196]	; (80056d8 <battery_indicator+0x180>)
 8005614:	f7fd f9d5 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_4_Pin,GPIO_PIN_SET);
 8005618:	2201      	movs	r2, #1
 800561a:	2140      	movs	r1, #64	; 0x40
 800561c:	482e      	ldr	r0, [pc, #184]	; (80056d8 <battery_indicator+0x180>)
 800561e:	f7fd f9d0 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_5_Pin,GPIO_PIN_SET);
 8005622:	2201      	movs	r2, #1
 8005624:	2180      	movs	r1, #128	; 0x80
 8005626:	482c      	ldr	r0, [pc, #176]	; (80056d8 <battery_indicator+0x180>)
 8005628:	f7fd f9cb 	bl	80029c2 <HAL_GPIO_WritePin>
}
 800562c:	e049      	b.n	80056c2 <battery_indicator+0x16a>
	else if (adc1_value_batt < 29){
 800562e:	4b28      	ldr	r3, [pc, #160]	; (80056d0 <battery_indicator+0x178>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	492c      	ldr	r1, [pc, #176]	; (80056e4 <battery_indicator+0x18c>)
 8005634:	4618      	mov	r0, r3
 8005636:	f7fb fd45 	bl	80010c4 <__aeabi_fcmplt>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d019      	beq.n	8005674 <battery_indicator+0x11c>
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_1_Pin,GPIO_PIN_RESET);
 8005640:	2200      	movs	r2, #0
 8005642:	2108      	movs	r1, #8
 8005644:	4824      	ldr	r0, [pc, #144]	; (80056d8 <battery_indicator+0x180>)
 8005646:	f7fd f9bc 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_2_Pin,GPIO_PIN_RESET);
 800564a:	2200      	movs	r2, #0
 800564c:	2110      	movs	r1, #16
 800564e:	4822      	ldr	r0, [pc, #136]	; (80056d8 <battery_indicator+0x180>)
 8005650:	f7fd f9b7 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_3_Pin,GPIO_PIN_RESET);
 8005654:	2200      	movs	r2, #0
 8005656:	2120      	movs	r1, #32
 8005658:	481f      	ldr	r0, [pc, #124]	; (80056d8 <battery_indicator+0x180>)
 800565a:	f7fd f9b2 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_4_Pin,GPIO_PIN_RESET);
 800565e:	2200      	movs	r2, #0
 8005660:	2140      	movs	r1, #64	; 0x40
 8005662:	481d      	ldr	r0, [pc, #116]	; (80056d8 <battery_indicator+0x180>)
 8005664:	f7fd f9ad 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_5_Pin,GPIO_PIN_SET);
 8005668:	2201      	movs	r2, #1
 800566a:	2180      	movs	r1, #128	; 0x80
 800566c:	481a      	ldr	r0, [pc, #104]	; (80056d8 <battery_indicator+0x180>)
 800566e:	f7fd f9a8 	bl	80029c2 <HAL_GPIO_WritePin>
}
 8005672:	e026      	b.n	80056c2 <battery_indicator+0x16a>
	else if (adc1_value_batt >= 29.3){
 8005674:	4b16      	ldr	r3, [pc, #88]	; (80056d0 <battery_indicator+0x178>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4618      	mov	r0, r3
 800567a:	f7fa ff39 	bl	80004f0 <__aeabi_f2d>
 800567e:	a312      	add	r3, pc, #72	; (adr r3, 80056c8 <battery_indicator+0x170>)
 8005680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005684:	f7fb fa0e 	bl	8000aa4 <__aeabi_dcmpge>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d100      	bne.n	8005690 <battery_indicator+0x138>
}
 800568e:	e018      	b.n	80056c2 <battery_indicator+0x16a>
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_1_Pin,GPIO_PIN_RESET);
 8005690:	2200      	movs	r2, #0
 8005692:	2108      	movs	r1, #8
 8005694:	4810      	ldr	r0, [pc, #64]	; (80056d8 <battery_indicator+0x180>)
 8005696:	f7fd f994 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_2_Pin,GPIO_PIN_RESET);
 800569a:	2200      	movs	r2, #0
 800569c:	2110      	movs	r1, #16
 800569e:	480e      	ldr	r0, [pc, #56]	; (80056d8 <battery_indicator+0x180>)
 80056a0:	f7fd f98f 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_3_Pin,GPIO_PIN_RESET);
 80056a4:	2200      	movs	r2, #0
 80056a6:	2120      	movs	r1, #32
 80056a8:	480b      	ldr	r0, [pc, #44]	; (80056d8 <battery_indicator+0x180>)
 80056aa:	f7fd f98a 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_4_Pin,GPIO_PIN_RESET);
 80056ae:	2200      	movs	r2, #0
 80056b0:	2140      	movs	r1, #64	; 0x40
 80056b2:	4809      	ldr	r0, [pc, #36]	; (80056d8 <battery_indicator+0x180>)
 80056b4:	f7fd f985 	bl	80029c2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,Batt_lvl_5_Pin,GPIO_PIN_RESET);
 80056b8:	2200      	movs	r2, #0
 80056ba:	2180      	movs	r1, #128	; 0x80
 80056bc:	4806      	ldr	r0, [pc, #24]	; (80056d8 <battery_indicator+0x180>)
 80056be:	f7fd f980 	bl	80029c2 <HAL_GPIO_WritePin>
}
 80056c2:	bf00      	nop
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	cccccccd 	.word	0xcccccccd
 80056cc:	403d4ccc 	.word	0x403d4ccc
 80056d0:	20000288 	.word	0x20000288
 80056d4:	41d00000 	.word	0x41d00000
 80056d8:	40010c00 	.word	0x40010c00
 80056dc:	41d80000 	.word	0x41d80000
 80056e0:	41e00000 	.word	0x41e00000
 80056e4:	41e80000 	.word	0x41e80000

080056e8 <Motor_Forward>:

void Motor_Forward(void){
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,Forward_Motor_Pin,GPIO_PIN_SET);
 80056ec:	2201      	movs	r2, #1
 80056ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80056f2:	4805      	ldr	r0, [pc, #20]	; (8005708 <Motor_Forward+0x20>)
 80056f4:	f7fd f965 	bl	80029c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Backward_Motor_Pin,GPIO_PIN_RESET);
 80056f8:	2200      	movs	r2, #0
 80056fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056fe:	4802      	ldr	r0, [pc, #8]	; (8005708 <Motor_Forward+0x20>)
 8005700:	f7fd f95f 	bl	80029c2 <HAL_GPIO_WritePin>
}
 8005704:	bf00      	nop
 8005706:	bd80      	pop	{r7, pc}
 8005708:	40010c00 	.word	0x40010c00

0800570c <Motor_Backward>:

void Motor_Backward(void){
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,Forward_Motor_Pin,GPIO_PIN_RESET);
 8005710:	2200      	movs	r2, #0
 8005712:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005716:	4805      	ldr	r0, [pc, #20]	; (800572c <Motor_Backward+0x20>)
 8005718:	f7fd f953 	bl	80029c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Backward_Motor_Pin,GPIO_PIN_SET);
 800571c:	2201      	movs	r2, #1
 800571e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005722:	4802      	ldr	r0, [pc, #8]	; (800572c <Motor_Backward+0x20>)
 8005724:	f7fd f94d 	bl	80029c2 <HAL_GPIO_WritePin>
}
 8005728:	bf00      	nop
 800572a:	bd80      	pop	{r7, pc}
 800572c:	40010c00 	.word	0x40010c00

08005730 <Motor_Off>:

void Motor_Off(void){
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,Forward_Motor_Pin,GPIO_PIN_RESET);
 8005734:	2200      	movs	r2, #0
 8005736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800573a:	4805      	ldr	r0, [pc, #20]	; (8005750 <Motor_Off+0x20>)
 800573c:	f7fd f941 	bl	80029c2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,Backward_Motor_Pin,GPIO_PIN_RESET);
 8005740:	2200      	movs	r2, #0
 8005742:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005746:	4802      	ldr	r0, [pc, #8]	; (8005750 <Motor_Off+0x20>)
 8005748:	f7fd f93b 	bl	80029c2 <HAL_GPIO_WritePin>
}
 800574c:	bf00      	nop
 800574e:	bd80      	pop	{r7, pc}
 8005750:	40010c00 	.word	0x40010c00

08005754 <get_data>:

void get_data(void)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
		//find the order of data
		for (int i = 0; i<len; i++){
 800575a:	2300      	movs	r3, #0
 800575c:	617b      	str	r3, [r7, #20]
 800575e:	e00c      	b.n	800577a <get_data+0x26>
			if (receive_data[i] == 'c')
 8005760:	4a5c      	ldr	r2, [pc, #368]	; (80058d4 <get_data+0x180>)
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	4413      	add	r3, r2
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	2b63      	cmp	r3, #99	; 0x63
 800576a:	d103      	bne.n	8005774 <get_data+0x20>
				data_order = i;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	b2da      	uxtb	r2, r3
 8005770:	4b59      	ldr	r3, [pc, #356]	; (80058d8 <get_data+0x184>)
 8005772:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i<len; i++){
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	3301      	adds	r3, #1
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	4b58      	ldr	r3, [pc, #352]	; (80058dc <get_data+0x188>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	429a      	cmp	r2, r3
 8005784:	dcec      	bgt.n	8005760 <get_data+0xc>
		}

		if (data_order != 0){
 8005786:	4b54      	ldr	r3, [pc, #336]	; (80058d8 <get_data+0x184>)
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d04b      	beq.n	8005826 <get_data+0xd2>
			for (int i = 0; i<len; i++){
 800578e:	2300      	movs	r3, #0
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	e01e      	b.n	80057d2 <get_data+0x7e>
				data_reorder[i] = receive_data[data_order];
 8005794:	4b50      	ldr	r3, [pc, #320]	; (80058d8 <get_data+0x184>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	461a      	mov	r2, r3
 800579a:	4b4e      	ldr	r3, [pc, #312]	; (80058d4 <get_data+0x180>)
 800579c:	5c99      	ldrb	r1, [r3, r2]
 800579e:	4a50      	ldr	r2, [pc, #320]	; (80058e0 <get_data+0x18c>)
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	4413      	add	r3, r2
 80057a4:	460a      	mov	r2, r1
 80057a6:	701a      	strb	r2, [r3, #0]
				data_order_2 = i+1;
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	3301      	adds	r3, #1
 80057ae:	b2da      	uxtb	r2, r3
 80057b0:	4b4c      	ldr	r3, [pc, #304]	; (80058e4 <get_data+0x190>)
 80057b2:	701a      	strb	r2, [r3, #0]
				data_order++;
 80057b4:	4b48      	ldr	r3, [pc, #288]	; (80058d8 <get_data+0x184>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	3301      	adds	r3, #1
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	4b46      	ldr	r3, [pc, #280]	; (80058d8 <get_data+0x184>)
 80057be:	701a      	strb	r2, [r3, #0]
				if (data_order == len)
 80057c0:	4b45      	ldr	r3, [pc, #276]	; (80058d8 <get_data+0x184>)
 80057c2:	781a      	ldrb	r2, [r3, #0]
 80057c4:	4b45      	ldr	r3, [pc, #276]	; (80058dc <get_data+0x188>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d009      	beq.n	80057e0 <get_data+0x8c>
			for (int i = 0; i<len; i++){
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	3301      	adds	r3, #1
 80057d0:	613b      	str	r3, [r7, #16]
 80057d2:	4b42      	ldr	r3, [pc, #264]	; (80058dc <get_data+0x188>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	461a      	mov	r2, r3
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	429a      	cmp	r2, r3
 80057dc:	dcda      	bgt.n	8005794 <get_data+0x40>
 80057de:	e000      	b.n	80057e2 <get_data+0x8e>
					break;
 80057e0:	bf00      	nop
			}
			for (int i = 0; i<len; i++){
 80057e2:	2300      	movs	r3, #0
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	e017      	b.n	8005818 <get_data+0xc4>
				data_reorder[data_order_2] = receive_data[i];
 80057e8:	4b3e      	ldr	r3, [pc, #248]	; (80058e4 <get_data+0x190>)
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	4619      	mov	r1, r3
 80057ee:	4a39      	ldr	r2, [pc, #228]	; (80058d4 <get_data+0x180>)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4413      	add	r3, r2
 80057f4:	781a      	ldrb	r2, [r3, #0]
 80057f6:	4b3a      	ldr	r3, [pc, #232]	; (80058e0 <get_data+0x18c>)
 80057f8:	545a      	strb	r2, [r3, r1]
				data_order_2++;
 80057fa:	4b3a      	ldr	r3, [pc, #232]	; (80058e4 <get_data+0x190>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	3301      	adds	r3, #1
 8005800:	b2da      	uxtb	r2, r3
 8005802:	4b38      	ldr	r3, [pc, #224]	; (80058e4 <get_data+0x190>)
 8005804:	701a      	strb	r2, [r3, #0]
				if (data_order_2 == len)
 8005806:	4b37      	ldr	r3, [pc, #220]	; (80058e4 <get_data+0x190>)
 8005808:	781a      	ldrb	r2, [r3, #0]
 800580a:	4b34      	ldr	r3, [pc, #208]	; (80058dc <get_data+0x188>)
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	429a      	cmp	r2, r3
 8005810:	d01f      	beq.n	8005852 <get_data+0xfe>
			for (int i = 0; i<len; i++){
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3301      	adds	r3, #1
 8005816:	60fb      	str	r3, [r7, #12]
 8005818:	4b30      	ldr	r3, [pc, #192]	; (80058dc <get_data+0x188>)
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	461a      	mov	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	429a      	cmp	r2, r3
 8005822:	dce1      	bgt.n	80057e8 <get_data+0x94>
 8005824:	e016      	b.n	8005854 <get_data+0x100>
					break;
			}
		}
		else{
			for (int i = 0; i<len; i++){
 8005826:	2300      	movs	r3, #0
 8005828:	60bb      	str	r3, [r7, #8]
 800582a:	e00b      	b.n	8005844 <get_data+0xf0>
				data_reorder[i] = receive_data[i];
 800582c:	4a29      	ldr	r2, [pc, #164]	; (80058d4 <get_data+0x180>)
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	4413      	add	r3, r2
 8005832:	7819      	ldrb	r1, [r3, #0]
 8005834:	4a2a      	ldr	r2, [pc, #168]	; (80058e0 <get_data+0x18c>)
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	4413      	add	r3, r2
 800583a:	460a      	mov	r2, r1
 800583c:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i<len; i++){
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	3301      	adds	r3, #1
 8005842:	60bb      	str	r3, [r7, #8]
 8005844:	4b25      	ldr	r3, [pc, #148]	; (80058dc <get_data+0x188>)
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	461a      	mov	r2, r3
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	429a      	cmp	r2, r3
 800584e:	dced      	bgt.n	800582c <get_data+0xd8>
 8005850:	e000      	b.n	8005854 <get_data+0x100>
					break;
 8005852:	bf00      	nop
			}
		}

		//find the start and stop
		if ((data_reorder[0] == 'c')&&(data_reorder[5] == 'e')){
 8005854:	4b22      	ldr	r3, [pc, #136]	; (80058e0 <get_data+0x18c>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b63      	cmp	r3, #99	; 0x63
 800585a:	d136      	bne.n	80058ca <get_data+0x176>
 800585c:	4b20      	ldr	r3, [pc, #128]	; (80058e0 <get_data+0x18c>)
 800585e:	795b      	ldrb	r3, [r3, #5]
 8005860:	2b65      	cmp	r3, #101	; 0x65
 8005862:	d132      	bne.n	80058ca <get_data+0x176>
			data_complete = 1;
 8005864:	4b20      	ldr	r3, [pc, #128]	; (80058e8 <get_data+0x194>)
 8005866:	2201      	movs	r2, #1
 8005868:	701a      	strb	r2, [r3, #0]
			uint16_t dec = 1000;
 800586a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800586e:	80fb      	strh	r3, [r7, #6]
			data_id = 0;
 8005870:	4b1e      	ldr	r3, [pc, #120]	; (80058ec <get_data+0x198>)
 8005872:	2200      	movs	r2, #0
 8005874:	801a      	strh	r2, [r3, #0]
			for (int i = 1; i<len; i++){
 8005876:	2301      	movs	r3, #1
 8005878:	603b      	str	r3, [r7, #0]
 800587a:	e01e      	b.n	80058ba <get_data+0x166>
				if (data_reorder[i] == 'e') break;
 800587c:	4a18      	ldr	r2, [pc, #96]	; (80058e0 <get_data+0x18c>)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	4413      	add	r3, r2
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b65      	cmp	r3, #101	; 0x65
 8005886:	d01f      	beq.n	80058c8 <get_data+0x174>
				data_id = data_id + ((data_reorder[i] - '0')*dec);
 8005888:	4a15      	ldr	r2, [pc, #84]	; (80058e0 <get_data+0x18c>)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	4413      	add	r3, r2
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	3b30      	subs	r3, #48	; 0x30
 8005892:	b29b      	uxth	r3, r3
 8005894:	88fa      	ldrh	r2, [r7, #6]
 8005896:	fb02 f303 	mul.w	r3, r2, r3
 800589a:	b29a      	uxth	r2, r3
 800589c:	4b13      	ldr	r3, [pc, #76]	; (80058ec <get_data+0x198>)
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	4413      	add	r3, r2
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	4b11      	ldr	r3, [pc, #68]	; (80058ec <get_data+0x198>)
 80058a6:	801a      	strh	r2, [r3, #0]
				dec = dec/10;
 80058a8:	88fb      	ldrh	r3, [r7, #6]
 80058aa:	4a11      	ldr	r2, [pc, #68]	; (80058f0 <get_data+0x19c>)
 80058ac:	fba2 2303 	umull	r2, r3, r2, r3
 80058b0:	08db      	lsrs	r3, r3, #3
 80058b2:	80fb      	strh	r3, [r7, #6]
			for (int i = 1; i<len; i++){
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	3301      	adds	r3, #1
 80058b8:	603b      	str	r3, [r7, #0]
 80058ba:	4b08      	ldr	r3, [pc, #32]	; (80058dc <get_data+0x188>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	dcda      	bgt.n	800587c <get_data+0x128>
			}
		}
}
 80058c6:	e000      	b.n	80058ca <get_data+0x176>
				if (data_reorder[i] == 'e') break;
 80058c8:	bf00      	nop
}
 80058ca:	bf00      	nop
 80058cc:	371c      	adds	r7, #28
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bc80      	pop	{r7}
 80058d2:	4770      	bx	lr
 80058d4:	200003e8 	.word	0x200003e8
 80058d8:	20000295 	.word	0x20000295
 80058dc:	20000294 	.word	0x20000294
 80058e0:	200002ec 	.word	0x200002ec
 80058e4:	20000296 	.word	0x20000296
 80058e8:	20000290 	.word	0x20000290
 80058ec:	20000292 	.word	0x20000292
 80058f0:	cccccccd 	.word	0xcccccccd

080058f4 <delay_us>:

/*--------------- Delay US ------------------*/
void delay_us(uint16_t microseconds)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	4603      	mov	r3, r0
 80058fc:	80fb      	strh	r3, [r7, #6]
	TIM4->CNT = 0;
 80058fe:	4b07      	ldr	r3, [pc, #28]	; (800591c <delay_us+0x28>)
 8005900:	2200      	movs	r2, #0
 8005902:	625a      	str	r2, [r3, #36]	; 0x24
	//volatile uint16_t start = TIM1->CNT;
	while((TIM4->CNT) < microseconds);
 8005904:	bf00      	nop
 8005906:	4b05      	ldr	r3, [pc, #20]	; (800591c <delay_us+0x28>)
 8005908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800590a:	88fb      	ldrh	r3, [r7, #6]
 800590c:	429a      	cmp	r2, r3
 800590e:	d3fa      	bcc.n	8005906 <delay_us+0x12>
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	bc80      	pop	{r7}
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40000800 	.word	0x40000800

08005920 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b096      	sub	sp, #88	; 0x58
 8005924:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005926:	2301      	movs	r3, #1
 8005928:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800592a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800592e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005930:	2300      	movs	r3, #0
 8005932:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005934:	2301      	movs	r3, #1
 8005936:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005938:	2302      	movs	r3, #2
 800593a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800593c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005940:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005942:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005946:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005948:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800594c:	4618      	mov	r0, r3
 800594e:	f7fd f851 	bl	80029f4 <HAL_RCC_OscConfig>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d004      	beq.n	8005962 <SystemClock_Config+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005958:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 800595c:	4821      	ldr	r0, [pc, #132]	; (80059e4 <SystemClock_Config+0xc4>)
 800595e:	f000 fb29 	bl	8005fb4 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005962:	230f      	movs	r3, #15
 8005964:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005966:	2302      	movs	r3, #2
 8005968:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800596a:	2300      	movs	r3, #0
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800596e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005972:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005974:	2300      	movs	r3, #0
 8005976:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005978:	f107 031c 	add.w	r3, r7, #28
 800597c:	2102      	movs	r1, #2
 800597e:	4618      	mov	r0, r3
 8005980:	f7fd fa9c 	bl	8002ebc <HAL_RCC_ClockConfig>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d004      	beq.n	8005994 <SystemClock_Config+0x74>
  {
    _Error_Handler(__FILE__, __LINE__);
 800598a:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800598e:	4815      	ldr	r0, [pc, #84]	; (80059e4 <SystemClock_Config+0xc4>)
 8005990:	f000 fb10 	bl	8005fb4 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8005994:	2302      	movs	r3, #2
 8005996:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8005998:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800599c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800599e:	1d3b      	adds	r3, r7, #4
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7fd fc31 	bl	8003208 <HAL_RCCEx_PeriphCLKConfig>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d004      	beq.n	80059b6 <SystemClock_Config+0x96>
  {
    _Error_Handler(__FILE__, __LINE__);
 80059ac:	f240 11f9 	movw	r1, #505	; 0x1f9
 80059b0:	480c      	ldr	r0, [pc, #48]	; (80059e4 <SystemClock_Config+0xc4>)
 80059b2:	f000 faff 	bl	8005fb4 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80059b6:	f7fd fbd7 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 80059ba:	4602      	mov	r2, r0
 80059bc:	4b0a      	ldr	r3, [pc, #40]	; (80059e8 <SystemClock_Config+0xc8>)
 80059be:	fba3 2302 	umull	r2, r3, r3, r2
 80059c2:	099b      	lsrs	r3, r3, #6
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7fc f9ac 	bl	8001d22 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80059ca:	2004      	movs	r0, #4
 80059cc:	f7fc f9b6 	bl	8001d3c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80059d0:	2200      	movs	r2, #0
 80059d2:	2100      	movs	r1, #0
 80059d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059d8:	f7fc f979 	bl	8001cce <HAL_NVIC_SetPriority>
}
 80059dc:	bf00      	nop
 80059de:	3758      	adds	r7, #88	; 0x58
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	08006e20 	.word	0x08006e20
 80059e8:	10624dd3 	.word	0x10624dd3

080059ec <MX_ADC1_Init>:

/* ADC1 init function */
static void MX_ADC1_Init(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 80059f2:	4b2d      	ldr	r3, [pc, #180]	; (8005aa8 <MX_ADC1_Init+0xbc>)
 80059f4:	4a2d      	ldr	r2, [pc, #180]	; (8005aac <MX_ADC1_Init+0xc0>)
 80059f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80059f8:	4b2b      	ldr	r3, [pc, #172]	; (8005aa8 <MX_ADC1_Init+0xbc>)
 80059fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005a00:	4b29      	ldr	r3, [pc, #164]	; (8005aa8 <MX_ADC1_Init+0xbc>)
 8005a02:	2201      	movs	r2, #1
 8005a04:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005a06:	4b28      	ldr	r3, [pc, #160]	; (8005aa8 <MX_ADC1_Init+0xbc>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005a0c:	4b26      	ldr	r3, [pc, #152]	; (8005aa8 <MX_ADC1_Init+0xbc>)
 8005a0e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8005a12:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005a14:	4b24      	ldr	r3, [pc, #144]	; (8005aa8 <MX_ADC1_Init+0xbc>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8005a1a:	4b23      	ldr	r3, [pc, #140]	; (8005aa8 <MX_ADC1_Init+0xbc>)
 8005a1c:	2203      	movs	r2, #3
 8005a1e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005a20:	4821      	ldr	r0, [pc, #132]	; (8005aa8 <MX_ADC1_Init+0xbc>)
 8005a22:	f7fb fbdf 	bl	80011e4 <HAL_ADC_Init>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d004      	beq.n	8005a36 <MX_ADC1_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005a2c:	f240 2119 	movw	r1, #537	; 0x219
 8005a30:	481f      	ldr	r0, [pc, #124]	; (8005ab0 <MX_ADC1_Init+0xc4>)
 8005a32:	f000 fabf 	bl	8005fb4 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_0;
 8005a36:	2300      	movs	r3, #0
 8005a38:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8005a3e:	2307      	movs	r3, #7
 8005a40:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005a42:	1d3b      	adds	r3, r7, #4
 8005a44:	4619      	mov	r1, r3
 8005a46:	4818      	ldr	r0, [pc, #96]	; (8005aa8 <MX_ADC1_Init+0xbc>)
 8005a48:	f7fb fe7c 	bl	8001744 <HAL_ADC_ConfigChannel>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d004      	beq.n	8005a5c <MX_ADC1_Init+0x70>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005a52:	f240 2123 	movw	r1, #547	; 0x223
 8005a56:	4816      	ldr	r0, [pc, #88]	; (8005ab0 <MX_ADC1_Init+0xc4>)
 8005a58:	f000 faac 	bl	8005fb4 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 2;
 8005a60:	2302      	movs	r3, #2
 8005a62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005a64:	1d3b      	adds	r3, r7, #4
 8005a66:	4619      	mov	r1, r3
 8005a68:	480f      	ldr	r0, [pc, #60]	; (8005aa8 <MX_ADC1_Init+0xbc>)
 8005a6a:	f7fb fe6b 	bl	8001744 <HAL_ADC_ConfigChannel>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d004      	beq.n	8005a7e <MX_ADC1_Init+0x92>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005a74:	f44f 710b 	mov.w	r1, #556	; 0x22c
 8005a78:	480d      	ldr	r0, [pc, #52]	; (8005ab0 <MX_ADC1_Init+0xc4>)
 8005a7a:	f000 fa9b 	bl	8005fb4 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_13;
 8005a7e:	230d      	movs	r3, #13
 8005a80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 3;
 8005a82:	2303      	movs	r3, #3
 8005a84:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005a86:	1d3b      	adds	r3, r7, #4
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4807      	ldr	r0, [pc, #28]	; (8005aa8 <MX_ADC1_Init+0xbc>)
 8005a8c:	f7fb fe5a 	bl	8001744 <HAL_ADC_ConfigChannel>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d004      	beq.n	8005aa0 <MX_ADC1_Init+0xb4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005a96:	f240 2135 	movw	r1, #565	; 0x235
 8005a9a:	4805      	ldr	r0, [pc, #20]	; (8005ab0 <MX_ADC1_Init+0xc4>)
 8005a9c:	f000 fa8a 	bl	8005fb4 <_Error_Handler>
  }

}
 8005aa0:	bf00      	nop
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	20000334 	.word	0x20000334
 8005aac:	40012400 	.word	0x40012400
 8005ab0:	08006e20 	.word	0x08006e20

08005ab4 <MX_TIM1_Init>:

/* TIM1 init function */
static void MX_TIM1_Init(void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b094      	sub	sp, #80	; 0x50
 8005ab8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 8005aba:	4b47      	ldr	r3, [pc, #284]	; (8005bd8 <MX_TIM1_Init+0x124>)
 8005abc:	4a47      	ldr	r2, [pc, #284]	; (8005bdc <MX_TIM1_Init+0x128>)
 8005abe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005ac0:	4b45      	ldr	r3, [pc, #276]	; (8005bd8 <MX_TIM1_Init+0x124>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ac6:	4b44      	ldr	r3, [pc, #272]	; (8005bd8 <MX_TIM1_Init+0x124>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1799;
 8005acc:	4b42      	ldr	r3, [pc, #264]	; (8005bd8 <MX_TIM1_Init+0x124>)
 8005ace:	f240 7207 	movw	r2, #1799	; 0x707
 8005ad2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ad4:	4b40      	ldr	r3, [pc, #256]	; (8005bd8 <MX_TIM1_Init+0x124>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005ada:	4b3f      	ldr	r3, [pc, #252]	; (8005bd8 <MX_TIM1_Init+0x124>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ae0:	4b3d      	ldr	r3, [pc, #244]	; (8005bd8 <MX_TIM1_Init+0x124>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005ae6:	483c      	ldr	r0, [pc, #240]	; (8005bd8 <MX_TIM1_Init+0x124>)
 8005ae8:	f7fd fc44 	bl	8003374 <HAL_TIM_Base_Init>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d004      	beq.n	8005afc <MX_TIM1_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005af2:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8005af6:	483a      	ldr	r0, [pc, #232]	; (8005be0 <MX_TIM1_Init+0x12c>)
 8005af8:	f000 fa5c 	bl	8005fb4 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b00:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005b02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005b06:	4619      	mov	r1, r3
 8005b08:	4833      	ldr	r0, [pc, #204]	; (8005bd8 <MX_TIM1_Init+0x124>)
 8005b0a:	f7fd ff29 	bl	8003960 <HAL_TIM_ConfigClockSource>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d004      	beq.n	8005b1e <MX_TIM1_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005b14:	f240 2152 	movw	r1, #594	; 0x252
 8005b18:	4831      	ldr	r0, [pc, #196]	; (8005be0 <MX_TIM1_Init+0x12c>)
 8005b1a:	f000 fa4b 	bl	8005fb4 <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005b1e:	482e      	ldr	r0, [pc, #184]	; (8005bd8 <MX_TIM1_Init+0x124>)
 8005b20:	f7fd fcbb 	bl	800349a <HAL_TIM_PWM_Init>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d004      	beq.n	8005b34 <MX_TIM1_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005b2a:	f240 2157 	movw	r1, #599	; 0x257
 8005b2e:	482c      	ldr	r0, [pc, #176]	; (8005be0 <MX_TIM1_Init+0x12c>)
 8005b30:	f000 fa40 	bl	8005fb4 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b34:	2300      	movs	r3, #0
 8005b36:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005b3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005b40:	4619      	mov	r1, r3
 8005b42:	4825      	ldr	r0, [pc, #148]	; (8005bd8 <MX_TIM1_Init+0x124>)
 8005b44:	f7fe fb4b 	bl	80041de <HAL_TIMEx_MasterConfigSynchronization>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d004      	beq.n	8005b58 <MX_TIM1_Init+0xa4>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005b4e:	f240 215e 	movw	r1, #606	; 0x25e
 8005b52:	4823      	ldr	r0, [pc, #140]	; (8005be0 <MX_TIM1_Init+0x12c>)
 8005b54:	f000 fa2e 	bl	8005fb4 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b58:	2360      	movs	r3, #96	; 0x60
 8005b5a:	61fb      	str	r3, [r7, #28]
  sConfigOC.Pulse = 0;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	623b      	str	r3, [r7, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b60:	2300      	movs	r3, #0
 8005b62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005b64:	2300      	movs	r3, #0
 8005b66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005b70:	2300      	movs	r3, #0
 8005b72:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005b74:	f107 031c 	add.w	r3, r7, #28
 8005b78:	2200      	movs	r2, #0
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	4816      	ldr	r0, [pc, #88]	; (8005bd8 <MX_TIM1_Init+0x124>)
 8005b7e:	f7fd fe29 	bl	80037d4 <HAL_TIM_PWM_ConfigChannel>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d004      	beq.n	8005b92 <MX_TIM1_Init+0xde>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005b88:	f240 216a 	movw	r1, #618	; 0x26a
 8005b8c:	4814      	ldr	r0, [pc, #80]	; (8005be0 <MX_TIM1_Init+0x12c>)
 8005b8e:	f000 fa11 	bl	8005fb4 <_Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005b92:	2300      	movs	r3, #0
 8005b94:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005b96:	2300      	movs	r3, #0
 8005b98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005ba6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005baa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005bac:	2300      	movs	r3, #0
 8005bae:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005bb0:	463b      	mov	r3, r7
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4808      	ldr	r0, [pc, #32]	; (8005bd8 <MX_TIM1_Init+0x124>)
 8005bb6:	f7fe faba 	bl	800412e <HAL_TIMEx_ConfigBreakDeadTime>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d004      	beq.n	8005bca <MX_TIM1_Init+0x116>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005bc0:	f240 2176 	movw	r1, #630	; 0x276
 8005bc4:	4806      	ldr	r0, [pc, #24]	; (8005be0 <MX_TIM1_Init+0x12c>)
 8005bc6:	f000 f9f5 	bl	8005fb4 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8005bca:	4803      	ldr	r0, [pc, #12]	; (8005bd8 <MX_TIM1_Init+0x124>)
 8005bcc:	f000 fb26 	bl	800621c <HAL_TIM_MspPostInit>

}
 8005bd0:	bf00      	nop
 8005bd2:	3750      	adds	r7, #80	; 0x50
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	200004a0 	.word	0x200004a0
 8005bdc:	40012c00 	.word	0x40012c00
 8005be0:	08006e20 	.word	0x08006e20

08005be4 <MX_TIM2_Init>:

/* TIM2 init function */
static void MX_TIM2_Init(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08e      	sub	sp, #56	; 0x38
 8005be8:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 8005bea:	4b33      	ldr	r3, [pc, #204]	; (8005cb8 <MX_TIM2_Init+0xd4>)
 8005bec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005bf0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8005bf2:	4b31      	ldr	r3, [pc, #196]	; (8005cb8 <MX_TIM2_Init+0xd4>)
 8005bf4:	2247      	movs	r2, #71	; 0x47
 8005bf6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bf8:	4b2f      	ldr	r3, [pc, #188]	; (8005cb8 <MX_TIM2_Init+0xd4>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 599;
 8005bfe:	4b2e      	ldr	r3, [pc, #184]	; (8005cb8 <MX_TIM2_Init+0xd4>)
 8005c00:	f240 2257 	movw	r2, #599	; 0x257
 8005c04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c06:	4b2c      	ldr	r3, [pc, #176]	; (8005cb8 <MX_TIM2_Init+0xd4>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c0c:	4b2a      	ldr	r3, [pc, #168]	; (8005cb8 <MX_TIM2_Init+0xd4>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005c12:	4829      	ldr	r0, [pc, #164]	; (8005cb8 <MX_TIM2_Init+0xd4>)
 8005c14:	f7fd fbae 	bl	8003374 <HAL_TIM_Base_Init>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d004      	beq.n	8005c28 <MX_TIM2_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005c1e:	f240 218d 	movw	r1, #653	; 0x28d
 8005c22:	4826      	ldr	r0, [pc, #152]	; (8005cbc <MX_TIM2_Init+0xd8>)
 8005c24:	f000 f9c6 	bl	8005fb4 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005c2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c32:	4619      	mov	r1, r3
 8005c34:	4820      	ldr	r0, [pc, #128]	; (8005cb8 <MX_TIM2_Init+0xd4>)
 8005c36:	f7fd fe93 	bl	8003960 <HAL_TIM_ConfigClockSource>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d004      	beq.n	8005c4a <MX_TIM2_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005c40:	f240 2193 	movw	r1, #659	; 0x293
 8005c44:	481d      	ldr	r0, [pc, #116]	; (8005cbc <MX_TIM2_Init+0xd8>)
 8005c46:	f000 f9b5 	bl	8005fb4 <_Error_Handler>
  }

  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8005c4a:	481b      	ldr	r0, [pc, #108]	; (8005cb8 <MX_TIM2_Init+0xd4>)
 8005c4c:	f7fd fbf1 	bl	8003432 <HAL_TIM_OC_Init>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d004      	beq.n	8005c60 <MX_TIM2_Init+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005c56:	f44f 7126 	mov.w	r1, #664	; 0x298
 8005c5a:	4818      	ldr	r0, [pc, #96]	; (8005cbc <MX_TIM2_Init+0xd8>)
 8005c5c:	f000 f9aa 	bl	8005fb4 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c60:	2300      	movs	r3, #0
 8005c62:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c64:	2300      	movs	r3, #0
 8005c66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005c68:	f107 0320 	add.w	r3, r7, #32
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4812      	ldr	r0, [pc, #72]	; (8005cb8 <MX_TIM2_Init+0xd4>)
 8005c70:	f7fe fab5 	bl	80041de <HAL_TIMEx_MasterConfigSynchronization>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d004      	beq.n	8005c84 <MX_TIM2_Init+0xa0>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005c7a:	f240 219f 	movw	r1, #671	; 0x29f
 8005c7e:	480f      	ldr	r0, [pc, #60]	; (8005cbc <MX_TIM2_Init+0xd8>)
 8005c80:	f000 f998 	bl	8005fb4 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8005c84:	2310      	movs	r3, #16
 8005c86:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005c90:	2300      	movs	r3, #0
 8005c92:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005c94:	1d3b      	adds	r3, r7, #4
 8005c96:	2200      	movs	r2, #0
 8005c98:	4619      	mov	r1, r3
 8005c9a:	4807      	ldr	r0, [pc, #28]	; (8005cb8 <MX_TIM2_Init+0xd4>)
 8005c9c:	f7fd fd3a 	bl	8003714 <HAL_TIM_OC_ConfigChannel>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d004      	beq.n	8005cb0 <MX_TIM2_Init+0xcc>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005ca6:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 8005caa:	4804      	ldr	r0, [pc, #16]	; (8005cbc <MX_TIM2_Init+0xd8>)
 8005cac:	f000 f982 	bl	8005fb4 <_Error_Handler>
  }

}
 8005cb0:	bf00      	nop
 8005cb2:	3738      	adds	r7, #56	; 0x38
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	200004e0 	.word	0x200004e0
 8005cbc:	08006e20 	.word	0x08006e20

08005cc0 <MX_TIM3_Init>:

/* TIM3 init function */
static void MX_TIM3_Init(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 8005cc6:	4b22      	ldr	r3, [pc, #136]	; (8005d50 <MX_TIM3_Init+0x90>)
 8005cc8:	4a22      	ldr	r2, [pc, #136]	; (8005d54 <MX_TIM3_Init+0x94>)
 8005cca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8005ccc:	4b20      	ldr	r3, [pc, #128]	; (8005d50 <MX_TIM3_Init+0x90>)
 8005cce:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8005cd2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cd4:	4b1e      	ldr	r3, [pc, #120]	; (8005d50 <MX_TIM3_Init+0x90>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8005cda:	4b1d      	ldr	r3, [pc, #116]	; (8005d50 <MX_TIM3_Init+0x90>)
 8005cdc:	f242 720f 	movw	r2, #9999	; 0x270f
 8005ce0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ce2:	4b1b      	ldr	r3, [pc, #108]	; (8005d50 <MX_TIM3_Init+0x90>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ce8:	4b19      	ldr	r3, [pc, #100]	; (8005d50 <MX_TIM3_Init+0x90>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005cee:	4818      	ldr	r0, [pc, #96]	; (8005d50 <MX_TIM3_Init+0x90>)
 8005cf0:	f7fd fb40 	bl	8003374 <HAL_TIM_Base_Init>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d004      	beq.n	8005d04 <MX_TIM3_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005cfa:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8005cfe:	4816      	ldr	r0, [pc, #88]	; (8005d58 <MX_TIM3_Init+0x98>)
 8005d00:	f000 f958 	bl	8005fb4 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005d0a:	f107 0308 	add.w	r3, r7, #8
 8005d0e:	4619      	mov	r1, r3
 8005d10:	480f      	ldr	r0, [pc, #60]	; (8005d50 <MX_TIM3_Init+0x90>)
 8005d12:	f7fd fe25 	bl	8003960 <HAL_TIM_ConfigClockSource>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d004      	beq.n	8005d26 <MX_TIM3_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005d1c:	f240 21c2 	movw	r1, #706	; 0x2c2
 8005d20:	480d      	ldr	r0, [pc, #52]	; (8005d58 <MX_TIM3_Init+0x98>)
 8005d22:	f000 f947 	bl	8005fb4 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d26:	2300      	movs	r3, #0
 8005d28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005d2e:	463b      	mov	r3, r7
 8005d30:	4619      	mov	r1, r3
 8005d32:	4807      	ldr	r0, [pc, #28]	; (8005d50 <MX_TIM3_Init+0x90>)
 8005d34:	f7fe fa53 	bl	80041de <HAL_TIMEx_MasterConfigSynchronization>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d004      	beq.n	8005d48 <MX_TIM3_Init+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005d3e:	f240 21c9 	movw	r1, #713	; 0x2c9
 8005d42:	4805      	ldr	r0, [pc, #20]	; (8005d58 <MX_TIM3_Init+0x98>)
 8005d44:	f000 f936 	bl	8005fb4 <_Error_Handler>
  }

}
 8005d48:	bf00      	nop
 8005d4a:	3718      	adds	r7, #24
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	200002f4 	.word	0x200002f4
 8005d54:	40000400 	.word	0x40000400
 8005d58:	08006e20 	.word	0x08006e20

08005d5c <MX_TIM4_Init>:

/* TIM4 init function */
static void MX_TIM4_Init(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 8005d62:	4b22      	ldr	r3, [pc, #136]	; (8005dec <MX_TIM4_Init+0x90>)
 8005d64:	4a22      	ldr	r2, [pc, #136]	; (8005df0 <MX_TIM4_Init+0x94>)
 8005d66:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8005d68:	4b20      	ldr	r3, [pc, #128]	; (8005dec <MX_TIM4_Init+0x90>)
 8005d6a:	2247      	movs	r2, #71	; 0x47
 8005d6c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d6e:	4b1f      	ldr	r3, [pc, #124]	; (8005dec <MX_TIM4_Init+0x90>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8005d74:	4b1d      	ldr	r3, [pc, #116]	; (8005dec <MX_TIM4_Init+0x90>)
 8005d76:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005d7a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d7c:	4b1b      	ldr	r3, [pc, #108]	; (8005dec <MX_TIM4_Init+0x90>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d82:	4b1a      	ldr	r3, [pc, #104]	; (8005dec <MX_TIM4_Init+0x90>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005d88:	4818      	ldr	r0, [pc, #96]	; (8005dec <MX_TIM4_Init+0x90>)
 8005d8a:	f7fd faf3 	bl	8003374 <HAL_TIM_Base_Init>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d004      	beq.n	8005d9e <MX_TIM4_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005d94:	f240 21dd 	movw	r1, #733	; 0x2dd
 8005d98:	4816      	ldr	r0, [pc, #88]	; (8005df4 <MX_TIM4_Init+0x98>)
 8005d9a:	f000 f90b 	bl	8005fb4 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005da2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005da4:	f107 0308 	add.w	r3, r7, #8
 8005da8:	4619      	mov	r1, r3
 8005daa:	4810      	ldr	r0, [pc, #64]	; (8005dec <MX_TIM4_Init+0x90>)
 8005dac:	f7fd fdd8 	bl	8003960 <HAL_TIM_ConfigClockSource>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d004      	beq.n	8005dc0 <MX_TIM4_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005db6:	f240 21e3 	movw	r1, #739	; 0x2e3
 8005dba:	480e      	ldr	r0, [pc, #56]	; (8005df4 <MX_TIM4_Init+0x98>)
 8005dbc:	f000 f8fa 	bl	8005fb4 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005dc8:	463b      	mov	r3, r7
 8005dca:	4619      	mov	r1, r3
 8005dcc:	4807      	ldr	r0, [pc, #28]	; (8005dec <MX_TIM4_Init+0x90>)
 8005dce:	f7fe fa06 	bl	80041de <HAL_TIMEx_MasterConfigSynchronization>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d004      	beq.n	8005de2 <MX_TIM4_Init+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005dd8:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005ddc:	4805      	ldr	r0, [pc, #20]	; (8005df4 <MX_TIM4_Init+0x98>)
 8005dde:	f000 f8e9 	bl	8005fb4 <_Error_Handler>
  }

}
 8005de2:	bf00      	nop
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	200002ac 	.word	0x200002ac
 8005df0:	40000800 	.word	0x40000800
 8005df4:	08006e20 	.word	0x08006e20

08005df8 <MX_USART1_UART_Init>:

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8005dfc:	4b12      	ldr	r3, [pc, #72]	; (8005e48 <MX_USART1_UART_Init+0x50>)
 8005dfe:	4a13      	ldr	r2, [pc, #76]	; (8005e4c <MX_USART1_UART_Init+0x54>)
 8005e00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005e02:	4b11      	ldr	r3, [pc, #68]	; (8005e48 <MX_USART1_UART_Init+0x50>)
 8005e04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005e08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005e0a:	4b0f      	ldr	r3, [pc, #60]	; (8005e48 <MX_USART1_UART_Init+0x50>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005e10:	4b0d      	ldr	r3, [pc, #52]	; (8005e48 <MX_USART1_UART_Init+0x50>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005e16:	4b0c      	ldr	r3, [pc, #48]	; (8005e48 <MX_USART1_UART_Init+0x50>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005e1c:	4b0a      	ldr	r3, [pc, #40]	; (8005e48 <MX_USART1_UART_Init+0x50>)
 8005e1e:	220c      	movs	r2, #12
 8005e20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e22:	4b09      	ldr	r3, [pc, #36]	; (8005e48 <MX_USART1_UART_Init+0x50>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e28:	4b07      	ldr	r3, [pc, #28]	; (8005e48 <MX_USART1_UART_Init+0x50>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005e2e:	4806      	ldr	r0, [pc, #24]	; (8005e48 <MX_USART1_UART_Init+0x50>)
 8005e30:	f7fe fa2b 	bl	800428a <HAL_UART_Init>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d004      	beq.n	8005e44 <MX_USART1_UART_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8005e3a:	f240 21fd 	movw	r1, #765	; 0x2fd
 8005e3e:	4804      	ldr	r0, [pc, #16]	; (8005e50 <MX_USART1_UART_Init+0x58>)
 8005e40:	f000 f8b8 	bl	8005fb4 <_Error_Handler>
  }

}
 8005e44:	bf00      	nop
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	200003a8 	.word	0x200003a8
 8005e4c:	40013800 	.word	0x40013800
 8005e50:	08006e20 	.word	0x08006e20

08005e54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005e5a:	4a10      	ldr	r2, [pc, #64]	; (8005e9c <MX_DMA_Init+0x48>)
 8005e5c:	4b0f      	ldr	r3, [pc, #60]	; (8005e9c <MX_DMA_Init+0x48>)
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	f043 0301 	orr.w	r3, r3, #1
 8005e64:	6153      	str	r3, [r2, #20]
 8005e66:	4b0d      	ldr	r3, [pc, #52]	; (8005e9c <MX_DMA_Init+0x48>)
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	607b      	str	r3, [r7, #4]
 8005e70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005e72:	2200      	movs	r2, #0
 8005e74:	2100      	movs	r1, #0
 8005e76:	200b      	movs	r0, #11
 8005e78:	f7fb ff29 	bl	8001cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005e7c:	200b      	movs	r0, #11
 8005e7e:	f7fb ff42 	bl	8001d06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005e82:	2200      	movs	r2, #0
 8005e84:	2100      	movs	r1, #0
 8005e86:	200f      	movs	r0, #15
 8005e88:	f7fb ff21 	bl	8001cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8005e8c:	200f      	movs	r0, #15
 8005e8e:	f7fb ff3a 	bl	8001d06 <HAL_NVIC_EnableIRQ>

}
 8005e92:	bf00      	nop
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	40021000 	.word	0x40021000

08005ea0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ea6:	4a3e      	ldr	r2, [pc, #248]	; (8005fa0 <MX_GPIO_Init+0x100>)
 8005ea8:	4b3d      	ldr	r3, [pc, #244]	; (8005fa0 <MX_GPIO_Init+0x100>)
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	f043 0320 	orr.w	r3, r3, #32
 8005eb0:	6193      	str	r3, [r2, #24]
 8005eb2:	4b3b      	ldr	r3, [pc, #236]	; (8005fa0 <MX_GPIO_Init+0x100>)
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	f003 0320 	and.w	r3, r3, #32
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ebe:	4a38      	ldr	r2, [pc, #224]	; (8005fa0 <MX_GPIO_Init+0x100>)
 8005ec0:	4b37      	ldr	r3, [pc, #220]	; (8005fa0 <MX_GPIO_Init+0x100>)
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	f043 0310 	orr.w	r3, r3, #16
 8005ec8:	6193      	str	r3, [r2, #24]
 8005eca:	4b35      	ldr	r3, [pc, #212]	; (8005fa0 <MX_GPIO_Init+0x100>)
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	f003 0310 	and.w	r3, r3, #16
 8005ed2:	60bb      	str	r3, [r7, #8]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ed6:	4a32      	ldr	r2, [pc, #200]	; (8005fa0 <MX_GPIO_Init+0x100>)
 8005ed8:	4b31      	ldr	r3, [pc, #196]	; (8005fa0 <MX_GPIO_Init+0x100>)
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	f043 0304 	orr.w	r3, r3, #4
 8005ee0:	6193      	str	r3, [r2, #24]
 8005ee2:	4b2f      	ldr	r3, [pc, #188]	; (8005fa0 <MX_GPIO_Init+0x100>)
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	f003 0304 	and.w	r3, r3, #4
 8005eea:	607b      	str	r3, [r7, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005eee:	4a2c      	ldr	r2, [pc, #176]	; (8005fa0 <MX_GPIO_Init+0x100>)
 8005ef0:	4b2b      	ldr	r3, [pc, #172]	; (8005fa0 <MX_GPIO_Init+0x100>)
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	f043 0308 	orr.w	r3, r3, #8
 8005ef8:	6193      	str	r3, [r2, #24]
 8005efa:	4b29      	ldr	r3, [pc, #164]	; (8005fa0 <MX_GPIO_Init+0x100>)
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	f003 0308 	and.w	r3, r3, #8
 8005f02:	603b      	str	r3, [r7, #0]
 8005f04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IR_Receive_BK_GPIO_Port, IR_Receive_BK_Pin, GPIO_PIN_RESET);
 8005f06:	2200      	movs	r2, #0
 8005f08:	2180      	movs	r1, #128	; 0x80
 8005f0a:	4826      	ldr	r0, [pc, #152]	; (8005fa4 <MX_GPIO_Init+0x104>)
 8005f0c:	f7fc fd59 	bl	80029c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Charge_Pin|Forward_Motor_Pin|Backward_Motor_Pin|Buzzer_Pin
 8005f10:	2200      	movs	r2, #0
 8005f12:	f64e 51f9 	movw	r1, #60921	; 0xedf9
 8005f16:	4824      	ldr	r0, [pc, #144]	; (8005fa8 <MX_GPIO_Init+0x108>)
 8005f18:	f7fc fd53 	bl	80029c2 <HAL_GPIO_WritePin>
                          |Operator_Light_Pin|Error_Light_Pin|Batt_lvl_1_Pin|Batt_lvl_2_Pin
                          |Batt_lvl_3_Pin|Batt_lvl_4_Pin|Batt_lvl_5_Pin|Option_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : IR_Receive_Pin */
  GPIO_InitStruct.Pin = IR_Receive_Pin;
 8005f1c:	2340      	movs	r3, #64	; 0x40
 8005f1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005f20:	4b22      	ldr	r3, [pc, #136]	; (8005fac <MX_GPIO_Init+0x10c>)
 8005f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f24:	2300      	movs	r3, #0
 8005f26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IR_Receive_GPIO_Port, &GPIO_InitStruct);
 8005f28:	f107 0310 	add.w	r3, r7, #16
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	481d      	ldr	r0, [pc, #116]	; (8005fa4 <MX_GPIO_Init+0x104>)
 8005f30:	f7fc fbc2 	bl	80026b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_Receive_BK_Pin */
  GPIO_InitStruct.Pin = IR_Receive_BK_Pin;
 8005f34:	2380      	movs	r3, #128	; 0x80
 8005f36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR_Receive_BK_GPIO_Port, &GPIO_InitStruct);
 8005f40:	f107 0310 	add.w	r3, r7, #16
 8005f44:	4619      	mov	r1, r3
 8005f46:	4817      	ldr	r0, [pc, #92]	; (8005fa4 <MX_GPIO_Init+0x104>)
 8005f48:	f7fc fbb6 	bl	80026b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Charge_Pin Forward_Motor_Pin Backward_Motor_Pin Buzzer_Pin
                           Operator_Light_Pin Error_Light_Pin Batt_lvl_1_Pin Batt_lvl_2_Pin
                           Batt_lvl_3_Pin Batt_lvl_4_Pin Batt_lvl_5_Pin Option_Pin */
  GPIO_InitStruct.Pin = Charge_Pin|Forward_Motor_Pin|Backward_Motor_Pin|Buzzer_Pin
 8005f4c:	f64e 53f9 	movw	r3, #60921	; 0xedf9
 8005f50:	613b      	str	r3, [r7, #16]
                          |Operator_Light_Pin|Error_Light_Pin|Batt_lvl_1_Pin|Batt_lvl_2_Pin
                          |Batt_lvl_3_Pin|Batt_lvl_4_Pin|Batt_lvl_5_Pin|Option_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f52:	2301      	movs	r3, #1
 8005f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f56:	2303      	movs	r3, #3
 8005f58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f5a:	f107 0310 	add.w	r3, r7, #16
 8005f5e:	4619      	mov	r1, r3
 8005f60:	4811      	ldr	r0, [pc, #68]	; (8005fa8 <MX_GPIO_Init+0x108>)
 8005f62:	f7fc fba9 	bl	80026b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Forward_LMS_Pin Backward_LMS_Pin Charge_LMS_Pin */
  GPIO_InitStruct.Pin = Forward_LMS_Pin|Backward_LMS_Pin|Charge_LMS_Pin;
 8005f66:	f241 0306 	movw	r3, #4102	; 0x1006
 8005f6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f70:	2300      	movs	r3, #0
 8005f72:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f74:	f107 0310 	add.w	r3, r7, #16
 8005f78:	4619      	mov	r1, r3
 8005f7a:	480b      	ldr	r0, [pc, #44]	; (8005fa8 <MX_GPIO_Init+0x108>)
 8005f7c:	f7fc fb9c 	bl	80026b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Charge_Finish_Pin */
  GPIO_InitStruct.Pin = Charge_Finish_Pin;
 8005f80:	2340      	movs	r3, #64	; 0x40
 8005f82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f84:	2300      	movs	r3, #0
 8005f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Charge_Finish_GPIO_Port, &GPIO_InitStruct);
 8005f8c:	f107 0310 	add.w	r3, r7, #16
 8005f90:	4619      	mov	r1, r3
 8005f92:	4807      	ldr	r0, [pc, #28]	; (8005fb0 <MX_GPIO_Init+0x110>)
 8005f94:	f7fc fb90 	bl	80026b8 <HAL_GPIO_Init>

}
 8005f98:	bf00      	nop
 8005f9a:	3720      	adds	r7, #32
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	40021000 	.word	0x40021000
 8005fa4:	40010800 	.word	0x40010800
 8005fa8:	40010c00 	.word	0x40010c00
 8005fac:	10310000 	.word	0x10310000
 8005fb0:	40011000 	.word	0x40011000

08005fb4 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8005fbe:	e7fe      	b.n	8005fbe <_Error_Handler+0xa>

08005fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005fc6:	4a24      	ldr	r2, [pc, #144]	; (8006058 <HAL_MspInit+0x98>)
 8005fc8:	4b23      	ldr	r3, [pc, #140]	; (8006058 <HAL_MspInit+0x98>)
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	f043 0301 	orr.w	r3, r3, #1
 8005fd0:	6193      	str	r3, [r2, #24]
 8005fd2:	4b21      	ldr	r3, [pc, #132]	; (8006058 <HAL_MspInit+0x98>)
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	607b      	str	r3, [r7, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005fde:	2003      	movs	r0, #3
 8005fe0:	f7fb fe6a 	bl	8001cb8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	f06f 000b 	mvn.w	r0, #11
 8005fec:	f7fb fe6f 	bl	8001cce <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	f06f 000a 	mvn.w	r0, #10
 8005ff8:	f7fb fe69 	bl	8001cce <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	2100      	movs	r1, #0
 8006000:	f06f 0009 	mvn.w	r0, #9
 8006004:	f7fb fe63 	bl	8001cce <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8006008:	2200      	movs	r2, #0
 800600a:	2100      	movs	r1, #0
 800600c:	f06f 0004 	mvn.w	r0, #4
 8006010:	f7fb fe5d 	bl	8001cce <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8006014:	2200      	movs	r2, #0
 8006016:	2100      	movs	r1, #0
 8006018:	f06f 0003 	mvn.w	r0, #3
 800601c:	f7fb fe57 	bl	8001cce <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8006020:	2200      	movs	r2, #0
 8006022:	2100      	movs	r1, #0
 8006024:	f06f 0001 	mvn.w	r0, #1
 8006028:	f7fb fe51 	bl	8001cce <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800602c:	2200      	movs	r2, #0
 800602e:	2100      	movs	r1, #0
 8006030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006034:	f7fb fe4b 	bl	8001cce <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006038:	4a08      	ldr	r2, [pc, #32]	; (800605c <HAL_MspInit+0x9c>)
 800603a:	4b08      	ldr	r3, [pc, #32]	; (800605c <HAL_MspInit+0x9c>)
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006042:	6053      	str	r3, [r2, #4]
 8006044:	4a05      	ldr	r2, [pc, #20]	; (800605c <HAL_MspInit+0x9c>)
 8006046:	4b05      	ldr	r3, [pc, #20]	; (800605c <HAL_MspInit+0x9c>)
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800604e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006050:	bf00      	nop
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	40021000 	.word	0x40021000
 800605c:	40010000 	.word	0x40010000

08006060 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b088      	sub	sp, #32
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a2c      	ldr	r2, [pc, #176]	; (8006120 <HAL_ADC_MspInit+0xc0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d151      	bne.n	8006116 <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006072:	4a2c      	ldr	r2, [pc, #176]	; (8006124 <HAL_ADC_MspInit+0xc4>)
 8006074:	4b2b      	ldr	r3, [pc, #172]	; (8006124 <HAL_ADC_MspInit+0xc4>)
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800607c:	6193      	str	r3, [r2, #24]
 800607e:	4b29      	ldr	r3, [pc, #164]	; (8006124 <HAL_ADC_MspInit+0xc4>)
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = ADC_Option_Pin;
 800608a:	2308      	movs	r3, #8
 800608c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800608e:	2303      	movs	r3, #3
 8006090:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_Option_GPIO_Port, &GPIO_InitStruct);
 8006092:	f107 0310 	add.w	r3, r7, #16
 8006096:	4619      	mov	r1, r3
 8006098:	4823      	ldr	r0, [pc, #140]	; (8006128 <HAL_ADC_MspInit+0xc8>)
 800609a:	f7fc fb0d 	bl	80026b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Battery_Pin|Temp_Sensor_Pin;
 800609e:	2303      	movs	r3, #3
 80060a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80060a2:	2303      	movs	r3, #3
 80060a4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060a6:	f107 0310 	add.w	r3, r7, #16
 80060aa:	4619      	mov	r1, r3
 80060ac:	481f      	ldr	r0, [pc, #124]	; (800612c <HAL_ADC_MspInit+0xcc>)
 80060ae:	f7fc fb03 	bl	80026b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80060b2:	4b1f      	ldr	r3, [pc, #124]	; (8006130 <HAL_ADC_MspInit+0xd0>)
 80060b4:	4a1f      	ldr	r2, [pc, #124]	; (8006134 <HAL_ADC_MspInit+0xd4>)
 80060b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80060b8:	4b1d      	ldr	r3, [pc, #116]	; (8006130 <HAL_ADC_MspInit+0xd0>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80060be:	4b1c      	ldr	r3, [pc, #112]	; (8006130 <HAL_ADC_MspInit+0xd0>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80060c4:	4b1a      	ldr	r3, [pc, #104]	; (8006130 <HAL_ADC_MspInit+0xd0>)
 80060c6:	2280      	movs	r2, #128	; 0x80
 80060c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80060ca:	4b19      	ldr	r3, [pc, #100]	; (8006130 <HAL_ADC_MspInit+0xd0>)
 80060cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80060d2:	4b17      	ldr	r3, [pc, #92]	; (8006130 <HAL_ADC_MspInit+0xd0>)
 80060d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80060da:	4b15      	ldr	r3, [pc, #84]	; (8006130 <HAL_ADC_MspInit+0xd0>)
 80060dc:	2220      	movs	r2, #32
 80060de:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80060e0:	4b13      	ldr	r3, [pc, #76]	; (8006130 <HAL_ADC_MspInit+0xd0>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80060e6:	4812      	ldr	r0, [pc, #72]	; (8006130 <HAL_ADC_MspInit+0xd0>)
 80060e8:	f7fb fe50 	bl	8001d8c <HAL_DMA_Init>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <HAL_ADC_MspInit+0x9a>
    {
      _Error_Handler(__FILE__, __LINE__);
 80060f2:	215f      	movs	r1, #95	; 0x5f
 80060f4:	4810      	ldr	r0, [pc, #64]	; (8006138 <HAL_ADC_MspInit+0xd8>)
 80060f6:	f7ff ff5d 	bl	8005fb4 <_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a0c      	ldr	r2, [pc, #48]	; (8006130 <HAL_ADC_MspInit+0xd0>)
 80060fe:	621a      	str	r2, [r3, #32]
 8006100:	4a0b      	ldr	r2, [pc, #44]	; (8006130 <HAL_ADC_MspInit+0xd0>)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8006106:	2200      	movs	r2, #0
 8006108:	2100      	movs	r1, #0
 800610a:	2012      	movs	r0, #18
 800610c:	f7fb fddf 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8006110:	2012      	movs	r0, #18
 8006112:	f7fb fdf8 	bl	8001d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006116:	bf00      	nop
 8006118:	3720      	adds	r7, #32
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	40012400 	.word	0x40012400
 8006124:	40021000 	.word	0x40021000
 8006128:	40011000 	.word	0x40011000
 800612c:	40010800 	.word	0x40010800
 8006130:	20000454 	.word	0x20000454
 8006134:	40020008 	.word	0x40020008
 8006138:	08006e30 	.word	0x08006e30

0800613c <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM1)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a30      	ldr	r2, [pc, #192]	; (800620c <HAL_TIM_Base_MspInit+0xd0>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d10c      	bne.n	8006168 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800614e:	4a30      	ldr	r2, [pc, #192]	; (8006210 <HAL_TIM_Base_MspInit+0xd4>)
 8006150:	4b2f      	ldr	r3, [pc, #188]	; (8006210 <HAL_TIM_Base_MspInit+0xd4>)
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006158:	6193      	str	r3, [r2, #24]
 800615a:	4b2d      	ldr	r3, [pc, #180]	; (8006210 <HAL_TIM_Base_MspInit+0xd4>)
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006166:	e04c      	b.n	8006202 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006170:	d114      	bne.n	800619c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006172:	4a27      	ldr	r2, [pc, #156]	; (8006210 <HAL_TIM_Base_MspInit+0xd4>)
 8006174:	4b26      	ldr	r3, [pc, #152]	; (8006210 <HAL_TIM_Base_MspInit+0xd4>)
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	f043 0301 	orr.w	r3, r3, #1
 800617c:	61d3      	str	r3, [r2, #28]
 800617e:	4b24      	ldr	r3, [pc, #144]	; (8006210 <HAL_TIM_Base_MspInit+0xd4>)
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	613b      	str	r3, [r7, #16]
 8006188:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800618a:	2200      	movs	r2, #0
 800618c:	2100      	movs	r1, #0
 800618e:	201c      	movs	r0, #28
 8006190:	f7fb fd9d 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006194:	201c      	movs	r0, #28
 8006196:	f7fb fdb6 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 800619a:	e032      	b.n	8006202 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a1c      	ldr	r2, [pc, #112]	; (8006214 <HAL_TIM_Base_MspInit+0xd8>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d114      	bne.n	80061d0 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80061a6:	4a1a      	ldr	r2, [pc, #104]	; (8006210 <HAL_TIM_Base_MspInit+0xd4>)
 80061a8:	4b19      	ldr	r3, [pc, #100]	; (8006210 <HAL_TIM_Base_MspInit+0xd4>)
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	f043 0302 	orr.w	r3, r3, #2
 80061b0:	61d3      	str	r3, [r2, #28]
 80061b2:	4b17      	ldr	r3, [pc, #92]	; (8006210 <HAL_TIM_Base_MspInit+0xd4>)
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	60fb      	str	r3, [r7, #12]
 80061bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80061be:	2200      	movs	r2, #0
 80061c0:	2100      	movs	r1, #0
 80061c2:	201d      	movs	r0, #29
 80061c4:	f7fb fd83 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80061c8:	201d      	movs	r0, #29
 80061ca:	f7fb fd9c 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 80061ce:	e018      	b.n	8006202 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a10      	ldr	r2, [pc, #64]	; (8006218 <HAL_TIM_Base_MspInit+0xdc>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d113      	bne.n	8006202 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80061da:	4a0d      	ldr	r2, [pc, #52]	; (8006210 <HAL_TIM_Base_MspInit+0xd4>)
 80061dc:	4b0c      	ldr	r3, [pc, #48]	; (8006210 <HAL_TIM_Base_MspInit+0xd4>)
 80061de:	69db      	ldr	r3, [r3, #28]
 80061e0:	f043 0304 	orr.w	r3, r3, #4
 80061e4:	61d3      	str	r3, [r2, #28]
 80061e6:	4b0a      	ldr	r3, [pc, #40]	; (8006210 <HAL_TIM_Base_MspInit+0xd4>)
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	f003 0304 	and.w	r3, r3, #4
 80061ee:	60bb      	str	r3, [r7, #8]
 80061f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80061f2:	2200      	movs	r2, #0
 80061f4:	2100      	movs	r1, #0
 80061f6:	201e      	movs	r0, #30
 80061f8:	f7fb fd69 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80061fc:	201e      	movs	r0, #30
 80061fe:	f7fb fd82 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 8006202:	bf00      	nop
 8006204:	3718      	adds	r7, #24
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	40012c00 	.word	0x40012c00
 8006210:	40021000 	.word	0x40021000
 8006214:	40000400 	.word	0x40000400
 8006218:	40000800 	.word	0x40000800

0800621c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a09      	ldr	r2, [pc, #36]	; (8006250 <HAL_TIM_MspPostInit+0x34>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d10c      	bne.n	8006248 <HAL_TIM_MspPostInit+0x2c>
  /* USER CODE END TIM1_MspPostInit 0 */
  
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = IR_Transmit_Pin;
 800622e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006232:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006234:	2302      	movs	r3, #2
 8006236:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006238:	2302      	movs	r3, #2
 800623a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(IR_Transmit_GPIO_Port, &GPIO_InitStruct);
 800623c:	f107 0308 	add.w	r3, r7, #8
 8006240:	4619      	mov	r1, r3
 8006242:	4804      	ldr	r0, [pc, #16]	; (8006254 <HAL_TIM_MspPostInit+0x38>)
 8006244:	f7fc fa38 	bl	80026b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006248:	bf00      	nop
 800624a:	3718      	adds	r7, #24
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	40012c00 	.word	0x40012c00
 8006254:	40010800 	.word	0x40010800

08006258 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b088      	sub	sp, #32
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a2e      	ldr	r2, [pc, #184]	; (8006320 <HAL_UART_MspInit+0xc8>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d156      	bne.n	8006318 <HAL_UART_MspInit+0xc0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800626a:	4a2e      	ldr	r2, [pc, #184]	; (8006324 <HAL_UART_MspInit+0xcc>)
 800626c:	4b2d      	ldr	r3, [pc, #180]	; (8006324 <HAL_UART_MspInit+0xcc>)
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006274:	6193      	str	r3, [r2, #24]
 8006276:	4b2b      	ldr	r3, [pc, #172]	; (8006324 <HAL_UART_MspInit+0xcc>)
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800627e:	60fb      	str	r3, [r7, #12]
 8006280:	68fb      	ldr	r3, [r7, #12]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = USART_Wifi_Tx_Pin;
 8006282:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006286:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006288:	2302      	movs	r3, #2
 800628a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800628c:	2303      	movs	r3, #3
 800628e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USART_Wifi_Tx_GPIO_Port, &GPIO_InitStruct);
 8006290:	f107 0310 	add.w	r3, r7, #16
 8006294:	4619      	mov	r1, r3
 8006296:	4824      	ldr	r0, [pc, #144]	; (8006328 <HAL_UART_MspInit+0xd0>)
 8006298:	f7fc fa0e 	bl	80026b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_Wifi_Rx_Pin;
 800629c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80062a2:	2300      	movs	r3, #0
 80062a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062a6:	2300      	movs	r3, #0
 80062a8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(USART_Wifi_Rx_GPIO_Port, &GPIO_InitStruct);
 80062aa:	f107 0310 	add.w	r3, r7, #16
 80062ae:	4619      	mov	r1, r3
 80062b0:	481d      	ldr	r0, [pc, #116]	; (8006328 <HAL_UART_MspInit+0xd0>)
 80062b2:	f7fc fa01 	bl	80026b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80062b6:	4b1d      	ldr	r3, [pc, #116]	; (800632c <HAL_UART_MspInit+0xd4>)
 80062b8:	4a1d      	ldr	r2, [pc, #116]	; (8006330 <HAL_UART_MspInit+0xd8>)
 80062ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80062bc:	4b1b      	ldr	r3, [pc, #108]	; (800632c <HAL_UART_MspInit+0xd4>)
 80062be:	2200      	movs	r2, #0
 80062c0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80062c2:	4b1a      	ldr	r3, [pc, #104]	; (800632c <HAL_UART_MspInit+0xd4>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80062c8:	4b18      	ldr	r3, [pc, #96]	; (800632c <HAL_UART_MspInit+0xd4>)
 80062ca:	2280      	movs	r2, #128	; 0x80
 80062cc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80062ce:	4b17      	ldr	r3, [pc, #92]	; (800632c <HAL_UART_MspInit+0xd4>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80062d4:	4b15      	ldr	r3, [pc, #84]	; (800632c <HAL_UART_MspInit+0xd4>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80062da:	4b14      	ldr	r3, [pc, #80]	; (800632c <HAL_UART_MspInit+0xd4>)
 80062dc:	2220      	movs	r2, #32
 80062de:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80062e0:	4b12      	ldr	r3, [pc, #72]	; (800632c <HAL_UART_MspInit+0xd4>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80062e6:	4811      	ldr	r0, [pc, #68]	; (800632c <HAL_UART_MspInit+0xd4>)
 80062e8:	f7fb fd50 	bl	8001d8c <HAL_DMA_Init>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d004      	beq.n	80062fc <HAL_UART_MspInit+0xa4>
    {
      _Error_Handler(__FILE__, __LINE__);
 80062f2:	f240 1143 	movw	r1, #323	; 0x143
 80062f6:	480f      	ldr	r0, [pc, #60]	; (8006334 <HAL_UART_MspInit+0xdc>)
 80062f8:	f7ff fe5c 	bl	8005fb4 <_Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a0b      	ldr	r2, [pc, #44]	; (800632c <HAL_UART_MspInit+0xd4>)
 8006300:	635a      	str	r2, [r3, #52]	; 0x34
 8006302:	4a0a      	ldr	r2, [pc, #40]	; (800632c <HAL_UART_MspInit+0xd4>)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006308:	2200      	movs	r2, #0
 800630a:	2100      	movs	r1, #0
 800630c:	2025      	movs	r0, #37	; 0x25
 800630e:	f7fb fcde 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006312:	2025      	movs	r0, #37	; 0x25
 8006314:	f7fb fcf7 	bl	8001d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006318:	bf00      	nop
 800631a:	3720      	adds	r7, #32
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	40013800 	.word	0x40013800
 8006324:	40021000 	.word	0x40021000
 8006328:	40010800 	.word	0x40010800
 800632c:	20000364 	.word	0x20000364
 8006330:	40020058 	.word	0x40020058
 8006334:	08006e30 	.word	0x08006e30

08006338 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8006338:	b480      	push	{r7}
 800633a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800633c:	bf00      	nop
 800633e:	46bd      	mov	sp, r7
 8006340:	bc80      	pop	{r7}
 8006342:	4770      	bx	lr

08006344 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8006344:	b480      	push	{r7}
 8006346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006348:	e7fe      	b.n	8006348 <HardFault_Handler+0x4>

0800634a <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800634a:	b480      	push	{r7}
 800634c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800634e:	e7fe      	b.n	800634e <MemManage_Handler+0x4>

08006350 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006354:	e7fe      	b.n	8006354 <BusFault_Handler+0x4>

08006356 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8006356:	b480      	push	{r7}
 8006358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800635a:	e7fe      	b.n	800635a <UsageFault_Handler+0x4>

0800635c <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800635c:	b480      	push	{r7}
 800635e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006360:	bf00      	nop
 8006362:	46bd      	mov	sp, r7
 8006364:	bc80      	pop	{r7}
 8006366:	4770      	bx	lr

08006368 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800636c:	bf00      	nop
 800636e:	46bd      	mov	sp, r7
 8006370:	bc80      	pop	{r7}
 8006372:	4770      	bx	lr

08006374 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8006374:	b480      	push	{r7}
 8006376:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006378:	bf00      	nop
 800637a:	46bd      	mov	sp, r7
 800637c:	bc80      	pop	{r7}
 800637e:	4770      	bx	lr

08006380 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006384:	f7fa fef8 	bl	8001178 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8006388:	f7fb fcf4 	bl	8001d74 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800638c:	bf00      	nop
 800638e:	bd80      	pop	{r7, pc}

08006390 <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel1 global interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006394:	4802      	ldr	r0, [pc, #8]	; (80063a0 <DMA1_Channel1_IRQHandler+0x10>)
 8006396:	f7fb fef9 	bl	800218c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800639a:	bf00      	nop
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	20000454 	.word	0x20000454

080063a4 <DMA1_Channel5_IRQHandler>:

/**
* @brief This function handles DMA1 channel5 global interrupt.
*/
void DMA1_Channel5_IRQHandler(void)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80063a8:	4802      	ldr	r0, [pc, #8]	; (80063b4 <DMA1_Channel5_IRQHandler+0x10>)
 80063aa:	f7fb feef 	bl	800218c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80063ae:	bf00      	nop
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	20000364 	.word	0x20000364

080063b8 <ADC1_2_IRQHandler>:

/**
* @brief This function handles ADC1 and ADC2 global interrupts.
*/
void ADC1_2_IRQHandler(void)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80063bc:	4802      	ldr	r0, [pc, #8]	; (80063c8 <ADC1_2_IRQHandler+0x10>)
 80063be:	f7fb f8d9 	bl	8001574 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80063c2:	bf00      	nop
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	20000334 	.word	0x20000334

080063cc <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80063d0:	4802      	ldr	r0, [pc, #8]	; (80063dc <TIM2_IRQHandler+0x10>)
 80063d2:	f7fd f896 	bl	8003502 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80063d6:	bf00      	nop
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	200004e0 	.word	0x200004e0

080063e0 <TIM3_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80063e4:	4802      	ldr	r0, [pc, #8]	; (80063f0 <TIM3_IRQHandler+0x10>)
 80063e6:	f7fd f88c 	bl	8003502 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80063ea:	bf00      	nop
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	200002f4 	.word	0x200002f4

080063f4 <TIM4_IRQHandler>:

/**
* @brief This function handles TIM4 global interrupt.
*/
void TIM4_IRQHandler(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80063f8:	4802      	ldr	r0, [pc, #8]	; (8006404 <TIM4_IRQHandler+0x10>)
 80063fa:	f7fd f882 	bl	8003502 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80063fe:	bf00      	nop
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	200002ac 	.word	0x200002ac

08006408 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt.
*/
void USART1_IRQHandler(void)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800640c:	4802      	ldr	r0, [pc, #8]	; (8006418 <USART1_IRQHandler+0x10>)
 800640e:	f7fe f84d 	bl	80044ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006412:	bf00      	nop
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	200003a8 	.word	0x200003a8

0800641c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006420:	4a15      	ldr	r2, [pc, #84]	; (8006478 <SystemInit+0x5c>)
 8006422:	4b15      	ldr	r3, [pc, #84]	; (8006478 <SystemInit+0x5c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f043 0301 	orr.w	r3, r3, #1
 800642a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800642c:	4912      	ldr	r1, [pc, #72]	; (8006478 <SystemInit+0x5c>)
 800642e:	4b12      	ldr	r3, [pc, #72]	; (8006478 <SystemInit+0x5c>)
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	4b12      	ldr	r3, [pc, #72]	; (800647c <SystemInit+0x60>)
 8006434:	4013      	ands	r3, r2
 8006436:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006438:	4a0f      	ldr	r2, [pc, #60]	; (8006478 <SystemInit+0x5c>)
 800643a:	4b0f      	ldr	r3, [pc, #60]	; (8006478 <SystemInit+0x5c>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006446:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006448:	4a0b      	ldr	r2, [pc, #44]	; (8006478 <SystemInit+0x5c>)
 800644a:	4b0b      	ldr	r3, [pc, #44]	; (8006478 <SystemInit+0x5c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006452:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006454:	4a08      	ldr	r2, [pc, #32]	; (8006478 <SystemInit+0x5c>)
 8006456:	4b08      	ldr	r3, [pc, #32]	; (8006478 <SystemInit+0x5c>)
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800645e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006460:	4b05      	ldr	r3, [pc, #20]	; (8006478 <SystemInit+0x5c>)
 8006462:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8006466:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006468:	4b05      	ldr	r3, [pc, #20]	; (8006480 <SystemInit+0x64>)
 800646a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800646e:	609a      	str	r2, [r3, #8]
#endif 
}
 8006470:	bf00      	nop
 8006472:	46bd      	mov	sp, r7
 8006474:	bc80      	pop	{r7}
 8006476:	4770      	bx	lr
 8006478:	40021000 	.word	0x40021000
 800647c:	f8ff0000 	.word	0xf8ff0000
 8006480:	e000ed00 	.word	0xe000ed00

08006484 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006484:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006486:	e003      	b.n	8006490 <LoopCopyDataInit>

08006488 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006488:	4b0b      	ldr	r3, [pc, #44]	; (80064b8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800648a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800648c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800648e:	3104      	adds	r1, #4

08006490 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006490:	480a      	ldr	r0, [pc, #40]	; (80064bc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006492:	4b0b      	ldr	r3, [pc, #44]	; (80064c0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006494:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006496:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006498:	d3f6      	bcc.n	8006488 <CopyDataInit>
  ldr r2, =_sbss
 800649a:	4a0a      	ldr	r2, [pc, #40]	; (80064c4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800649c:	e002      	b.n	80064a4 <LoopFillZerobss>

0800649e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800649e:	2300      	movs	r3, #0
  str r3, [r2], #4
 80064a0:	f842 3b04 	str.w	r3, [r2], #4

080064a4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80064a4:	4b08      	ldr	r3, [pc, #32]	; (80064c8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80064a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80064a8:	d3f9      	bcc.n	800649e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80064aa:	f7ff ffb7 	bl	800641c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80064ae:	f000 f80f 	bl	80064d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80064b2:	f7fe fbf5 	bl	8004ca0 <main>
  bx lr
 80064b6:	4770      	bx	lr
  ldr r3, =_sidata
 80064b8:	08006ea0 	.word	0x08006ea0
  ldr r0, =_sdata
 80064bc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80064c0:	20000268 	.word	0x20000268
  ldr r2, =_sbss
 80064c4:	20000268 	.word	0x20000268
  ldr r3, = _ebss
 80064c8:	20000524 	.word	0x20000524

080064cc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80064cc:	e7fe      	b.n	80064cc <ADC3_IRQHandler>
	...

080064d0 <__libc_init_array>:
 80064d0:	b570      	push	{r4, r5, r6, lr}
 80064d2:	2500      	movs	r5, #0
 80064d4:	4e0c      	ldr	r6, [pc, #48]	; (8006508 <__libc_init_array+0x38>)
 80064d6:	4c0d      	ldr	r4, [pc, #52]	; (800650c <__libc_init_array+0x3c>)
 80064d8:	1ba4      	subs	r4, r4, r6
 80064da:	10a4      	asrs	r4, r4, #2
 80064dc:	42a5      	cmp	r5, r4
 80064de:	d109      	bne.n	80064f4 <__libc_init_array+0x24>
 80064e0:	f000 fc64 	bl	8006dac <_init>
 80064e4:	2500      	movs	r5, #0
 80064e6:	4e0a      	ldr	r6, [pc, #40]	; (8006510 <__libc_init_array+0x40>)
 80064e8:	4c0a      	ldr	r4, [pc, #40]	; (8006514 <__libc_init_array+0x44>)
 80064ea:	1ba4      	subs	r4, r4, r6
 80064ec:	10a4      	asrs	r4, r4, #2
 80064ee:	42a5      	cmp	r5, r4
 80064f0:	d105      	bne.n	80064fe <__libc_init_array+0x2e>
 80064f2:	bd70      	pop	{r4, r5, r6, pc}
 80064f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80064f8:	4798      	blx	r3
 80064fa:	3501      	adds	r5, #1
 80064fc:	e7ee      	b.n	80064dc <__libc_init_array+0xc>
 80064fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006502:	4798      	blx	r3
 8006504:	3501      	adds	r5, #1
 8006506:	e7f2      	b.n	80064ee <__libc_init_array+0x1e>
 8006508:	08006e98 	.word	0x08006e98
 800650c:	08006e98 	.word	0x08006e98
 8006510:	08006e98 	.word	0x08006e98
 8006514:	08006e9c 	.word	0x08006e9c

08006518 <sniprintf>:
 8006518:	b40c      	push	{r2, r3}
 800651a:	b530      	push	{r4, r5, lr}
 800651c:	4b17      	ldr	r3, [pc, #92]	; (800657c <sniprintf+0x64>)
 800651e:	1e0c      	subs	r4, r1, #0
 8006520:	b09d      	sub	sp, #116	; 0x74
 8006522:	681d      	ldr	r5, [r3, #0]
 8006524:	da08      	bge.n	8006538 <sniprintf+0x20>
 8006526:	238b      	movs	r3, #139	; 0x8b
 8006528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800652c:	602b      	str	r3, [r5, #0]
 800652e:	b01d      	add	sp, #116	; 0x74
 8006530:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006534:	b002      	add	sp, #8
 8006536:	4770      	bx	lr
 8006538:	f44f 7302 	mov.w	r3, #520	; 0x208
 800653c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006540:	bf0c      	ite	eq
 8006542:	4623      	moveq	r3, r4
 8006544:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8006548:	9304      	str	r3, [sp, #16]
 800654a:	9307      	str	r3, [sp, #28]
 800654c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006550:	9002      	str	r0, [sp, #8]
 8006552:	9006      	str	r0, [sp, #24]
 8006554:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006558:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800655a:	ab21      	add	r3, sp, #132	; 0x84
 800655c:	a902      	add	r1, sp, #8
 800655e:	4628      	mov	r0, r5
 8006560:	9301      	str	r3, [sp, #4]
 8006562:	f000 f869 	bl	8006638 <_svfiprintf_r>
 8006566:	1c43      	adds	r3, r0, #1
 8006568:	bfbc      	itt	lt
 800656a:	238b      	movlt	r3, #139	; 0x8b
 800656c:	602b      	strlt	r3, [r5, #0]
 800656e:	2c00      	cmp	r4, #0
 8006570:	d0dd      	beq.n	800652e <sniprintf+0x16>
 8006572:	2200      	movs	r2, #0
 8006574:	9b02      	ldr	r3, [sp, #8]
 8006576:	701a      	strb	r2, [r3, #0]
 8006578:	e7d9      	b.n	800652e <sniprintf+0x16>
 800657a:	bf00      	nop
 800657c:	20000204 	.word	0x20000204

08006580 <__ssputs_r>:
 8006580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006584:	688e      	ldr	r6, [r1, #8]
 8006586:	4682      	mov	sl, r0
 8006588:	429e      	cmp	r6, r3
 800658a:	460c      	mov	r4, r1
 800658c:	4691      	mov	r9, r2
 800658e:	4698      	mov	r8, r3
 8006590:	d835      	bhi.n	80065fe <__ssputs_r+0x7e>
 8006592:	898a      	ldrh	r2, [r1, #12]
 8006594:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006598:	d031      	beq.n	80065fe <__ssputs_r+0x7e>
 800659a:	2302      	movs	r3, #2
 800659c:	6825      	ldr	r5, [r4, #0]
 800659e:	6909      	ldr	r1, [r1, #16]
 80065a0:	1a6f      	subs	r7, r5, r1
 80065a2:	6965      	ldr	r5, [r4, #20]
 80065a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065a8:	fb95 f5f3 	sdiv	r5, r5, r3
 80065ac:	f108 0301 	add.w	r3, r8, #1
 80065b0:	443b      	add	r3, r7
 80065b2:	429d      	cmp	r5, r3
 80065b4:	bf38      	it	cc
 80065b6:	461d      	movcc	r5, r3
 80065b8:	0553      	lsls	r3, r2, #21
 80065ba:	d531      	bpl.n	8006620 <__ssputs_r+0xa0>
 80065bc:	4629      	mov	r1, r5
 80065be:	f000 fb47 	bl	8006c50 <_malloc_r>
 80065c2:	4606      	mov	r6, r0
 80065c4:	b950      	cbnz	r0, 80065dc <__ssputs_r+0x5c>
 80065c6:	230c      	movs	r3, #12
 80065c8:	f8ca 3000 	str.w	r3, [sl]
 80065cc:	89a3      	ldrh	r3, [r4, #12]
 80065ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065d6:	81a3      	strh	r3, [r4, #12]
 80065d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065dc:	463a      	mov	r2, r7
 80065de:	6921      	ldr	r1, [r4, #16]
 80065e0:	f000 fac4 	bl	8006b6c <memcpy>
 80065e4:	89a3      	ldrh	r3, [r4, #12]
 80065e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80065ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ee:	81a3      	strh	r3, [r4, #12]
 80065f0:	6126      	str	r6, [r4, #16]
 80065f2:	443e      	add	r6, r7
 80065f4:	6026      	str	r6, [r4, #0]
 80065f6:	4646      	mov	r6, r8
 80065f8:	6165      	str	r5, [r4, #20]
 80065fa:	1bed      	subs	r5, r5, r7
 80065fc:	60a5      	str	r5, [r4, #8]
 80065fe:	4546      	cmp	r6, r8
 8006600:	bf28      	it	cs
 8006602:	4646      	movcs	r6, r8
 8006604:	4649      	mov	r1, r9
 8006606:	4632      	mov	r2, r6
 8006608:	6820      	ldr	r0, [r4, #0]
 800660a:	f000 faba 	bl	8006b82 <memmove>
 800660e:	68a3      	ldr	r3, [r4, #8]
 8006610:	2000      	movs	r0, #0
 8006612:	1b9b      	subs	r3, r3, r6
 8006614:	60a3      	str	r3, [r4, #8]
 8006616:	6823      	ldr	r3, [r4, #0]
 8006618:	441e      	add	r6, r3
 800661a:	6026      	str	r6, [r4, #0]
 800661c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006620:	462a      	mov	r2, r5
 8006622:	f000 fb73 	bl	8006d0c <_realloc_r>
 8006626:	4606      	mov	r6, r0
 8006628:	2800      	cmp	r0, #0
 800662a:	d1e1      	bne.n	80065f0 <__ssputs_r+0x70>
 800662c:	6921      	ldr	r1, [r4, #16]
 800662e:	4650      	mov	r0, sl
 8006630:	f000 fac2 	bl	8006bb8 <_free_r>
 8006634:	e7c7      	b.n	80065c6 <__ssputs_r+0x46>
	...

08006638 <_svfiprintf_r>:
 8006638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663c:	b09d      	sub	sp, #116	; 0x74
 800663e:	9303      	str	r3, [sp, #12]
 8006640:	898b      	ldrh	r3, [r1, #12]
 8006642:	4680      	mov	r8, r0
 8006644:	061c      	lsls	r4, r3, #24
 8006646:	460d      	mov	r5, r1
 8006648:	4616      	mov	r6, r2
 800664a:	d50f      	bpl.n	800666c <_svfiprintf_r+0x34>
 800664c:	690b      	ldr	r3, [r1, #16]
 800664e:	b96b      	cbnz	r3, 800666c <_svfiprintf_r+0x34>
 8006650:	2140      	movs	r1, #64	; 0x40
 8006652:	f000 fafd 	bl	8006c50 <_malloc_r>
 8006656:	6028      	str	r0, [r5, #0]
 8006658:	6128      	str	r0, [r5, #16]
 800665a:	b928      	cbnz	r0, 8006668 <_svfiprintf_r+0x30>
 800665c:	230c      	movs	r3, #12
 800665e:	f8c8 3000 	str.w	r3, [r8]
 8006662:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006666:	e0c4      	b.n	80067f2 <_svfiprintf_r+0x1ba>
 8006668:	2340      	movs	r3, #64	; 0x40
 800666a:	616b      	str	r3, [r5, #20]
 800666c:	2300      	movs	r3, #0
 800666e:	9309      	str	r3, [sp, #36]	; 0x24
 8006670:	2320      	movs	r3, #32
 8006672:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006676:	2330      	movs	r3, #48	; 0x30
 8006678:	f04f 0b01 	mov.w	fp, #1
 800667c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006680:	4637      	mov	r7, r6
 8006682:	463c      	mov	r4, r7
 8006684:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006688:	2b00      	cmp	r3, #0
 800668a:	d13c      	bne.n	8006706 <_svfiprintf_r+0xce>
 800668c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006690:	d00b      	beq.n	80066aa <_svfiprintf_r+0x72>
 8006692:	4653      	mov	r3, sl
 8006694:	4632      	mov	r2, r6
 8006696:	4629      	mov	r1, r5
 8006698:	4640      	mov	r0, r8
 800669a:	f7ff ff71 	bl	8006580 <__ssputs_r>
 800669e:	3001      	adds	r0, #1
 80066a0:	f000 80a2 	beq.w	80067e8 <_svfiprintf_r+0x1b0>
 80066a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066a6:	4453      	add	r3, sl
 80066a8:	9309      	str	r3, [sp, #36]	; 0x24
 80066aa:	783b      	ldrb	r3, [r7, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 809b 	beq.w	80067e8 <_svfiprintf_r+0x1b0>
 80066b2:	2300      	movs	r3, #0
 80066b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066b8:	9304      	str	r3, [sp, #16]
 80066ba:	9307      	str	r3, [sp, #28]
 80066bc:	9205      	str	r2, [sp, #20]
 80066be:	9306      	str	r3, [sp, #24]
 80066c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066c4:	931a      	str	r3, [sp, #104]	; 0x68
 80066c6:	2205      	movs	r2, #5
 80066c8:	7821      	ldrb	r1, [r4, #0]
 80066ca:	4850      	ldr	r0, [pc, #320]	; (800680c <_svfiprintf_r+0x1d4>)
 80066cc:	f000 fa40 	bl	8006b50 <memchr>
 80066d0:	1c67      	adds	r7, r4, #1
 80066d2:	9b04      	ldr	r3, [sp, #16]
 80066d4:	b9d8      	cbnz	r0, 800670e <_svfiprintf_r+0xd6>
 80066d6:	06d9      	lsls	r1, r3, #27
 80066d8:	bf44      	itt	mi
 80066da:	2220      	movmi	r2, #32
 80066dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80066e0:	071a      	lsls	r2, r3, #28
 80066e2:	bf44      	itt	mi
 80066e4:	222b      	movmi	r2, #43	; 0x2b
 80066e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80066ea:	7822      	ldrb	r2, [r4, #0]
 80066ec:	2a2a      	cmp	r2, #42	; 0x2a
 80066ee:	d016      	beq.n	800671e <_svfiprintf_r+0xe6>
 80066f0:	2100      	movs	r1, #0
 80066f2:	200a      	movs	r0, #10
 80066f4:	9a07      	ldr	r2, [sp, #28]
 80066f6:	4627      	mov	r7, r4
 80066f8:	783b      	ldrb	r3, [r7, #0]
 80066fa:	3401      	adds	r4, #1
 80066fc:	3b30      	subs	r3, #48	; 0x30
 80066fe:	2b09      	cmp	r3, #9
 8006700:	d950      	bls.n	80067a4 <_svfiprintf_r+0x16c>
 8006702:	b1c9      	cbz	r1, 8006738 <_svfiprintf_r+0x100>
 8006704:	e011      	b.n	800672a <_svfiprintf_r+0xf2>
 8006706:	2b25      	cmp	r3, #37	; 0x25
 8006708:	d0c0      	beq.n	800668c <_svfiprintf_r+0x54>
 800670a:	4627      	mov	r7, r4
 800670c:	e7b9      	b.n	8006682 <_svfiprintf_r+0x4a>
 800670e:	4a3f      	ldr	r2, [pc, #252]	; (800680c <_svfiprintf_r+0x1d4>)
 8006710:	463c      	mov	r4, r7
 8006712:	1a80      	subs	r0, r0, r2
 8006714:	fa0b f000 	lsl.w	r0, fp, r0
 8006718:	4318      	orrs	r0, r3
 800671a:	9004      	str	r0, [sp, #16]
 800671c:	e7d3      	b.n	80066c6 <_svfiprintf_r+0x8e>
 800671e:	9a03      	ldr	r2, [sp, #12]
 8006720:	1d11      	adds	r1, r2, #4
 8006722:	6812      	ldr	r2, [r2, #0]
 8006724:	9103      	str	r1, [sp, #12]
 8006726:	2a00      	cmp	r2, #0
 8006728:	db01      	blt.n	800672e <_svfiprintf_r+0xf6>
 800672a:	9207      	str	r2, [sp, #28]
 800672c:	e004      	b.n	8006738 <_svfiprintf_r+0x100>
 800672e:	4252      	negs	r2, r2
 8006730:	f043 0302 	orr.w	r3, r3, #2
 8006734:	9207      	str	r2, [sp, #28]
 8006736:	9304      	str	r3, [sp, #16]
 8006738:	783b      	ldrb	r3, [r7, #0]
 800673a:	2b2e      	cmp	r3, #46	; 0x2e
 800673c:	d10d      	bne.n	800675a <_svfiprintf_r+0x122>
 800673e:	787b      	ldrb	r3, [r7, #1]
 8006740:	1c79      	adds	r1, r7, #1
 8006742:	2b2a      	cmp	r3, #42	; 0x2a
 8006744:	d132      	bne.n	80067ac <_svfiprintf_r+0x174>
 8006746:	9b03      	ldr	r3, [sp, #12]
 8006748:	3702      	adds	r7, #2
 800674a:	1d1a      	adds	r2, r3, #4
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	9203      	str	r2, [sp, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	bfb8      	it	lt
 8006754:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006758:	9305      	str	r3, [sp, #20]
 800675a:	4c2d      	ldr	r4, [pc, #180]	; (8006810 <_svfiprintf_r+0x1d8>)
 800675c:	2203      	movs	r2, #3
 800675e:	7839      	ldrb	r1, [r7, #0]
 8006760:	4620      	mov	r0, r4
 8006762:	f000 f9f5 	bl	8006b50 <memchr>
 8006766:	b138      	cbz	r0, 8006778 <_svfiprintf_r+0x140>
 8006768:	2340      	movs	r3, #64	; 0x40
 800676a:	1b00      	subs	r0, r0, r4
 800676c:	fa03 f000 	lsl.w	r0, r3, r0
 8006770:	9b04      	ldr	r3, [sp, #16]
 8006772:	3701      	adds	r7, #1
 8006774:	4303      	orrs	r3, r0
 8006776:	9304      	str	r3, [sp, #16]
 8006778:	7839      	ldrb	r1, [r7, #0]
 800677a:	2206      	movs	r2, #6
 800677c:	4825      	ldr	r0, [pc, #148]	; (8006814 <_svfiprintf_r+0x1dc>)
 800677e:	1c7e      	adds	r6, r7, #1
 8006780:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006784:	f000 f9e4 	bl	8006b50 <memchr>
 8006788:	2800      	cmp	r0, #0
 800678a:	d035      	beq.n	80067f8 <_svfiprintf_r+0x1c0>
 800678c:	4b22      	ldr	r3, [pc, #136]	; (8006818 <_svfiprintf_r+0x1e0>)
 800678e:	b9fb      	cbnz	r3, 80067d0 <_svfiprintf_r+0x198>
 8006790:	9b03      	ldr	r3, [sp, #12]
 8006792:	3307      	adds	r3, #7
 8006794:	f023 0307 	bic.w	r3, r3, #7
 8006798:	3308      	adds	r3, #8
 800679a:	9303      	str	r3, [sp, #12]
 800679c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800679e:	444b      	add	r3, r9
 80067a0:	9309      	str	r3, [sp, #36]	; 0x24
 80067a2:	e76d      	b.n	8006680 <_svfiprintf_r+0x48>
 80067a4:	fb00 3202 	mla	r2, r0, r2, r3
 80067a8:	2101      	movs	r1, #1
 80067aa:	e7a4      	b.n	80066f6 <_svfiprintf_r+0xbe>
 80067ac:	2300      	movs	r3, #0
 80067ae:	240a      	movs	r4, #10
 80067b0:	4618      	mov	r0, r3
 80067b2:	9305      	str	r3, [sp, #20]
 80067b4:	460f      	mov	r7, r1
 80067b6:	783a      	ldrb	r2, [r7, #0]
 80067b8:	3101      	adds	r1, #1
 80067ba:	3a30      	subs	r2, #48	; 0x30
 80067bc:	2a09      	cmp	r2, #9
 80067be:	d903      	bls.n	80067c8 <_svfiprintf_r+0x190>
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d0ca      	beq.n	800675a <_svfiprintf_r+0x122>
 80067c4:	9005      	str	r0, [sp, #20]
 80067c6:	e7c8      	b.n	800675a <_svfiprintf_r+0x122>
 80067c8:	fb04 2000 	mla	r0, r4, r0, r2
 80067cc:	2301      	movs	r3, #1
 80067ce:	e7f1      	b.n	80067b4 <_svfiprintf_r+0x17c>
 80067d0:	ab03      	add	r3, sp, #12
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	462a      	mov	r2, r5
 80067d6:	4b11      	ldr	r3, [pc, #68]	; (800681c <_svfiprintf_r+0x1e4>)
 80067d8:	a904      	add	r1, sp, #16
 80067da:	4640      	mov	r0, r8
 80067dc:	f3af 8000 	nop.w
 80067e0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80067e4:	4681      	mov	r9, r0
 80067e6:	d1d9      	bne.n	800679c <_svfiprintf_r+0x164>
 80067e8:	89ab      	ldrh	r3, [r5, #12]
 80067ea:	065b      	lsls	r3, r3, #25
 80067ec:	f53f af39 	bmi.w	8006662 <_svfiprintf_r+0x2a>
 80067f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067f2:	b01d      	add	sp, #116	; 0x74
 80067f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f8:	ab03      	add	r3, sp, #12
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	462a      	mov	r2, r5
 80067fe:	4b07      	ldr	r3, [pc, #28]	; (800681c <_svfiprintf_r+0x1e4>)
 8006800:	a904      	add	r1, sp, #16
 8006802:	4640      	mov	r0, r8
 8006804:	f000 f884 	bl	8006910 <_printf_i>
 8006808:	e7ea      	b.n	80067e0 <_svfiprintf_r+0x1a8>
 800680a:	bf00      	nop
 800680c:	08006e64 	.word	0x08006e64
 8006810:	08006e6a 	.word	0x08006e6a
 8006814:	08006e6e 	.word	0x08006e6e
 8006818:	00000000 	.word	0x00000000
 800681c:	08006581 	.word	0x08006581

08006820 <_printf_common>:
 8006820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006824:	4691      	mov	r9, r2
 8006826:	461f      	mov	r7, r3
 8006828:	688a      	ldr	r2, [r1, #8]
 800682a:	690b      	ldr	r3, [r1, #16]
 800682c:	4606      	mov	r6, r0
 800682e:	4293      	cmp	r3, r2
 8006830:	bfb8      	it	lt
 8006832:	4613      	movlt	r3, r2
 8006834:	f8c9 3000 	str.w	r3, [r9]
 8006838:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800683c:	460c      	mov	r4, r1
 800683e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006842:	b112      	cbz	r2, 800684a <_printf_common+0x2a>
 8006844:	3301      	adds	r3, #1
 8006846:	f8c9 3000 	str.w	r3, [r9]
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	0699      	lsls	r1, r3, #26
 800684e:	bf42      	ittt	mi
 8006850:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006854:	3302      	addmi	r3, #2
 8006856:	f8c9 3000 	strmi.w	r3, [r9]
 800685a:	6825      	ldr	r5, [r4, #0]
 800685c:	f015 0506 	ands.w	r5, r5, #6
 8006860:	d107      	bne.n	8006872 <_printf_common+0x52>
 8006862:	f104 0a19 	add.w	sl, r4, #25
 8006866:	68e3      	ldr	r3, [r4, #12]
 8006868:	f8d9 2000 	ldr.w	r2, [r9]
 800686c:	1a9b      	subs	r3, r3, r2
 800686e:	429d      	cmp	r5, r3
 8006870:	db2a      	blt.n	80068c8 <_printf_common+0xa8>
 8006872:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006876:	6822      	ldr	r2, [r4, #0]
 8006878:	3300      	adds	r3, #0
 800687a:	bf18      	it	ne
 800687c:	2301      	movne	r3, #1
 800687e:	0692      	lsls	r2, r2, #26
 8006880:	d42f      	bmi.n	80068e2 <_printf_common+0xc2>
 8006882:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006886:	4639      	mov	r1, r7
 8006888:	4630      	mov	r0, r6
 800688a:	47c0      	blx	r8
 800688c:	3001      	adds	r0, #1
 800688e:	d022      	beq.n	80068d6 <_printf_common+0xb6>
 8006890:	6823      	ldr	r3, [r4, #0]
 8006892:	68e5      	ldr	r5, [r4, #12]
 8006894:	f003 0306 	and.w	r3, r3, #6
 8006898:	2b04      	cmp	r3, #4
 800689a:	bf18      	it	ne
 800689c:	2500      	movne	r5, #0
 800689e:	f8d9 2000 	ldr.w	r2, [r9]
 80068a2:	f04f 0900 	mov.w	r9, #0
 80068a6:	bf08      	it	eq
 80068a8:	1aad      	subeq	r5, r5, r2
 80068aa:	68a3      	ldr	r3, [r4, #8]
 80068ac:	6922      	ldr	r2, [r4, #16]
 80068ae:	bf08      	it	eq
 80068b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068b4:	4293      	cmp	r3, r2
 80068b6:	bfc4      	itt	gt
 80068b8:	1a9b      	subgt	r3, r3, r2
 80068ba:	18ed      	addgt	r5, r5, r3
 80068bc:	341a      	adds	r4, #26
 80068be:	454d      	cmp	r5, r9
 80068c0:	d11b      	bne.n	80068fa <_printf_common+0xda>
 80068c2:	2000      	movs	r0, #0
 80068c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c8:	2301      	movs	r3, #1
 80068ca:	4652      	mov	r2, sl
 80068cc:	4639      	mov	r1, r7
 80068ce:	4630      	mov	r0, r6
 80068d0:	47c0      	blx	r8
 80068d2:	3001      	adds	r0, #1
 80068d4:	d103      	bne.n	80068de <_printf_common+0xbe>
 80068d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068de:	3501      	adds	r5, #1
 80068e0:	e7c1      	b.n	8006866 <_printf_common+0x46>
 80068e2:	2030      	movs	r0, #48	; 0x30
 80068e4:	18e1      	adds	r1, r4, r3
 80068e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068ea:	1c5a      	adds	r2, r3, #1
 80068ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068f0:	4422      	add	r2, r4
 80068f2:	3302      	adds	r3, #2
 80068f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068f8:	e7c3      	b.n	8006882 <_printf_common+0x62>
 80068fa:	2301      	movs	r3, #1
 80068fc:	4622      	mov	r2, r4
 80068fe:	4639      	mov	r1, r7
 8006900:	4630      	mov	r0, r6
 8006902:	47c0      	blx	r8
 8006904:	3001      	adds	r0, #1
 8006906:	d0e6      	beq.n	80068d6 <_printf_common+0xb6>
 8006908:	f109 0901 	add.w	r9, r9, #1
 800690c:	e7d7      	b.n	80068be <_printf_common+0x9e>
	...

08006910 <_printf_i>:
 8006910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006914:	4617      	mov	r7, r2
 8006916:	7e0a      	ldrb	r2, [r1, #24]
 8006918:	b085      	sub	sp, #20
 800691a:	2a6e      	cmp	r2, #110	; 0x6e
 800691c:	4698      	mov	r8, r3
 800691e:	4606      	mov	r6, r0
 8006920:	460c      	mov	r4, r1
 8006922:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006924:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006928:	f000 80bc 	beq.w	8006aa4 <_printf_i+0x194>
 800692c:	d81a      	bhi.n	8006964 <_printf_i+0x54>
 800692e:	2a63      	cmp	r2, #99	; 0x63
 8006930:	d02e      	beq.n	8006990 <_printf_i+0x80>
 8006932:	d80a      	bhi.n	800694a <_printf_i+0x3a>
 8006934:	2a00      	cmp	r2, #0
 8006936:	f000 80c8 	beq.w	8006aca <_printf_i+0x1ba>
 800693a:	2a58      	cmp	r2, #88	; 0x58
 800693c:	f000 808a 	beq.w	8006a54 <_printf_i+0x144>
 8006940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006944:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006948:	e02a      	b.n	80069a0 <_printf_i+0x90>
 800694a:	2a64      	cmp	r2, #100	; 0x64
 800694c:	d001      	beq.n	8006952 <_printf_i+0x42>
 800694e:	2a69      	cmp	r2, #105	; 0x69
 8006950:	d1f6      	bne.n	8006940 <_printf_i+0x30>
 8006952:	6821      	ldr	r1, [r4, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	f011 0f80 	tst.w	r1, #128	; 0x80
 800695a:	d023      	beq.n	80069a4 <_printf_i+0x94>
 800695c:	1d11      	adds	r1, r2, #4
 800695e:	6019      	str	r1, [r3, #0]
 8006960:	6813      	ldr	r3, [r2, #0]
 8006962:	e027      	b.n	80069b4 <_printf_i+0xa4>
 8006964:	2a73      	cmp	r2, #115	; 0x73
 8006966:	f000 80b4 	beq.w	8006ad2 <_printf_i+0x1c2>
 800696a:	d808      	bhi.n	800697e <_printf_i+0x6e>
 800696c:	2a6f      	cmp	r2, #111	; 0x6f
 800696e:	d02a      	beq.n	80069c6 <_printf_i+0xb6>
 8006970:	2a70      	cmp	r2, #112	; 0x70
 8006972:	d1e5      	bne.n	8006940 <_printf_i+0x30>
 8006974:	680a      	ldr	r2, [r1, #0]
 8006976:	f042 0220 	orr.w	r2, r2, #32
 800697a:	600a      	str	r2, [r1, #0]
 800697c:	e003      	b.n	8006986 <_printf_i+0x76>
 800697e:	2a75      	cmp	r2, #117	; 0x75
 8006980:	d021      	beq.n	80069c6 <_printf_i+0xb6>
 8006982:	2a78      	cmp	r2, #120	; 0x78
 8006984:	d1dc      	bne.n	8006940 <_printf_i+0x30>
 8006986:	2278      	movs	r2, #120	; 0x78
 8006988:	496f      	ldr	r1, [pc, #444]	; (8006b48 <_printf_i+0x238>)
 800698a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800698e:	e064      	b.n	8006a5a <_printf_i+0x14a>
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006996:	1d11      	adds	r1, r2, #4
 8006998:	6019      	str	r1, [r3, #0]
 800699a:	6813      	ldr	r3, [r2, #0]
 800699c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069a0:	2301      	movs	r3, #1
 80069a2:	e0a3      	b.n	8006aec <_printf_i+0x1dc>
 80069a4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80069a8:	f102 0104 	add.w	r1, r2, #4
 80069ac:	6019      	str	r1, [r3, #0]
 80069ae:	d0d7      	beq.n	8006960 <_printf_i+0x50>
 80069b0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	da03      	bge.n	80069c0 <_printf_i+0xb0>
 80069b8:	222d      	movs	r2, #45	; 0x2d
 80069ba:	425b      	negs	r3, r3
 80069bc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80069c0:	4962      	ldr	r1, [pc, #392]	; (8006b4c <_printf_i+0x23c>)
 80069c2:	220a      	movs	r2, #10
 80069c4:	e017      	b.n	80069f6 <_printf_i+0xe6>
 80069c6:	6820      	ldr	r0, [r4, #0]
 80069c8:	6819      	ldr	r1, [r3, #0]
 80069ca:	f010 0f80 	tst.w	r0, #128	; 0x80
 80069ce:	d003      	beq.n	80069d8 <_printf_i+0xc8>
 80069d0:	1d08      	adds	r0, r1, #4
 80069d2:	6018      	str	r0, [r3, #0]
 80069d4:	680b      	ldr	r3, [r1, #0]
 80069d6:	e006      	b.n	80069e6 <_printf_i+0xd6>
 80069d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069dc:	f101 0004 	add.w	r0, r1, #4
 80069e0:	6018      	str	r0, [r3, #0]
 80069e2:	d0f7      	beq.n	80069d4 <_printf_i+0xc4>
 80069e4:	880b      	ldrh	r3, [r1, #0]
 80069e6:	2a6f      	cmp	r2, #111	; 0x6f
 80069e8:	bf14      	ite	ne
 80069ea:	220a      	movne	r2, #10
 80069ec:	2208      	moveq	r2, #8
 80069ee:	4957      	ldr	r1, [pc, #348]	; (8006b4c <_printf_i+0x23c>)
 80069f0:	2000      	movs	r0, #0
 80069f2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80069f6:	6865      	ldr	r5, [r4, #4]
 80069f8:	2d00      	cmp	r5, #0
 80069fa:	60a5      	str	r5, [r4, #8]
 80069fc:	f2c0 809c 	blt.w	8006b38 <_printf_i+0x228>
 8006a00:	6820      	ldr	r0, [r4, #0]
 8006a02:	f020 0004 	bic.w	r0, r0, #4
 8006a06:	6020      	str	r0, [r4, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d13f      	bne.n	8006a8c <_printf_i+0x17c>
 8006a0c:	2d00      	cmp	r5, #0
 8006a0e:	f040 8095 	bne.w	8006b3c <_printf_i+0x22c>
 8006a12:	4675      	mov	r5, lr
 8006a14:	2a08      	cmp	r2, #8
 8006a16:	d10b      	bne.n	8006a30 <_printf_i+0x120>
 8006a18:	6823      	ldr	r3, [r4, #0]
 8006a1a:	07da      	lsls	r2, r3, #31
 8006a1c:	d508      	bpl.n	8006a30 <_printf_i+0x120>
 8006a1e:	6923      	ldr	r3, [r4, #16]
 8006a20:	6862      	ldr	r2, [r4, #4]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	bfde      	ittt	le
 8006a26:	2330      	movle	r3, #48	; 0x30
 8006a28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a2c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006a30:	ebae 0305 	sub.w	r3, lr, r5
 8006a34:	6123      	str	r3, [r4, #16]
 8006a36:	f8cd 8000 	str.w	r8, [sp]
 8006a3a:	463b      	mov	r3, r7
 8006a3c:	aa03      	add	r2, sp, #12
 8006a3e:	4621      	mov	r1, r4
 8006a40:	4630      	mov	r0, r6
 8006a42:	f7ff feed 	bl	8006820 <_printf_common>
 8006a46:	3001      	adds	r0, #1
 8006a48:	d155      	bne.n	8006af6 <_printf_i+0x1e6>
 8006a4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a4e:	b005      	add	sp, #20
 8006a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a54:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006a58:	493c      	ldr	r1, [pc, #240]	; (8006b4c <_printf_i+0x23c>)
 8006a5a:	6822      	ldr	r2, [r4, #0]
 8006a5c:	6818      	ldr	r0, [r3, #0]
 8006a5e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006a62:	f100 0504 	add.w	r5, r0, #4
 8006a66:	601d      	str	r5, [r3, #0]
 8006a68:	d001      	beq.n	8006a6e <_printf_i+0x15e>
 8006a6a:	6803      	ldr	r3, [r0, #0]
 8006a6c:	e002      	b.n	8006a74 <_printf_i+0x164>
 8006a6e:	0655      	lsls	r5, r2, #25
 8006a70:	d5fb      	bpl.n	8006a6a <_printf_i+0x15a>
 8006a72:	8803      	ldrh	r3, [r0, #0]
 8006a74:	07d0      	lsls	r0, r2, #31
 8006a76:	bf44      	itt	mi
 8006a78:	f042 0220 	orrmi.w	r2, r2, #32
 8006a7c:	6022      	strmi	r2, [r4, #0]
 8006a7e:	b91b      	cbnz	r3, 8006a88 <_printf_i+0x178>
 8006a80:	6822      	ldr	r2, [r4, #0]
 8006a82:	f022 0220 	bic.w	r2, r2, #32
 8006a86:	6022      	str	r2, [r4, #0]
 8006a88:	2210      	movs	r2, #16
 8006a8a:	e7b1      	b.n	80069f0 <_printf_i+0xe0>
 8006a8c:	4675      	mov	r5, lr
 8006a8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006a92:	fb02 3310 	mls	r3, r2, r0, r3
 8006a96:	5ccb      	ldrb	r3, [r1, r3]
 8006a98:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	d1f5      	bne.n	8006a8e <_printf_i+0x17e>
 8006aa2:	e7b7      	b.n	8006a14 <_printf_i+0x104>
 8006aa4:	6808      	ldr	r0, [r1, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006aac:	6949      	ldr	r1, [r1, #20]
 8006aae:	d004      	beq.n	8006aba <_printf_i+0x1aa>
 8006ab0:	1d10      	adds	r0, r2, #4
 8006ab2:	6018      	str	r0, [r3, #0]
 8006ab4:	6813      	ldr	r3, [r2, #0]
 8006ab6:	6019      	str	r1, [r3, #0]
 8006ab8:	e007      	b.n	8006aca <_printf_i+0x1ba>
 8006aba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006abe:	f102 0004 	add.w	r0, r2, #4
 8006ac2:	6018      	str	r0, [r3, #0]
 8006ac4:	6813      	ldr	r3, [r2, #0]
 8006ac6:	d0f6      	beq.n	8006ab6 <_printf_i+0x1a6>
 8006ac8:	8019      	strh	r1, [r3, #0]
 8006aca:	2300      	movs	r3, #0
 8006acc:	4675      	mov	r5, lr
 8006ace:	6123      	str	r3, [r4, #16]
 8006ad0:	e7b1      	b.n	8006a36 <_printf_i+0x126>
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	1d11      	adds	r1, r2, #4
 8006ad6:	6019      	str	r1, [r3, #0]
 8006ad8:	6815      	ldr	r5, [r2, #0]
 8006ada:	2100      	movs	r1, #0
 8006adc:	6862      	ldr	r2, [r4, #4]
 8006ade:	4628      	mov	r0, r5
 8006ae0:	f000 f836 	bl	8006b50 <memchr>
 8006ae4:	b108      	cbz	r0, 8006aea <_printf_i+0x1da>
 8006ae6:	1b40      	subs	r0, r0, r5
 8006ae8:	6060      	str	r0, [r4, #4]
 8006aea:	6863      	ldr	r3, [r4, #4]
 8006aec:	6123      	str	r3, [r4, #16]
 8006aee:	2300      	movs	r3, #0
 8006af0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006af4:	e79f      	b.n	8006a36 <_printf_i+0x126>
 8006af6:	6923      	ldr	r3, [r4, #16]
 8006af8:	462a      	mov	r2, r5
 8006afa:	4639      	mov	r1, r7
 8006afc:	4630      	mov	r0, r6
 8006afe:	47c0      	blx	r8
 8006b00:	3001      	adds	r0, #1
 8006b02:	d0a2      	beq.n	8006a4a <_printf_i+0x13a>
 8006b04:	6823      	ldr	r3, [r4, #0]
 8006b06:	079b      	lsls	r3, r3, #30
 8006b08:	d507      	bpl.n	8006b1a <_printf_i+0x20a>
 8006b0a:	2500      	movs	r5, #0
 8006b0c:	f104 0919 	add.w	r9, r4, #25
 8006b10:	68e3      	ldr	r3, [r4, #12]
 8006b12:	9a03      	ldr	r2, [sp, #12]
 8006b14:	1a9b      	subs	r3, r3, r2
 8006b16:	429d      	cmp	r5, r3
 8006b18:	db05      	blt.n	8006b26 <_printf_i+0x216>
 8006b1a:	68e0      	ldr	r0, [r4, #12]
 8006b1c:	9b03      	ldr	r3, [sp, #12]
 8006b1e:	4298      	cmp	r0, r3
 8006b20:	bfb8      	it	lt
 8006b22:	4618      	movlt	r0, r3
 8006b24:	e793      	b.n	8006a4e <_printf_i+0x13e>
 8006b26:	2301      	movs	r3, #1
 8006b28:	464a      	mov	r2, r9
 8006b2a:	4639      	mov	r1, r7
 8006b2c:	4630      	mov	r0, r6
 8006b2e:	47c0      	blx	r8
 8006b30:	3001      	adds	r0, #1
 8006b32:	d08a      	beq.n	8006a4a <_printf_i+0x13a>
 8006b34:	3501      	adds	r5, #1
 8006b36:	e7eb      	b.n	8006b10 <_printf_i+0x200>
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1a7      	bne.n	8006a8c <_printf_i+0x17c>
 8006b3c:	780b      	ldrb	r3, [r1, #0]
 8006b3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b46:	e765      	b.n	8006a14 <_printf_i+0x104>
 8006b48:	08006e86 	.word	0x08006e86
 8006b4c:	08006e75 	.word	0x08006e75

08006b50 <memchr>:
 8006b50:	b510      	push	{r4, lr}
 8006b52:	b2c9      	uxtb	r1, r1
 8006b54:	4402      	add	r2, r0
 8006b56:	4290      	cmp	r0, r2
 8006b58:	4603      	mov	r3, r0
 8006b5a:	d101      	bne.n	8006b60 <memchr+0x10>
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	bd10      	pop	{r4, pc}
 8006b60:	781c      	ldrb	r4, [r3, #0]
 8006b62:	3001      	adds	r0, #1
 8006b64:	428c      	cmp	r4, r1
 8006b66:	d1f6      	bne.n	8006b56 <memchr+0x6>
 8006b68:	4618      	mov	r0, r3
 8006b6a:	bd10      	pop	{r4, pc}

08006b6c <memcpy>:
 8006b6c:	b510      	push	{r4, lr}
 8006b6e:	1e43      	subs	r3, r0, #1
 8006b70:	440a      	add	r2, r1
 8006b72:	4291      	cmp	r1, r2
 8006b74:	d100      	bne.n	8006b78 <memcpy+0xc>
 8006b76:	bd10      	pop	{r4, pc}
 8006b78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b80:	e7f7      	b.n	8006b72 <memcpy+0x6>

08006b82 <memmove>:
 8006b82:	4288      	cmp	r0, r1
 8006b84:	b510      	push	{r4, lr}
 8006b86:	eb01 0302 	add.w	r3, r1, r2
 8006b8a:	d803      	bhi.n	8006b94 <memmove+0x12>
 8006b8c:	1e42      	subs	r2, r0, #1
 8006b8e:	4299      	cmp	r1, r3
 8006b90:	d10c      	bne.n	8006bac <memmove+0x2a>
 8006b92:	bd10      	pop	{r4, pc}
 8006b94:	4298      	cmp	r0, r3
 8006b96:	d2f9      	bcs.n	8006b8c <memmove+0xa>
 8006b98:	1881      	adds	r1, r0, r2
 8006b9a:	1ad2      	subs	r2, r2, r3
 8006b9c:	42d3      	cmn	r3, r2
 8006b9e:	d100      	bne.n	8006ba2 <memmove+0x20>
 8006ba0:	bd10      	pop	{r4, pc}
 8006ba2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ba6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006baa:	e7f7      	b.n	8006b9c <memmove+0x1a>
 8006bac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bb0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006bb4:	e7eb      	b.n	8006b8e <memmove+0xc>
	...

08006bb8 <_free_r>:
 8006bb8:	b538      	push	{r3, r4, r5, lr}
 8006bba:	4605      	mov	r5, r0
 8006bbc:	2900      	cmp	r1, #0
 8006bbe:	d043      	beq.n	8006c48 <_free_r+0x90>
 8006bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bc4:	1f0c      	subs	r4, r1, #4
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	bfb8      	it	lt
 8006bca:	18e4      	addlt	r4, r4, r3
 8006bcc:	f000 f8d4 	bl	8006d78 <__malloc_lock>
 8006bd0:	4a1e      	ldr	r2, [pc, #120]	; (8006c4c <_free_r+0x94>)
 8006bd2:	6813      	ldr	r3, [r2, #0]
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	b933      	cbnz	r3, 8006be6 <_free_r+0x2e>
 8006bd8:	6063      	str	r3, [r4, #4]
 8006bda:	6014      	str	r4, [r2, #0]
 8006bdc:	4628      	mov	r0, r5
 8006bde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006be2:	f000 b8ca 	b.w	8006d7a <__malloc_unlock>
 8006be6:	42a3      	cmp	r3, r4
 8006be8:	d90b      	bls.n	8006c02 <_free_r+0x4a>
 8006bea:	6821      	ldr	r1, [r4, #0]
 8006bec:	1862      	adds	r2, r4, r1
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	bf01      	itttt	eq
 8006bf2:	681a      	ldreq	r2, [r3, #0]
 8006bf4:	685b      	ldreq	r3, [r3, #4]
 8006bf6:	1852      	addeq	r2, r2, r1
 8006bf8:	6022      	streq	r2, [r4, #0]
 8006bfa:	6063      	str	r3, [r4, #4]
 8006bfc:	6004      	str	r4, [r0, #0]
 8006bfe:	e7ed      	b.n	8006bdc <_free_r+0x24>
 8006c00:	4613      	mov	r3, r2
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	b10a      	cbz	r2, 8006c0a <_free_r+0x52>
 8006c06:	42a2      	cmp	r2, r4
 8006c08:	d9fa      	bls.n	8006c00 <_free_r+0x48>
 8006c0a:	6819      	ldr	r1, [r3, #0]
 8006c0c:	1858      	adds	r0, r3, r1
 8006c0e:	42a0      	cmp	r0, r4
 8006c10:	d10b      	bne.n	8006c2a <_free_r+0x72>
 8006c12:	6820      	ldr	r0, [r4, #0]
 8006c14:	4401      	add	r1, r0
 8006c16:	1858      	adds	r0, r3, r1
 8006c18:	4282      	cmp	r2, r0
 8006c1a:	6019      	str	r1, [r3, #0]
 8006c1c:	d1de      	bne.n	8006bdc <_free_r+0x24>
 8006c1e:	6810      	ldr	r0, [r2, #0]
 8006c20:	6852      	ldr	r2, [r2, #4]
 8006c22:	4401      	add	r1, r0
 8006c24:	6019      	str	r1, [r3, #0]
 8006c26:	605a      	str	r2, [r3, #4]
 8006c28:	e7d8      	b.n	8006bdc <_free_r+0x24>
 8006c2a:	d902      	bls.n	8006c32 <_free_r+0x7a>
 8006c2c:	230c      	movs	r3, #12
 8006c2e:	602b      	str	r3, [r5, #0]
 8006c30:	e7d4      	b.n	8006bdc <_free_r+0x24>
 8006c32:	6820      	ldr	r0, [r4, #0]
 8006c34:	1821      	adds	r1, r4, r0
 8006c36:	428a      	cmp	r2, r1
 8006c38:	bf01      	itttt	eq
 8006c3a:	6811      	ldreq	r1, [r2, #0]
 8006c3c:	6852      	ldreq	r2, [r2, #4]
 8006c3e:	1809      	addeq	r1, r1, r0
 8006c40:	6021      	streq	r1, [r4, #0]
 8006c42:	6062      	str	r2, [r4, #4]
 8006c44:	605c      	str	r4, [r3, #4]
 8006c46:	e7c9      	b.n	8006bdc <_free_r+0x24>
 8006c48:	bd38      	pop	{r3, r4, r5, pc}
 8006c4a:	bf00      	nop
 8006c4c:	2000029c 	.word	0x2000029c

08006c50 <_malloc_r>:
 8006c50:	b570      	push	{r4, r5, r6, lr}
 8006c52:	1ccd      	adds	r5, r1, #3
 8006c54:	f025 0503 	bic.w	r5, r5, #3
 8006c58:	3508      	adds	r5, #8
 8006c5a:	2d0c      	cmp	r5, #12
 8006c5c:	bf38      	it	cc
 8006c5e:	250c      	movcc	r5, #12
 8006c60:	2d00      	cmp	r5, #0
 8006c62:	4606      	mov	r6, r0
 8006c64:	db01      	blt.n	8006c6a <_malloc_r+0x1a>
 8006c66:	42a9      	cmp	r1, r5
 8006c68:	d903      	bls.n	8006c72 <_malloc_r+0x22>
 8006c6a:	230c      	movs	r3, #12
 8006c6c:	6033      	str	r3, [r6, #0]
 8006c6e:	2000      	movs	r0, #0
 8006c70:	bd70      	pop	{r4, r5, r6, pc}
 8006c72:	f000 f881 	bl	8006d78 <__malloc_lock>
 8006c76:	4a23      	ldr	r2, [pc, #140]	; (8006d04 <_malloc_r+0xb4>)
 8006c78:	6814      	ldr	r4, [r2, #0]
 8006c7a:	4621      	mov	r1, r4
 8006c7c:	b991      	cbnz	r1, 8006ca4 <_malloc_r+0x54>
 8006c7e:	4c22      	ldr	r4, [pc, #136]	; (8006d08 <_malloc_r+0xb8>)
 8006c80:	6823      	ldr	r3, [r4, #0]
 8006c82:	b91b      	cbnz	r3, 8006c8c <_malloc_r+0x3c>
 8006c84:	4630      	mov	r0, r6
 8006c86:	f000 f867 	bl	8006d58 <_sbrk_r>
 8006c8a:	6020      	str	r0, [r4, #0]
 8006c8c:	4629      	mov	r1, r5
 8006c8e:	4630      	mov	r0, r6
 8006c90:	f000 f862 	bl	8006d58 <_sbrk_r>
 8006c94:	1c43      	adds	r3, r0, #1
 8006c96:	d126      	bne.n	8006ce6 <_malloc_r+0x96>
 8006c98:	230c      	movs	r3, #12
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	6033      	str	r3, [r6, #0]
 8006c9e:	f000 f86c 	bl	8006d7a <__malloc_unlock>
 8006ca2:	e7e4      	b.n	8006c6e <_malloc_r+0x1e>
 8006ca4:	680b      	ldr	r3, [r1, #0]
 8006ca6:	1b5b      	subs	r3, r3, r5
 8006ca8:	d41a      	bmi.n	8006ce0 <_malloc_r+0x90>
 8006caa:	2b0b      	cmp	r3, #11
 8006cac:	d90f      	bls.n	8006cce <_malloc_r+0x7e>
 8006cae:	600b      	str	r3, [r1, #0]
 8006cb0:	18cc      	adds	r4, r1, r3
 8006cb2:	50cd      	str	r5, [r1, r3]
 8006cb4:	4630      	mov	r0, r6
 8006cb6:	f000 f860 	bl	8006d7a <__malloc_unlock>
 8006cba:	f104 000b 	add.w	r0, r4, #11
 8006cbe:	1d23      	adds	r3, r4, #4
 8006cc0:	f020 0007 	bic.w	r0, r0, #7
 8006cc4:	1ac3      	subs	r3, r0, r3
 8006cc6:	d01b      	beq.n	8006d00 <_malloc_r+0xb0>
 8006cc8:	425a      	negs	r2, r3
 8006cca:	50e2      	str	r2, [r4, r3]
 8006ccc:	bd70      	pop	{r4, r5, r6, pc}
 8006cce:	428c      	cmp	r4, r1
 8006cd0:	bf0b      	itete	eq
 8006cd2:	6863      	ldreq	r3, [r4, #4]
 8006cd4:	684b      	ldrne	r3, [r1, #4]
 8006cd6:	6013      	streq	r3, [r2, #0]
 8006cd8:	6063      	strne	r3, [r4, #4]
 8006cda:	bf18      	it	ne
 8006cdc:	460c      	movne	r4, r1
 8006cde:	e7e9      	b.n	8006cb4 <_malloc_r+0x64>
 8006ce0:	460c      	mov	r4, r1
 8006ce2:	6849      	ldr	r1, [r1, #4]
 8006ce4:	e7ca      	b.n	8006c7c <_malloc_r+0x2c>
 8006ce6:	1cc4      	adds	r4, r0, #3
 8006ce8:	f024 0403 	bic.w	r4, r4, #3
 8006cec:	42a0      	cmp	r0, r4
 8006cee:	d005      	beq.n	8006cfc <_malloc_r+0xac>
 8006cf0:	1a21      	subs	r1, r4, r0
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	f000 f830 	bl	8006d58 <_sbrk_r>
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	d0cd      	beq.n	8006c98 <_malloc_r+0x48>
 8006cfc:	6025      	str	r5, [r4, #0]
 8006cfe:	e7d9      	b.n	8006cb4 <_malloc_r+0x64>
 8006d00:	bd70      	pop	{r4, r5, r6, pc}
 8006d02:	bf00      	nop
 8006d04:	2000029c 	.word	0x2000029c
 8006d08:	200002a0 	.word	0x200002a0

08006d0c <_realloc_r>:
 8006d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0e:	4607      	mov	r7, r0
 8006d10:	4614      	mov	r4, r2
 8006d12:	460e      	mov	r6, r1
 8006d14:	b921      	cbnz	r1, 8006d20 <_realloc_r+0x14>
 8006d16:	4611      	mov	r1, r2
 8006d18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006d1c:	f7ff bf98 	b.w	8006c50 <_malloc_r>
 8006d20:	b922      	cbnz	r2, 8006d2c <_realloc_r+0x20>
 8006d22:	f7ff ff49 	bl	8006bb8 <_free_r>
 8006d26:	4625      	mov	r5, r4
 8006d28:	4628      	mov	r0, r5
 8006d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d2c:	f000 f826 	bl	8006d7c <_malloc_usable_size_r>
 8006d30:	4284      	cmp	r4, r0
 8006d32:	d90f      	bls.n	8006d54 <_realloc_r+0x48>
 8006d34:	4621      	mov	r1, r4
 8006d36:	4638      	mov	r0, r7
 8006d38:	f7ff ff8a 	bl	8006c50 <_malloc_r>
 8006d3c:	4605      	mov	r5, r0
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	d0f2      	beq.n	8006d28 <_realloc_r+0x1c>
 8006d42:	4631      	mov	r1, r6
 8006d44:	4622      	mov	r2, r4
 8006d46:	f7ff ff11 	bl	8006b6c <memcpy>
 8006d4a:	4631      	mov	r1, r6
 8006d4c:	4638      	mov	r0, r7
 8006d4e:	f7ff ff33 	bl	8006bb8 <_free_r>
 8006d52:	e7e9      	b.n	8006d28 <_realloc_r+0x1c>
 8006d54:	4635      	mov	r5, r6
 8006d56:	e7e7      	b.n	8006d28 <_realloc_r+0x1c>

08006d58 <_sbrk_r>:
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	4c05      	ldr	r4, [pc, #20]	; (8006d74 <_sbrk_r+0x1c>)
 8006d5e:	4605      	mov	r5, r0
 8006d60:	4608      	mov	r0, r1
 8006d62:	6023      	str	r3, [r4, #0]
 8006d64:	f000 f814 	bl	8006d90 <_sbrk>
 8006d68:	1c43      	adds	r3, r0, #1
 8006d6a:	d102      	bne.n	8006d72 <_sbrk_r+0x1a>
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	b103      	cbz	r3, 8006d72 <_sbrk_r+0x1a>
 8006d70:	602b      	str	r3, [r5, #0]
 8006d72:	bd38      	pop	{r3, r4, r5, pc}
 8006d74:	20000520 	.word	0x20000520

08006d78 <__malloc_lock>:
 8006d78:	4770      	bx	lr

08006d7a <__malloc_unlock>:
 8006d7a:	4770      	bx	lr

08006d7c <_malloc_usable_size_r>:
 8006d7c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006d80:	2800      	cmp	r0, #0
 8006d82:	f1a0 0004 	sub.w	r0, r0, #4
 8006d86:	bfbc      	itt	lt
 8006d88:	580b      	ldrlt	r3, [r1, r0]
 8006d8a:	18c0      	addlt	r0, r0, r3
 8006d8c:	4770      	bx	lr
	...

08006d90 <_sbrk>:
 8006d90:	4b04      	ldr	r3, [pc, #16]	; (8006da4 <_sbrk+0x14>)
 8006d92:	4602      	mov	r2, r0
 8006d94:	6819      	ldr	r1, [r3, #0]
 8006d96:	b909      	cbnz	r1, 8006d9c <_sbrk+0xc>
 8006d98:	4903      	ldr	r1, [pc, #12]	; (8006da8 <_sbrk+0x18>)
 8006d9a:	6019      	str	r1, [r3, #0]
 8006d9c:	6818      	ldr	r0, [r3, #0]
 8006d9e:	4402      	add	r2, r0
 8006da0:	601a      	str	r2, [r3, #0]
 8006da2:	4770      	bx	lr
 8006da4:	200002a4 	.word	0x200002a4
 8006da8:	20000524 	.word	0x20000524

08006dac <_init>:
 8006dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dae:	bf00      	nop
 8006db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006db2:	bc08      	pop	{r3}
 8006db4:	469e      	mov	lr, r3
 8006db6:	4770      	bx	lr

08006db8 <_fini>:
 8006db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dba:	bf00      	nop
 8006dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dbe:	bc08      	pop	{r3}
 8006dc0:	469e      	mov	lr, r3
 8006dc2:	4770      	bx	lr
